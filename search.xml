<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tokio 备忘录</title>
      <link href="/posts/404056903/"/>
      <url>/posts/404056903/</url>
      
        <content type="html"><![CDATA[<p>学习 Tokio 的备忘录，记录一下常用代码<br>Tokio 专为 IO 密集型应用程序而设计，其中每个单独的任务大部分时间都在等待 IO</p><p>内容来源：<br><a href="https://tokio.rs/tokio/tutorial">https://tokio.rs/tokio/tutorial</a><br><a href="https://github.com/rustlang-cn/Rustt/tree/main/Books">https://github.com/rustlang-cn/Rustt/tree/main/Books</a></p><span id="more"></span><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="加入tokio运行时和创建线程"><a href="#加入tokio运行时和创建线程" class="headerlink" title="加入tokio运行时和创建线程"></a>加入tokio运行时和创建线程</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mini_redis::&#123;client, <span class="type">Result</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[tokio::main] 的展开</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    tokio::runtime::Builder::<span class="title function_ invoke__">new_multi_thread</span>()</span><br><span class="line">        .<span class="title function_ invoke__">enable_all</span>()</span><br><span class="line">        .<span class="title function_ invoke__">build</span>()</span><br><span class="line">        .<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">        .<span class="title function_ invoke__">block_on</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rt</span> = tokio::runtime::Runtime::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    rt.<span class="title function_ invoke__">block_on</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发，同时处理多个请求"><a href="#并发，同时处理多个请求" class="headerlink" title="并发，同时处理多个请求"></a>并发，同时处理多个请求</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::net::TcpListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(<span class="string">&quot;127.0.0.1:6379&quot;</span>).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> (socket, _) = listener.<span class="title function_ invoke__">accept</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="comment">// A new task is spawned for each inbound socket. The socket is</span></span><br><span class="line">        <span class="comment">// moved to the new task and processed there.</span></span><br><span class="line">        tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">process</span>(socket).<span class="keyword">await</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以有返回值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="comment">// Do some async work</span></span><br><span class="line">        <span class="string">&quot;return value&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do some other work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">out</span> = handle.<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;GOT &#123;&#125;&quot;</span>, out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待JoinHandle返回一个Result. 当任务在执行过程中遇到错误时，JoinHandle将返回一个Err.<br>当任务出现紧急情况，或者任务被运行时关闭强制取消时，就会发生这种情况。</p><h2 id="共享状态"><a href="#共享状态" class="headerlink" title="共享状态"></a>共享状态</h2><p>在 Tokio 中有几种不同的方式来共享状态。</p><ol><li>使用 Mutex 保护共享状态。</li><li>生成一个任务来管理状态并使用消息传递对其进行操作。</li></ol><h3 id="使用-Mutex-保护共享状态"><a href="#使用-Mutex-保护共享状态" class="headerlink" title="使用 Mutex 保护共享状态"></a>使用 Mutex 保护共享状态</h3><p>添加依赖 bytes，请将以下内容添加到您Cargo.toml的 [dependencies]部分中：</p><p>bytes &#x3D; “1”</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> bytes::Bytes;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::sync::&#123;Arc, Mutex&#125;;</span><br><span class="line"><span class="comment">// tokio::sync::Mutex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Db</span> = Arc&lt;Mutex&lt;HashMap&lt;<span class="type">String</span>, Bytes&gt;&gt;&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(<span class="string">&quot;127.0.0.1:6379&quot;</span>).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Listening&quot;</span>);</span><br><span class="line">    <span class="comment">// 初始化 HashMap</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db</span> = Arc::<span class="title function_ invoke__">new</span>(Mutex::<span class="title function_ invoke__">new</span>(HashMap::<span class="title function_ invoke__">new</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> (socket, _) = listener.<span class="title function_ invoke__">accept</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="comment">// Clone the handle to the hash map.</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">db</span> = db.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Accepted&quot;</span>);</span><br><span class="line">        tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">process</span>(socket, db).<span class="keyword">await</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tokio 提供的异步锁只应该在跨多个 .await调用时使用，而且 Tokio 的 Mutex 实际上内部使用的也是 std::sync::Mutex。</p><p>Tokio 提供的锁最大的优点就是：它可以在 .await 执行期间被持有，而且不会有任何问题。但是代价就是，这种异步锁的性能开销会更高。</p></blockquote><h3 id="使用-channel-消息传递"><a href="#使用-channel-消息传递" class="headerlink" title="使用 channel 消息传递"></a>使用 channel 消息传递</h3><p>Tokio 提供了多种消息通道，可以满足不同场景的需求:</p><ul><li>mpsc, 多生产者，单消费者模式</li><li>oneshot, 单生产者单消费，一次只能发送一条消息</li><li>broadcast，多生产者，多消费者，其中每一条发送的消息都可以被所有接收者收到，因此是广播</li><li>watch，单生产者，多消费者，只保存一条最新的消息，因此接收者只能看到最近的一条消息，例如，这种模式适用于配置文件变化的监听‘</li></ul><h4 id="创建消息通道"><a href="#创建消息通道" class="headerlink" title="创建消息通道"></a>创建消息通道</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::sync::mpsc;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 创建一个新通道，缓冲队列长度是 32</span></span><br><span class="line">    <span class="keyword">let</span> (tx, <span class="keyword">mut</span> rx) = mpsc::<span class="title function_ invoke__">channel</span>(<span class="number">32</span>); <span class="comment">// 多生产者，单消费者模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tx2</span> = tx.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">    tx.<span class="title function_ invoke__">send</span>(<span class="string">&quot;sending from first handle&quot;</span>).<span class="keyword">await</span>;</span><br><span class="line">    tx2.<span class="title function_ invoke__">send</span>(<span class="string">&quot;sending from second handle&quot;</span>).<span class="keyword">await</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 消费，只能有一个消费者</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(message) = rx.<span class="title function_ invoke__">recv</span>().<span class="keyword">await</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;GOT = &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当所有的发送者都被 Drop 掉后(超出作用域或被 drop(...) 函数主动释放)，就不再会有任何消息发送给该通道，</span></span><br><span class="line">    <span class="comment">// 此时 recv 方法将返回 None，也意味着该通道已经被关闭。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IO-文件输入输出"><a href="#IO-文件输入输出" class="headerlink" title="IO,文件输入输出"></a>IO,文件输入输出</h1><p>Tokio 中的 I&#x2F;O 操作和 std 在使用方式上几无区别，最大的区别就是前者是异步的，例如 Tokio 的读写特征分别是 AsyncRead 和 AsyncWrite:</p><ul><li>有部分类型按照自己的所需实现了它们: TcpStream，File，Stdout</li><li>还有数据结构也实现了它们：Vec<u8>、&amp;[u8]，这样就可以直接使用这些数据结构作为读写器( reader &#x2F; writer)</li></ul><h2 id="AsyncRead-和-AsyncWrite"><a href="#AsyncRead-和-AsyncWrite" class="headerlink" title="AsyncRead 和 AsyncWrite"></a>AsyncRead 和 AsyncWrite</h2><h3 id="read-主要有2个方法："><a href="#read-主要有2个方法：" class="headerlink" title="read 主要有2个方法："></a>read 主要有2个方法：</h3><p>read 和 read_to_end</p><p><code>AsyncReadExt::read</code> 是一个异步方法可以将数据读入缓冲区( buffer )中，然后返回读取的字节数。<br><code>AsyncReadExt::read_to_end</code> 方法会从字节流中读取所有的字节，直到遇到 EOF ：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::fs::File;</span><br><span class="line"><span class="keyword">use</span> tokio::io::&#123;<span class="keyword">self</span>, AsyncReadExt&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;foo.txt&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buffer</span> = [<span class="number">0</span>; <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于 buffer 的长度限制，当次的 `read` 调用最多可以从文件中读取 10 个字节的数据</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = f.<span class="title function_ invoke__">read</span>(&amp;<span class="keyword">mut</span> buffer[..]).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取整个文件的内容</span></span><br><span class="line">    f.<span class="title function_ invoke__">read_to_end</span>(&amp;<span class="keyword">mut</span> buffer).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The bytes: &#123;:?&#125;&quot;</span>, &amp;buffer[..n]);</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AsyncWriteExt::write</code> 异步方法会尝试将缓冲区的内容写入到写入器( writer )中，同时返回写入的字节数<br><code>AsyncWriteExt::write_all</code> 将缓冲区的内容全部写入到写入器中</p><h3 id="write-同样也有2个方法："><a href="#write-同样也有2个方法：" class="headerlink" title="write 同样也有2个方法："></a>write 同样也有2个方法：</h3><p>write 和 write_all；和 rea差不多</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::io::&#123;<span class="keyword">self</span>, AsyncWriteExt&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = File::<span class="title function_ invoke__">create</span>(<span class="string">&quot;foo.txt&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = file.<span class="title function_ invoke__">write</span>(<span class="string">b&quot;some bytes&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入全部</span></span><br><span class="line">    file.<span class="title function_ invoke__">write_all</span>(<span class="string">b&quot;some bytes&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Wrote the first &#123;&#125; bytes of &#x27;some bytes&#x27;.&quot;</span>, n);</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有其他的一些api<br><a href="https://docs.rs/tokio/latest/tokio/fs/struct.File.html">File </a></p><ul><li>File::open</li><li>File::create</li></ul><p><a href="https://docs.rs/tokio/latest/tokio/io/trait.AsyncReadExt.html">用于操作 File 的 AsyncReadExt 特征</a></p><ul><li>read 读取多少字节，然后返回</li><li>read_buf 读取字节，并且更新文件指针的游标位置</li><li>read_exact 此函数根据需要读取尽可能多的字节以完全填充指定的缓冲区buf。如果没填完，就报错</li><li>read_u8&#x2F;read_i8 等，从底层读取器读取一个无符号的 8 位整数。</li></ul><p><a href="https://docs.rs/tokio/latest/tokio/io/trait.AsyncWriteExt.html">用于操作 File 的 AsyncWriteExt 特征</a></p><ul><li>write</li><li>write_vectored </li><li>write_all</li><li>write_all_buf </li><li>write_u8&#x2F;write_i8 等</li></ul><h3 id="其他的一些辅助函数"><a href="#其他的一些辅助函数" class="headerlink" title="其他的一些辅助函数"></a>其他的一些辅助函数</h3><p><a href="https://docs.rs/tokio/1.20.1/tokio/io/fn.copy.html">https://docs.rs/tokio/1.20.1/tokio/io/fn.copy.html</a></p><ul><li>copy io::copy(&amp;mut reader, &amp;mut writer).await?;</li><li>copy_bidirectional 互相交换数据</li><li>copy_buf 将读取器的全部内容异步复制到写入器中。</li><li>io::duplex() 双工流； 创建一对新的DuplexStreams，其作用类似于一对连接的套接字。</li><li>io::empty() 创建一个新的空异步读取器。</li><li>io::repeat() 创建一个无限重复一个字节的异步读取器实例。</li><li>io::split() 将实现的单个值拆分AsyncRead + AsyncWrite为单独 的AsyncRead和AsyncWrite句柄。</li><li>io::stderr() 标准错误</li><li>io::stdout() 标准输出</li><li><ul><li>io::stdin() 标准输入</li></ul></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::io::&#123;<span class="keyword">self</span>, AsyncWriteExt&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stderr</span> = io::<span class="title function_ invoke__">stderr</span>();</span><br><span class="line">    stderr.<span class="title function_ invoke__">write_all</span>(<span class="string">b&quot;Print some error here.&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据帧-Frame"><a href="#数据帧-Frame" class="headerlink" title="数据帧 Frame"></a>数据帧 Frame</h2><p>通过帧可以将字节流转换成帧组成的流。每个帧就是一个数据单元，例如客户端发送的一次请求就是一个帧。</p><details><summary>展开查看</summary><pre><code>use mini_redis::&#123;Frame, Result&#125;;use mini_redis::frame::Error::Incomplete;use bytes::Buf;use std::io::Cursor;fn parse_frame(&mut self) -> Result<Option<Frame>> &#123;let mut buf = Cursor::new(&self.buffer[..]); // 创建 `T: Buf` 类型    // 检查是否读取了足够解析出一个帧的数据    match Frame::check(&mut buf) &#123;        Ok(_) => &#123;            // 获取组成该帧的字节数            let len = buf.position() as usize;<pre><code>        // 在解析开始之前，重置内部的游标位置        buf.set_position(0);        // 解析帧        let frame = Frame::parse(&amp;mut buf)?;        // 解析完成，将缓冲区该帧的数据移除        self.buffer.advance(len);        // 返回解析出的帧        Ok(Some(frame))    &#125;    // 缓冲区的数据不足以解析出一个完整的帧    Err(Incomplete) =&gt; Ok(None),    // 遇到一个错误    Err(e) =&gt; Err(e.into()),&#125;</code></pre><p>}<br></code></pre></p></details><h1 id="并发代码的其他执行方法"><a href="#并发代码的其他执行方法" class="headerlink" title="并发代码的其他执行方法"></a>并发代码的其他执行方法</h1><h2 id="select"><a href="#select" class="headerlink" title="select!"></a>select!</h2><p>在实际使用时，一个重要的场景就是同时等待多个异步操作的结果，并且对其结果进行进一步处理，<br>在本章节，我们来看看，强大的 select! 是如何帮助咱们更好的控制多个异步操作并发执行的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::sync::oneshot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">some_operation</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里执行一些操作...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx1, rx1) = oneshot::<span class="title function_ invoke__">channel</span>();</span><br><span class="line">    <span class="keyword">let</span> (tx2, rx2) = oneshot::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">    tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">_</span> = tx1.<span class="title function_ invoke__">send</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="comment">// 等待 `some_operation` 的完成</span></span><br><span class="line">        <span class="comment">// 或者处理 `oneshot` 的关闭通知</span></span><br><span class="line">        tokio::<span class="built_in">select!</span> &#123;</span><br><span class="line">            val = <span class="title function_ invoke__">some_operation</span>() =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">_</span> = tx1.<span class="title function_ invoke__">send</span>(val);</span><br><span class="line">            &#125;</span><br><span class="line">            _ = tx1.<span class="title function_ invoke__">closed</span>() =&gt; &#123;</span><br><span class="line">                <span class="comment">// 收到了发送端发来的关闭信号</span></span><br><span class="line">                <span class="comment">// `select` 即将结束，此时，正在进行的 `some_operation()` 任务会被取消，任务自动完成，</span></span><br><span class="line">                <span class="comment">// tx1 被释放</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">_</span> = tx2.<span class="title function_ invoke__">send</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">_</span> = tx2.<span class="title function_ invoke__">send</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    tokio::<span class="built_in">select!</span> &#123;</span><br><span class="line">        val = rx1 =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;rx1 completed first with &#123;:?&#125;&quot;</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">        val = rx2 =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;rx2 completed first with &#123;:?&#125;&quot;</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任何一个 select 分支结束后，都会继续执行接下来的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在循环中使用-select"><a href="#在循环中使用-select" class="headerlink" title="在循环中使用 select!"></a>在循环中使用 select!</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio::sync::mpsc;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx1, <span class="keyword">mut</span> rx1) = mpsc::<span class="title function_ invoke__">channel</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">let</span> (tx2, <span class="keyword">mut</span> rx2) = mpsc::<span class="title function_ invoke__">channel</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">let</span> (tx3, <span class="keyword">mut</span> rx3) = mpsc::<span class="title function_ invoke__">channel</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">msg</span> = tokio::<span class="built_in">select!</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(msg) = rx1.<span class="title function_ invoke__">recv</span>() =&gt; msg,</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(msg) = rx2.<span class="title function_ invoke__">recv</span>() =&gt; msg,</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(msg) = rx3.<span class="title function_ invoke__">recv</span>() =&gt; msg,</span><br><span class="line">            <span class="keyword">else</span> =&gt; &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Got &#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;All channels have been closed.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环中使用 select! 最大的不同就是，当某一个分支执行完成后，select! 会继续循环等待并执行下一个分支，直到所有分支最终都完成，最终匹配到 else 分支，然后通过 break 跳出循环</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>要使用 stream ，目前还需要手动引入对应的包：</p><blockquote><p>tokio-stream &#x3D; “0.1</p></blockquote><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>目前， Rust 语言还不支持异步的 for 循环，因此我们需要 while let 循环和 StreamExt::next() 一起使用来实现迭代的目的:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio_stream::StreamExt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stream</span> = tokio_stream::<span class="title function_ invoke__">iter</span>(&amp;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = stream.<span class="title function_ invoke__">next</span>().<span class="keyword">await</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;GOT = &#123;:?&#125;&quot;</span>, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><p>迭代器有两种适配器：</p><ul><li>迭代器适配器，会将一个迭代器转变成另一个迭代器，例如 map，filter 等</li><li>消费者适配器，会消费掉一个迭代器，最终生成一个值，例如 collect 可以将迭代器收集成一个集合</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tokio_stream::StreamExt;</span><br><span class="line"><span class="keyword">use</span> mini_redis::client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">publish</span>() <span class="punctuation">-&gt;</span> mini_redis::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">client</span> = client::<span class="title function_ invoke__">connect</span>(<span class="string">&quot;127.0.0.1:6379&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布一些数据</span></span><br><span class="line">    client.<span class="title function_ invoke__">publish</span>(<span class="string">&quot;numbers&quot;</span>, <span class="string">&quot;1&quot;</span>.<span class="title function_ invoke__">into</span>()).<span class="keyword">await</span>?;</span><br><span class="line">    client.<span class="title function_ invoke__">publish</span>(<span class="string">&quot;numbers&quot;</span>, <span class="string">&quot;two&quot;</span>.<span class="title function_ invoke__">into</span>()).<span class="keyword">await</span>?;</span><br><span class="line">    client.<span class="title function_ invoke__">publish</span>(<span class="string">&quot;numbers&quot;</span>, <span class="string">&quot;3&quot;</span>.<span class="title function_ invoke__">into</span>()).<span class="keyword">await</span>?;</span><br><span class="line">    client.<span class="title function_ invoke__">publish</span>(<span class="string">&quot;numbers&quot;</span>, <span class="string">&quot;four&quot;</span>.<span class="title function_ invoke__">into</span>()).<span class="keyword">await</span>?;</span><br><span class="line">    client.<span class="title function_ invoke__">publish</span>(<span class="string">&quot;numbers&quot;</span>, <span class="string">&quot;five&quot;</span>.<span class="title function_ invoke__">into</span>()).<span class="keyword">await</span>?;</span><br><span class="line">    client.<span class="title function_ invoke__">publish</span>(<span class="string">&quot;numbers&quot;</span>, <span class="string">&quot;6&quot;</span>.<span class="title function_ invoke__">into</span>()).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">subscribe</span>() <span class="punctuation">-&gt;</span> mini_redis::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client</span> = client::<span class="title function_ invoke__">connect</span>(<span class="string">&quot;127.0.0.1:6379&quot;</span>).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">subscriber</span> = client.<span class="title function_ invoke__">subscribe</span>(<span class="built_in">vec!</span>[<span class="string">&quot;numbers&quot;</span>.<span class="title function_ invoke__">to_string</span>()]).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">messages</span> = subscriber.<span class="title function_ invoke__">into_stream</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">messages</span> = messages</span><br><span class="line">        .<span class="title function_ invoke__">filter</span>(|msg| <span class="keyword">match</span> msg &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(msg) <span class="keyword">if</span> msg.content.<span class="title function_ invoke__">len</span>() == <span class="number">1</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            _ =&gt; <span class="literal">false</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_ invoke__">map</span>(|msg| msg.<span class="title function_ invoke__">unwrap</span>().content)</span><br><span class="line">        .<span class="title function_ invoke__">take</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    tokio::pin!(messages);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(msg) = messages.<span class="title function_ invoke__">next</span>().<span class="keyword">await</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;got = &#123;:?&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> mini_redis::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">publish</span>().<span class="keyword">await</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">subscribe</span>().<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;DONE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再也不玩王者荣耀了</title>
      <link href="/posts/3647680874/"/>
      <url>/posts/3647680874/</url>
      
        <content type="html"><![CDATA[<p>再也不玩王者荣耀了</p><span id="more"></span><p>最近半年打王者荣耀，总是赢3局，输三局，甚至更多，深深得感觉到 elo 机制的恶心。<br>它就吊着你，本来你能30局左右就能从钻石升级到星耀，或者从星耀升级到王者，但是它并不是这样的，让你赢3局，然后再给你匹配各种奇葩队友，让你输掉！反复如此！！<br>我一个星期连续每天打3局，居然无法从星耀5升级到星耀4，这可真牛逼了，卸载一段时间再下载回来打，然后开始再让你连赢几局，有的时候赢的莫名其妙，有的时候被压着打到吐反而还能赢，</p><p>但是！打5v5是为了赢吗？不全部是吧，MOBA游戏经久不衰是为什么呢，还不是人类从人与人的对抗中，竞技中得到快乐，重点是竞技呀，人为操控的输赢有什么意思，<br>以前有时候打一局虽然输了可惜，但是过程中着实能感觉到激烈的对抗，心跳的加速，让人热血沸腾！！</p><p>现在呢，擦，我已经卸载了它好几次了，今天手贱又下载了回来，连续打了7局，前3局赢，后3局输，到第7局又开始赢了，这这这！！！操作的太规律了吧！<br>我已经能猜到接下来再赢2局，再输3局，呵呵</p><p><span style="font-size: 24px; color: red;">卸载了!</span><br><span style="font-size: 24px; color: red;">卸载了!</span><br><span style="font-size: 24px; color: red;">卸载了!</span></p><p><span style="font-size: 32px; color: red;">再也不玩王者荣耀了，弃坑！！！</span></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Background Tasks API</title>
      <link href="/posts/2827174248/"/>
      <url>/posts/2827174248/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Background_Tasks_API">https://developer.mozilla.org/zh-CN/docs/Web/API/Background_Tasks_API</a></p><p>幕后任务协作调度 API (也叫幕后任务 API 或者简单称为 requestIdleCallback() API) 提供了由用户代理决定，在空闲时间自动执行队列任务的能力。</p><span id="more"></span><h1 id="概念和用法"><a href="#概念和用法" class="headerlink" title="概念和用法"></a>概念和用法</h1><p>浏览器的主线程以其事件循环队列为中心。此代码渲染 Document 上待更新展示的内容，执行页面待运行的 JavaScript 脚本，接收来自输入设备的事件，以及分发事件给需要接收事件的元素。此外，事件循环队列处理与操作系统的交互、浏览器自身用户界面的更新等等。这是一个非常繁忙的代码块，您的主要 JavaScript 代码可能会和这些代码一起也在这个线程中执行。当然，大多数（不是所有）能够更改 DOM 的代码都在主线程中运行，因为用户界面更改通常只对主线程可用。</p><p>因为事件处理和屏幕更新是用户关注性能最明显的两种方式。对于您的代码来说，防止在事件队列中出现卡顿是很重要的。在过去，除了编写尽可能高效的代码和将尽可能多的工作移交给 workers 之外，没有其他可靠的方法可以做到这一点。 Window.requestIdleCallback() 允许浏览器告诉您的代码可以安全使用多少时间而不会导致系统延迟，从而有助于确保浏览器的事件循环平稳运行。如果您保持在给定的范围内，您可以使用户体验更好。</p><h1 id="充分利用空闲回调"><a href="#充分利用空闲回调" class="headerlink" title="充分利用空闲回调"></a>充分利用空闲回调</h1><p>因为 idle callbacks 旨在为代码提供一种与事件循环协作的方式，以确保系统充分利用其潜能，不会过度分配任务，从而导致延迟或其他性能问题，因此您应该考虑如何使用它。</p><ul><li>对非高优先级的任务使用空闲回调。</li><li>空闲回调应尽可能不超支分配到的时间。</li><li>避免在空闲回调中改变 DOM。<ul><li>如果你的回调需要改变 DOM，它应该使用Window.requestAnimationFrame()来调度它。</li></ul></li><li>避免运行时间无法预测的任务。</li><li>在你需要的时候要用 timeout，但记得只在需要的时候才用。</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>window.requestIdleCallback(callback[, options])</p><p>options 可选<br>包括可选的配置参数。具有如下属性：<br>timeout 如果指定了 timeout，并且有一个正值，而回调在 timeout 毫秒过后还没有被调用，那么回调任务将放入事件循环中排队，即使这样做有可能对性能产生负面影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建后台任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handle = <span class="variable language_">window</span>.<span class="title function_">requestIdleCallback</span>(callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消后台任务</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">cancelIdleCallback</span>(handle);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TaskController</title>
      <link href="/posts/4236079582/"/>
      <url>/posts/4236079582/</url>
      
        <content type="html"><![CDATA[<p>TaskController 接口代表一个控制器对象，可用于中止和更改一个或多个优先任务的优先级。</p><span id="more"></span><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/TaskController">https://developer.mozilla.org/en-US/docs/Web/API/TaskController</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 controller 对象</span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">TaskController</span>(&#123;<span class="attr">priority</span>: <span class="string">&#x27;user-blocking&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有三个优先级，如下所列（从高到低排序）：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// user-blocking</span></span><br><span class="line"><span class="comment">// 阻止用户与页面交互的任务。这包括将页面渲染到可以使用的位置，或响应用户输入。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// user-visible</span></span><br><span class="line"><span class="comment">// 对用户可见但不一定阻止用户操作的任务。这可能包括渲染页面的非必要部分，例如非必要的图像或动画。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 这是默认优先级。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// background</span></span><br><span class="line"><span class="comment">// 时间不紧迫的任务。这可能包括日志处理或初始化渲染不需要的第三方库。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> signal = controller.<span class="property">signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听优先级状态更改</span></span><br><span class="line">controller.<span class="property">signal</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;prioritychange&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> previousPriority = event.<span class="property">previousPriority</span>;</span><br><span class="line">    <span class="keyword">const</span> newPriority = event.<span class="property">target</span>.<span class="property">priority</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Priority changed from <span class="subst">$&#123;previousPriority&#125;</span> to <span class="subst">$&#123;newPriority&#125;</span>.`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听取消状态</span></span><br><span class="line">controller.<span class="property">signal</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Task aborted&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消任务 </span></span><br><span class="line">controller.<span class="title function_">abort</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改优先级</span></span><br><span class="line">controller.<span class="title function_">setPriority</span>(<span class="string">&#x27;user-blocking&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用控制器的信号发布任务。</span></span><br><span class="line"><span class="comment">// 信号优先级设置任务的初始优先级</span></span><br><span class="line">scheduler.<span class="title function_">postTask</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;Task execute&#x27;</span>, &#123;<span class="attr">signal</span>: controller.<span class="property">signal</span>&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">taskResult</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;taskResult&#125;</span>`</span>); &#125;) <span class="comment">// Aborted (wont run)</span></span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Catch error: <span class="subst">$&#123;error&#125;</span>`</span>); &#125;);  <span class="comment">// Log error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟小白到工程师</title>
      <link href="/posts/2257482685/"/>
      <url>/posts/2257482685/</url>
      
        <content type="html"><![CDATA[<p>菜鸟小白到工程师</p><span id="more"></span><p>从2019年入职新公司后就不曾写过博客了，大概是过的太顺利了吧，从2020，2021，2022到现在，已经过去了2年半，年龄涨了不少，水平倒是还是那样，高不高，低不就。白白浪费这么多的时间</p><p>今年表弟上大学，选的计算机专业，如果，如果我从大一就开始辅导他，让他不走那么多弯路，从一开始就见识到各个技术栈的差异，从一开始就注重数据结构，算法，linux等基本功，他毕业后会达到什么样的高度呢，好期待。</p><p>虽然我已经毕业5年了，水平还是那样，但是也经常思考，学习，看看傍边的技术栈是什么样子的，深度不深，广度倒是挺广，入职新公司，不仅熟练使用了前端的各种框架，也写了点后端服务，虽然是用nodejs写的，但是web后端都是差不多的嘛，<br>ORM、redis、日志、监控、文档，一个不落，再加上flutter，也算是名副其实的全栈工程师。</p><p>想了一下，这两年半我都得到了什么呢，做了业务？做了技术？带了人？还是升了职称？<br>都不是！<br>我觉得这两年半我从一个看不清自己的菜鸟，到现在差不多能知道自己有多菜的工程师；从一个只在乎技术的菜鸟，到一个能从用户角度，公司角度，开发角度看问题的工程师。慢慢的进行思想转变，从单线思维到现在能多方考虑的合格的工程师。</p><p>也就是自己从一个写代码的小菜，成长为一个合格的工程师，为这个社会添砖添瓦，希望能用自己的技术给别人带来一点便利，一点帮助，用代码改变世界</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git-搜索</title>
      <link href="/posts/1414556024/"/>
      <url>/posts/1414556024/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-搜索"><a href="#Git-搜索" class="headerlink" title="Git 搜索"></a>Git 搜索</h2><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%90%9C%E7%B4%A2">参考文献</a></p><h3 id="在commit记录中搜索"><a href="#在commit记录中搜索" class="headerlink" title="在commit记录中搜索"></a>在commit记录中搜索</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --grep eslint <span class="comment"># 在commit 中搜索 eslint 关键词</span></span><br><span class="line">git <span class="built_in">log</span> --grep --oneline eslint <span class="comment"># 在 commit 中搜索 eslint 关键词, 简化输出信息</span></span><br><span class="line">git <span class="built_in">log</span> --grep eslint --author liangyuetian@outlook.com <span class="comment"># 在commit 中搜索 eslint 关键词,并且筛选提交人 </span></span><br><span class="line">git <span class="built_in">log</span> -S eslint <span class="comment"># 查看关键字是什么时候引入的，可以使用 -S 选项来显示新增和删除该字符串的提交。</span></span><br><span class="line">git <span class="built_in">log</span> -S eslint --oneline <span class="comment"># 简化输出信息</span></span><br><span class="line">git <span class="built_in">log</span> -L :countDownDiff:date.js <span class="comment"># 查看这个文件下，countDownDiff函数的变更记录</span></span><br></pre></td></tr></table></figure><h3 id="在commit记录中的文件中搜索"><a href="#在commit记录中的文件中搜索" class="headerlink" title="在commit记录中的文件中搜索"></a>在commit记录中的文件中搜索</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git grep eslint # 在 文件 中搜索关键词</span><br><span class="line">git grep -n eslint # -n 显示行号</span><br><span class="line">git grep --count &#x27;pay_box&#x27; # --count 简要的输出，只输出文件路径</span><br><span class="line">git grep -p &#x27;pay_box&#x27; # -p 输出前后字符，用来判断这个关键字的类型</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给自己顶一个小小的OKR</title>
      <link href="/posts/2227763059/"/>
      <url>/posts/2227763059/</url>
      
        <content type="html"><![CDATA[<p>O: 好好学习天天向上</p><span id="more"></span><ul><li>kr1: 读12本书</li><li>kr2: 掌握flutter</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git-常用命令</title>
      <link href="/posts/265218565/"/>
      <url>/posts/265218565/</url>
      
        <content type="html"><![CDATA[<h2 id="查看仓库大小"><a href="#查看仓库大小" class="headerlink" title="查看仓库大小"></a>查看仓库大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh</span><br></pre></td></tr></table></figure><h2 id="向仓库强制推送所有的变化："><a href="#向仓库强制推送所有的变化：" class="headerlink" title="向仓库强制推送所有的变化："></a>向仓库强制推送所有的变化：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="删除不存在对应远程分支的本地分支"><a href="#删除不存在对应远程分支的本地分支" class="headerlink" title="删除不存在对应远程分支的本地分支"></a>删除不存在对应远程分支的本地分支</h2><p>使用 <code>git remote prune origin</code> 可以将其从本地版本库中去除。</p><h2 id="重命名本地分支-m"><a href="#重命名本地分支-m" class="headerlink" title="重命名本地分支 -m"></a>重命名本地分支 -m</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m devel develop</span><br></pre></td></tr></table></figure><h2 id="完成撤销-同时将代码恢复到前一-commit-id-对应的版本。"><a href="#完成撤销-同时将代码恢复到前一-commit-id-对应的版本。" class="headerlink" title="完成撤销,同时将代码恢复到前一 commit_id 对应的版本。"></a>完成撤销,同时将代码恢复到前一 commit_id 对应的版本。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure><h2 id="完成-Commit-命令的撤销，但是不对代码修改进行撤销，可以直接通过-git-commit-重新提交对本地代码的修改。"><a href="#完成-Commit-命令的撤销，但是不对代码修改进行撤销，可以直接通过-git-commit-重新提交对本地代码的修改。" class="headerlink" title="完成 Commit 命令的撤销，但是不对代码修改进行撤销，可以直接通过 git commit 重新提交对本地代码的修改。"></a>完成 Commit 命令的撤销，但是不对代码修改进行撤销，可以直接通过 git commit 重新提交对本地代码的修改。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commit_id</span><br></pre></td></tr></table></figure><h2 id="只获取最新的-commit-记录"><a href="#只获取最新的-commit-记录" class="headerlink" title="只获取最新的 commit 记录"></a>只获取最新的 commit 记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/SuperAL/splice.git --depth=1</span><br></pre></td></tr></table></figure><h1 id="depth-1，代表只拉取最新一次提交。"><a href="#depth-1，代表只拉取最新一次提交。" class="headerlink" title="--depth=1，代表只拉取最新一次提交。"></a><code>--depth=1</code>，代表只拉取最新一次提交。</h1><h2 id="查看-remote-地址，远程分支，还有本地分支与之相对应关系等信息"><a href="#查看-remote-地址，远程分支，还有本地分支与之相对应关系等信息" class="headerlink" title="查看 remote 地址，远程分支，还有本地分支与之相对应关系等信息"></a>查看 remote 地址，远程分支，还有本地分支与之相对应关系等信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="查看远程仓库已经不存在的分支"><a href="#查看远程仓库已经不存在的分支" class="headerlink" title="查看远程仓库已经不存在的分支"></a>查看远程仓库已经不存在的分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h2 id="拉取远程到本地，并更新本地和远程的对应关系，同步时顺便删除远程已删除的分支"><a href="#拉取远程到本地，并更新本地和远程的对应关系，同步时顺便删除远程已删除的分支" class="headerlink" title="拉取远程到本地，并更新本地和远程的对应关系，同步时顺便删除远程已删除的分支"></a>拉取远程到本地，并更新本地和远程的对应关系，同步时顺便删除远程已删除的分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h2 id="删除本地分支（远程已经没有的对应的分支）"><a href="#删除本地分支（远程已经没有的对应的分支）" class="headerlink" title="删除本地分支（远程已经没有的对应的分支）"></a>删除本地分支（远程已经没有的对应的分支）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | egrep -v -f /dev/fd/0 &lt;(git branch -vv | grep origin) | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs git branch -d</span><br></pre></td></tr></table></figure><h2 id="看下自己最近的一些删除的提交"><a href="#看下自己最近的一些删除的提交" class="headerlink" title="看下自己最近的一些删除的提交"></a>看下自己最近的一些删除的提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fsck --lost-found</span><br></pre></td></tr></table></figure><h2 id="merge-回退"><a href="#merge-回退" class="headerlink" title="merge 回退"></a>merge 回退</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h2 id="删除本地远程不存在的分支"><a href="#删除本地远程不存在的分支" class="headerlink" title="删除本地远程不存在的分支"></a>删除本地远程不存在的分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><p>git fetch -p</p><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;BranchName&gt;</span><br></pre></td></tr></table></figure><h2 id="git-clone-时输错密码"><a href="#git-clone-时输错密码" class="headerlink" title="git clone 时输错密码"></a>git clone 时输错密码</h2><p>windows 系统执行命令： <code>git credential-manager uninstall</code><br>mac 系统命令为： <code>git credential-osxkeychain uninstall</code></p><h2 id="重新设置本机-git-配置"><a href="#重新设置本机-git-配置" class="headerlink" title="重新设置本机 git 配置"></a>重新设置本机 git 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="git-配置的-http-或-https-代理"><a href="#git-配置的-http-或-https-代理" class="headerlink" title="git 配置的 http 或 https 代理"></a>git 配置的 http 或 https 代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:51441 <span class="comment"># 设置代理</span></span><br><span class="line">git config --<span class="built_in">local</span> http.proxy 127.0.0.1:51441 <span class="comment"># 设置本仓库代理</span></span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy <span class="comment"># 删除全局代理</span></span><br><span class="line">git config --<span class="built_in">local</span> --<span class="built_in">unset</span> http.proxy <span class="comment"># 删除本地仓库代理</span></span><br></pre></td></tr></table></figure><h2 id="git-查看分支并格式化时间"><a href="#git-查看分支并格式化时间" class="headerlink" title="git 查看分支并格式化时间"></a>git 查看分支并格式化时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git for-each-ref --<span class="built_in">sort</span>=committerdate refs/heads/ --format=<span class="string">&#x27;%(committerdate:short) %(refname:short)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="清除仓库中的文件"><a href="#清除仓库中的文件" class="headerlink" title="清除仓库中的文件"></a>清除仓库中的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch *.class&#x27;</span>   --prune-empty --tag-name-filter <span class="built_in">cat</span> HEAD -- --all</span><br></pre></td></tr></table></figure><h2 id="忽略某些文件"><a href="#忽略某些文件" class="headerlink" title="忽略某些文件"></a>忽略某些文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged ./config/index.js</span><br></pre></td></tr></table></figure><h2 id="git-无历史合并"><a href="#git-无历史合并" class="headerlink" title="git 无历史合并"></a>git 无历史合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJs:关于异步场景的实践与探索</title>
      <link href="/posts/165656931/"/>
      <url>/posts/165656931/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界在进步，宣扬了这么多年的前端金科玉律被推翻，<br>前端飞速发展，而我们只有保持不断学习，才能不那么迷茫</p><p>而异步编程又是前端的重中之重，这里大家介绍一种新颖的前端的异步编程方法</p><span id="more"></span><h1 id="关于异步"><a href="#关于异步" class="headerlink" title="关于异步"></a>关于异步</h1><blockquote><p>异步是一个关于现在和将来的问题，现在执行的代码和将来执行的代码。</p></blockquote><p>关于现阶段的异步编程的方法：</p><ul><li>回调函数</li><li>事件监听&#x2F;观察者</li><li>Promise</li><li>Generator</li><li>async&#x2F;await</li><li>Observable(RxJs)</li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">moveTo</span>(<span class="number">200</span>, <span class="number">0</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">0</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">moveTo</span>(<span class="number">400</span>, <span class="number">0</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 无限不循环</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>违反直觉</li><li>错误追踪</li><li>模拟同步</li><li>回调地狱</li><li>并发执行</li></ul><h3 id="事件监听-x2F-观察者"><a href="#事件监听-x2F-观察者" class="headerlink" title="事件监听&#x2F;观察者"></a>事件监听&#x2F;观察者</h3><p>观察者模式需要一个pub和sub函数;<br>回调是因为观察者模式，而不是异步。其实回调的问题，观察者模式并没有解决</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">0</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">moveTo</span>(<span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">0</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">moveTo</span>(<span class="number">400</span>, <span class="number">0</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 无限不循环</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveTo</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise解决了回调的一些问题，但并没有全部解决，<br>比如Promise有很好的错误追踪，避免了回调地狱，对并发执行很友好，因为Promise只决议一次，就很好的解决了信任问题<br>但是Promise丢失了语义。</p><h3 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator 生成器"></a>Generator 生成器</h3><p>Generator是一个革命性特性，es2015(es6)中引入，让原本必须一次执行完毕函数，现在可以在中间暂停，并在下次继续执行，这就让js可以模拟协程的概念</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">moveTo</span>(<span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">moveTo</span>(<span class="number">400</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 无限不循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成器能很好的解决Promise不能解决的问题，如违反直觉，繁琐的代码，<br>但也有其自身的问题，比如需要一个启动器来启动，需要手动控制整个流程</p><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>async&#x2F;await堪称完美，但是缺少复杂功能的封装，一切都需要自己实现</p><h3 id="Observable-RxJs"><a href="#Observable-RxJs" class="headerlink" title="Observable(RxJs)"></a>Observable(RxJs)</h3><p>Observable是观察者模式和迭代器模式的结合<br>它有3个生命周期：</p><ul><li>发出next事件，可以<strong>继续</strong>发出事件</li><li>发出error事件，Observable生命结束，不能继续发出事件</li><li>发出completed事件，Observable生命结束，不能继续发出事件</li></ul><p>配合RxJs的操作符，它几乎可以适用任何异步场景</p><p>下面来着重介绍一下RxJs</p><h1 id="RxJs-是什么"><a href="#RxJs-是什么" class="headerlink" title="RxJs 是什么"></a>RxJs 是什么</h1><ul><li>RxJS 用于 JavaScript 的 ReactiveX 库。</li><li>RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。</li><li>它提供了一个核心类型 Observable，通过操作符可以把异步事件作为集合来处理。<blockquote><p>RxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。</p></blockquote></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>Observable (可观察对象)：表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li><li>Observer (观察者)：一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li><li>Subscription (订阅)：表示 Observable 的执行，主要用于取消 Observable 的执行。</li><li>Operators (操作符)： 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合。</li><li>Subject (主体)： 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li><li>Schedulers (调度器)：用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。</li></ul><h2 id="Observable-可观察对象"><a href="#Observable-可观察对象" class="headerlink" title="Observable 可观察对象"></a>Observable 可观察对象</h2><blockquote><p>Observables 是多个值的惰性推送集合</p></blockquote><p>大家都比较熟悉观察者模式，是由两种角色构成的：数据生产者 (Producer）与数据消费者 (Consumer)</p><table><thead><tr><th>生产者</th><th>消费者</th></tr></thead><tbody><tr><td>拉取</td><td>被动的: 当被请求时产生数据。主动的: 决定何时请求数据。</td></tr><tr><td>推送</td><td>主动的: 按自己的节奏产生数据。被动的: 对收到的数据做出反应。</td></tr></tbody></table><p>那么Observable和我们熟知的观察者模式有什么不同呢<br>RxJS 中的Observable 一个新的 JavaScript 推送体系。Observable 是多个值的生产者，并将值“推送”给观察者(消费者)。</p><ul><li>Function 是惰性的评估运算，调用时会同步地返回一个单一值。</li><li>Generator 是惰性的评估运算，调用时会同步地返回零到(有可能的)无限多个值。</li><li>Promise 是最终可能(或可能不)返回单个值的运算。</li><li>Observable 是惰性的评估运算，它可以从它被调用的时刻起同步或异步地返回零到(有可能的)无限多个值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">let</span> stream$ = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="keyword">function</span>(<span class="params">observer</span>) &#123; <span class="comment">// observer 是迭代器</span></span><br><span class="line">    observer.<span class="title function_">next</span>(<span class="number">1</span>); <span class="comment">// 发送一个值</span></span><br><span class="line">    observer.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        observer.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    observer.<span class="title function_">error</span>(<span class="string">&#x27;error&#x27;</span>); <span class="comment">// 发出一个错误</span></span><br><span class="line">    observer.<span class="title function_">complete</span>(); <span class="comment">// 结束这个观察者</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">stream$.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val); <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理</span></span><br><span class="line">stream$.<span class="title function_">unsubscribe</span>()</span><br></pre></td></tr></table></figure><h2 id="Subscription-订阅"><a href="#Subscription-订阅" class="headerlink" title="Subscription 订阅"></a>Subscription 订阅</h2><blockquote><p>Subscription 是表示可清理资源的对象，通常是 Observable 的执行。Subscription 有一个重要的方法，即 unsubscribe，它不需要任何参数，只是用来清理由 Subscription 占用的资源。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;interval&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observable = <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">let</span> subscription = observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"><span class="comment">// 稍后：</span></span><br><span class="line"><span class="comment">// 这会取消正在进行中的 Observable 执行</span></span><br><span class="line"><span class="comment">// Observable 执行是通过使用观察者调用 subscribe 方法启动的</span></span><br><span class="line">subscription.<span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure><h2 id="Subject-主体"><a href="#Subject-主体" class="headerlink" title="Subject 主体"></a>Subject 主体</h2><blockquote><p>Subject 是一种特殊类型的 Observable，它允许将值多播给多个观察者，所以 Subject 是多播的，而普通的 Observables 是单播的(每个已订阅的观察者都拥有 Observable 的独立执行)<br>Subject 像是 Observable，但是可以多播给多个观察者。Subject 还像是 EventEmitters，维护着多个监听器的注册表。<br>每个 Subject 都是 Observable。<br>每个 Subject 都是观察者。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Subject</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerA: &#x27;</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerB: &#x27;</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// observerA: 1</span></span><br><span class="line"><span class="comment">// observerB: 1</span></span><br><span class="line"><span class="comment">// observerA: 2</span></span><br><span class="line"><span class="comment">// observerB: 2</span></span><br></pre></td></tr></table></figure><h2 id="Scheduler-调度器"><a href="#Scheduler-调度器" class="headerlink" title="Scheduler 调度器"></a>Scheduler 调度器</h2><p>什么是调度器？ - 调度器控制着何时启动 subscription 和何时发送通知。它由三部分组成：</p><ul><li>调度器是一种数据结构。 它知道如何根据优先级或其他标准来存储任务和将任务进行排序。</li><li>调度器是执行上下文。 它表示在何时何地执行任务(举例来说，立即的，或另一种回调函数机制(比如 setTimeout 或 process.nextTick)，或动画帧)。</li><li>调度器有一个(虚拟的)时钟。 调度器功能通过它的 getter 方法 now() 提供了“时间”的概念。在具体调度器上安排的任务将严格遵循该时钟所表示的时间。</li></ul><blockquote><p>调度器可以让你规定 Observable 在什么样的执行上下文中发送通知给它的观察者。<br>调度器通常作为操作符的最后一个参数</p></blockquote><p>一句话总结：改变了Observable的执行时间顺序</p><p>内置调度器一般分为4种</p><table><thead><tr><th>调度器</th><th>目的</th></tr></thead><tbody><tr><td>null</td><td>不传递任何调度器的话，会以同步递归的方式发送通知。用于定时操作或尾递归操作。</td></tr><tr><td>Rx.Scheduler.queue</td><td>当前事件帧中的队列调度(蹦床调度器)。用于迭代操作。</td></tr><tr><td>Rx.Scheduler.asap</td><td>微任务的队列调度，它使用可用的最快速的传输机制，比如 Node.js 的 process.nextTick() 或 Web Worker 的 MessageChannel 或 setTimeout 或其他。用于异步转换。</td></tr><tr><td>Rx.Scheduler.async</td><td>使用 setInterval 的调度。用于基于时间的操作符。</td></tr></tbody></table><h1 id="RxJs-可以解决什么问题"><a href="#RxJs-可以解决什么问题" class="headerlink" title="RxJs 可以解决什么问题"></a>RxJs 可以解决什么问题</h1><h2 id="统一了数据来源"><a href="#统一了数据来源" class="headerlink" title="统一了数据来源"></a>统一了数据来源</h2><p>RxJs 最大的特点就是可以把所有的事件封装成一个 Observable，翻译过来就是可观察对象。只要订阅这个可观察对象，就可以获取到事件源所产生的所有事件。<br>想象一下，所有的 DOM 事件、ajax 请求、WebSocket、数组等等数据，统统可以封装成同一种数据类型。<br>这就意味着，对于有多个来源的数据，我们可以每个数据来源都包装成 Observable，统一给视图层去订阅，这样就抹平了数据源的差异。</p><h2 id="强大的异步同步处理能力RxJs"><a href="#强大的异步同步处理能力RxJs" class="headerlink" title="强大的异步同步处理能力RxJs"></a>强大的异步同步处理能力RxJs</h2><p>提供了功能非常强大且复杂的操作符（ Operator） 用来处理、组合 Observable，几乎可以满足任何异步逻辑的需求，它抹平了同步和异步之间的鸿沟，</p><h2 id="数据推送的机制把拉取的操作变成了推送的操作"><a href="#数据推送的机制把拉取的操作变成了推送的操作" class="headerlink" title="数据推送的机制把拉取的操作变成了推送的操作"></a>数据推送的机制把拉取的操作变成了推送的操作</h2><p>RxJs 传递数据的方式和传统的方式有很大不同，那就是改“拉取”为“推送”。<br>原本一个组件如果需要请求数据，那它必须主动去发送请求才能获得数据，这称为“拉取”。如果像 WebSocket 那样被动地接受数据，这称为“推送”。<br>如果这个数据只要请求一次，那么采用“拉取”的形式获取数据就没什么问题。但是如果这个数据之后需要更新，那么“拉取”就无能为力了，开发者不得不在代码里再写一段代码来处理更新。<br>但是 RxJs 则不同。RxJs 的精髓在于推送数据。组件不需要写请求数据和更新数据的两套逻辑，只要订阅一次，就能得到现在和将来的数据。这一点改变了我们写代码的思路。<br>我们在拿数据的时候，还需要考虑未来的数据何时获取、如何获取。如果不考虑这一点，就很难开发出具备实时性的应用。如此一来，就能更好地解耦视图层和数据层的逻辑。视图层从此不用再操心任何有关获取数据和更新数据的逻辑，只要从数据层订阅一次就可以获取到所有数据，从而可以只专注于视图层本身的逻辑。</p><h2 id="BehaviorSubject-可以缓存数据。"><a href="#BehaviorSubject-可以缓存数据。" class="headerlink" title="BehaviorSubject 可以缓存数据。"></a>BehaviorSubject 可以缓存数据。</h2><p>BehaviorSubject 是一种特殊的 Observable。如果 BehaviorSubject 已经产生过一次数据，那么当它再一次被订阅的时候，就可以直接产生上次所缓存的数据。</p><h1 id="RxJs-的经典场景"><a href="#RxJs-的经典场景" class="headerlink" title="RxJs 的经典场景"></a>RxJs 的经典场景</h1><h3 id="防抖：操作符-debounce-x2F-debounceTime"><a href="#防抖：操作符-debounce-x2F-debounceTime" class="headerlink" title="防抖：操作符 debounce&#x2F;debounceTime"></a>防抖：操作符 debounce&#x2F;debounceTime</h3><p>简单防抖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent, interval, &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounceTime &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = clicks.<span class="title function_">pipe</span>(<span class="title function_">debounceTime</span>(<span class="number">1000</span>));</span><br><span class="line">result.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><p>自定义防抖时机，如果当从服务器请求值后才进行触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent, interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fromPromise&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/internal-compatibility&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = clicks.<span class="title function_">pipe</span>(<span class="title function_">debounce</span>(<span class="function">() =&gt;</span> <span class="title function_">fromPromise</span>(<span class="title function_">fetch</span>(<span class="string">&#x27;/check_name&#x27;</span>))));</span><br><span class="line">result.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h3 id="节流：操作符-throttle"><a href="#节流：操作符-throttle" class="headerlink" title="节流：操作符 throttle"></a>节流：操作符 throttle</h3><p>每个1秒接受一次点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = clicks.<span class="title function_">pipe</span>(<span class="title function_">throttle</span>(<span class="function"><span class="params">ev</span> =&gt;</span> <span class="title function_">interval</span>(<span class="number">1000</span>)));</span><br><span class="line">result.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><p>鼠标移动时每隔一帧渲染一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;mousemove&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = clicks.<span class="title function_">pipe</span>(<span class="title function_">throttle</span>(<span class="function"><span class="params">ev</span> =&gt;</span> <span class="title function_">interval</span>(<span class="number">16</span>)));</span><br><span class="line">result.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h3 id="过滤：操作符-filter-x2F-distinct-x2F-distinctUntilChanged-x2F-distinctUntilKeyChanged"><a href="#过滤：操作符-filter-x2F-distinct-x2F-distinctUntilChanged-x2F-distinctUntilKeyChanged" class="headerlink" title="过滤：操作符 filter&#x2F;distinct&#x2F;distinctUntilChanged&#x2F;distinctUntilKeyChanged"></a>过滤：操作符 filter&#x2F;distinct&#x2F;distinctUntilChanged&#x2F;distinctUntilKeyChanged</h3><p>只发出目标是 DIV 元素的点击事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks$ = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> clicksOnDivs = clicks$.<span class="title function_">filter</span>(<span class="function"><span class="params">ev</span> =&gt;</span> ev.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;DIV&#x27;</span>);</span><br><span class="line">clicksOnDivs.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><p>过滤列表中重复的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; distinct &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">of</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>).<span class="title function_">pipe</span>(<span class="title function_">distinct</span>()).<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"><span class="comment">// 输出：1 3 4 5</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; distinct, distinctUntilChanged, distinctUntilKeyChanged &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> list$ = <span class="keyword">of</span>&lt;<span class="title class_">Person</span>&gt;(</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Foo&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&#x27;Bar&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&#x27;Foo&#x27;</span>&#125;,</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list$.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">distinct</span>(<span class="function">(<span class="params">p: Person</span>) =&gt;</span> p.<span class="property">name</span>),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// &#123; age: 4, name: &#x27;Foo&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 7, name: &#x27;Bar&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>还可以只与上一次的值不同</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list$.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">distinctUntilChanged</span>(<span class="function">(<span class="params">p: Person, q: Person</span>) =&gt;</span> p.<span class="property">name</span> === q.<span class="property">name</span>),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// &#123; age: 4, name: &#x27;Foo&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 7, name: &#x27;Bar&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 5, name: &#x27;Foo&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>还可以再直观一点,比较名字前三个字母</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list$.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">distinctUntilKeyChanged</span>(<span class="string">&#x27;name&#x27;</span>, <span class="function">(<span class="params">x: <span class="built_in">string</span>, y: <span class="built_in">string</span></span>) =&gt;</span> x.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>) === y.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>)),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// displays:</span></span><br><span class="line"><span class="comment">// &#123; age: 4, name: &#x27;Foo1&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 7, name: &#x27;Bar&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 5, name: &#x27;Foo2&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="once只触发一次：操作符-elementAt"><a href="#once只触发一次：操作符-elementAt" class="headerlink" title="once只触发一次：操作符 elementAt"></a>once只触发一次：操作符 elementAt</h3><p>当用户点击第三次的时候触发，并卸载当前订阅</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; elementAt &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = clicks.<span class="title function_">pipe</span>(<span class="title function_">elementAt</span>(<span class="number">2</span>));</span><br><span class="line">result.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// click 1 = nothing</span></span><br><span class="line"><span class="comment">// click 2 = nothing</span></span><br><span class="line"><span class="comment">// click 3 = MouseEvent object logged to console</span></span><br></pre></td></tr></table></figure><h1 id="RxJs-的复杂场景"><a href="#RxJs-的复杂场景" class="headerlink" title="RxJs 的复杂场景"></a>RxJs 的复杂场景</h1><p>这是我第三次学习RxJs了，RxJs的的学习曲线比较陡峭，但是确实受益匪浅<br>RxJs改变了我思考问题的方式，它让我思考问题的方式更全面，更完整<br>在最近的项目中更是有着不同想法，设想如果以RxJs的模式去组织代码可以得到怎么样的收益</p><h2 id="场景1：当被订阅时才进行事件绑定"><a href="#场景1：当被订阅时才进行事件绑定" class="headerlink" title="场景1：当被订阅时才进行事件绑定"></a>场景1：当被订阅时才进行事件绑定</h2><p>关于事件绑定，前端开发者大概都会这样写：<br>1 提前选取Element，<br>2 绑定事件，并emit事件<br>3 在组件卸载的同时卸载事件</p><p>其实这样写是完全没有问题的，但是如果这个组件使用的功能比较浅，那么可能就不需要去监听事件，组件中Element上绑定的事件就浪费了内存与性能！<br>如果站在RxJs的角度怎么思考呢：我们可以参考 Observable，Observable 是惰性的，那么我们设计组件的时候也可以是惰性的，<br>当组件初始化的时候检查一下是否绑定了事件，如果绑定了就在组件内部挂载一下事件，这样就可以有选择的去监听，不需要去做无意义的事件触发</p><p>伪代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let $listeners = this.$listeners // 得到绑定的事件列表</span><br><span class="line"></span><br><span class="line">let ob$ = new Observable(function(observe) &#123;</span><br><span class="line">    observe.next(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="场景2：ajax请求错误重试"><a href="#场景2：ajax请求错误重试" class="headerlink" title="场景2：ajax请求错误重试"></a>场景2：ajax请求错误重试</h2><h3 id="非-RxJs-的方式"><a href="#非-RxJs-的方式" class="headerlink" title="非 RxJs 的方式"></a>非 RxJs 的方式</h3><p>在我们没有接触 RxJs 时，请求的数据如果出错需要重试的时候我们可能会这样组织代码：</p><p>简单的组织需要一个递归函数来重新请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function ajaxAgain() &#123;</span><br><span class="line">    axios.get().then().catch(err=&gt;ajaxAgain())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要限制最大次数那么需要一个变量来保持次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function ajaxAgain(maxCount, count) &#123;</span><br><span class="line">    if (!count) &#123; count = 0 &#125;</span><br><span class="line">    if (count&gt;maxCount) return</span><br><span class="line">    axios.get().then().catch(err=&gt;ajaxAgain(maxCount, count++))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要判断权限或者更复杂的操作时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function ajaxAgain(maxCount, count) &#123;</span><br><span class="line">    if (!count) &#123; count = 0 &#125;</span><br><span class="line">    if (count&gt;maxCount) return</span><br><span class="line">    if (any) &#123;</span><br><span class="line">        // do something</span><br><span class="line">    &#125;</span><br><span class="line">    axios.get().then().catch(err=&gt;ajaxAgain(maxCount, count++))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用RxJs组织代码"><a href="#使用RxJs组织代码" class="headerlink" title="使用RxJs组织代码"></a>使用<strong>RxJs</strong>组织代码</h3><p>如果只想重试3次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;timer&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ajaxGet&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/internal-compatibility&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;retry, retryWhen, take, mergeMap&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ajaxGet</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">pipe</span>(<span class="title function_">retry</span>(<span class="number">3</span>)).<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>如果希望每次延迟2秒再重试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajaxGet(&#x27;/user&#x27;).pipe(retryWhen(() =&gt; timer(2000))).subscribe(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>如果希望每次延迟2秒再重试，并尝试3次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajaxGet(&#x27;/user&#x27;).pipe(retryWhen(() =&gt; interval(2000).pipe(take(3)))).subscribe(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>如果请求失败，去另外一个接口询问是否需要重试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajaxGet(&#x27;/user&#x27;).pipe(retryWhen(() =&gt; ajaxGet(&#x27;/check&#x27;))).subscribe(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>如果请求失败，2秒后再去另外一个接口询问是否需要重试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ajaxGet(&#x27;/user&#x27;).pipe(retryWhen(() =&gt; &#123;</span><br><span class="line">  return timer(2000).pipe(mergeMap(() =&gt; ajaxGet(&#x27;/check&#x27;)))</span><br><span class="line">&#125;)).subscribe(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>直观简单了不少，复杂逻辑被操作符处理，我们只关心业务即可</p><h2 id="场景3：数字动画"><a href="#场景3：数字动画" class="headerlink" title="场景3：数字动画"></a>场景3：数字动画</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fromEvent(updateButton, &#x27;click&#x27;).pipe(</span><br><span class="line">    map(_ =&gt; parseInt(input.value)),</span><br><span class="line">    switchMap(endRange =&gt; &#123;</span><br><span class="line">      return timer(0, 20).pipe(</span><br><span class="line">        mapTo(positiveOrNegative(endRange, currentNumber)),</span><br><span class="line">        startWith(currentNumber),</span><br><span class="line">        scan((acc, curr) =&gt; acc + curr),</span><br><span class="line">        takeWhile(takeUntilFunc(endRange, currentNumber));</span><br><span class="line">      )</span><br><span class="line">    &#125;),</span><br><span class="line">    tap(v =&gt; (currentNumber = v)),</span><br><span class="line">    startWith(0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="RxJs-的基本用法"><a href="#RxJs-的基本用法" class="headerlink" title="RxJs 的基本用法"></a>RxJs 的基本用法</h1><h2 id="创建-Observable"><a href="#创建-Observable" class="headerlink" title="创建 Observable"></a>创建 Observable</h2><h3 id="interval-定时器"><a href="#interval-定时器" class="headerlink" title="interval 定时器"></a>interval 定时器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>, interval&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">stream$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; = <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">stream$.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">count: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 每隔1000毫秒输出 0 1 2 3 ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="timer-延时触发的定时器"><a href="#timer-延时触发的定时器" class="headerlink" title="timer 延时触发的定时器"></a>timer 延时触发的定时器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>, timer&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">timer$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; = <span class="title function_">timer</span>(<span class="number">1000</span>);</span><br><span class="line">timer$.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1000毫秒之后触发</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>, timer&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">timer$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; = <span class="title function_">timer</span>(<span class="number">1000</span>, <span class="number">100</span>);</span><br><span class="line">timer$.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1000毫秒之后触发，每隔100毫秒触发 0 1 2 3 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="defer-延迟创建"><a href="#defer-延迟创建" class="headerlink" title="defer 延迟创建"></a>defer 延迟创建</h3><blockquote><p>有时候我们希望Observable不要太早创建，另一方面我们又希望Observable尽可能的早创建，这个是一个矛盾的需求，解决这个矛盾需求的方式，就是依然创建一个Observable。<br>但是这个Observable只是一个代理(Proxy),在创建之时并不会做分配资源的工作，<br>只有被订阅的时候，才会去创建真正占用资源的Observable，之前产生的代理Observable会把所有工作都转交给真正占用资源的Observable</p></blockquote><p>defer允许你创建一个 Observable 当且仅当它被订阅的时候，并且为每个订阅者创建新的 Observable</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defer, <span class="keyword">of</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> of$ = <span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// </span></span><br><span class="line"><span class="keyword">const</span> defer$ = <span class="title function_">defer</span>(<span class="function">() =&gt;</span> of$);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fromPromise-将promise转化为Observable"><a href="#fromPromise-将promise转化为Observable" class="headerlink" title="fromPromise 将promise转化为Observable"></a>fromPromise 将promise转化为Observable</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fromPromise&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/internal-compatibility&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise$ = <span class="title function_">fromPromise</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>((<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;大于0.5&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;小于0.5&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)));</span><br><span class="line"></span><br><span class="line">promise$.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;被拒绝&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fromPromise&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/internal-compatibility&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fromPromise</span>(<span class="title function_">fetch</span>(<span class="string">&#x27;/users&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="fromEvent-订阅事件"><a href="#fromEvent-订阅事件" class="headerlink" title="fromEvent 订阅事件"></a>fromEvent 订阅事件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>, fromEvent&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">event$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">event$.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件流&#x27;</span>, e)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fromEventPattern-自定义定义事件与移除事件"><a href="#fromEventPattern-自定义定义事件与移除事件" class="headerlink" title="fromEventPattern 自定义定义事件与移除事件"></a>fromEventPattern 自定义定义事件与移除事件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fromEventPattern, <span class="title class_">Subscription</span>&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addClickHandler</span>(<span class="params">handler</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建监听&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeClickHandler</span>(<span class="params">handler</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移除监听&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clicks = <span class="title function_">fromEventPattern</span>(</span><br><span class="line">  addClickHandler,</span><br><span class="line">  removeClickHandler</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">click$</span>: <span class="title class_">Subscription</span> = clicks.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  click$.<span class="title function_">unsubscribe</span>()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><h3 id="map-将当前值映射为另一个值"><a href="#map-将当前值映射为另一个值" class="headerlink" title="map 将当前值映射为另一个值"></a>map 将当前值映射为另一个值</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fromEvent&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;map&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clicks$ = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> positions$ = clicks$.<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">ev</span> =&gt;</span> ev.<span class="property">clientX</span>));</span><br><span class="line">positions$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h3 id="pluck-map的快捷方式"><a href="#pluck-map的快捷方式" class="headerlink" title="pluck map的快捷方式"></a>pluck map的快捷方式</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fromEvent&#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;pluck&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clicks$ = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> positions$ = clicks$.<span class="title function_">pipe</span>(<span class="title function_">pluck</span>(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;tagName&#x27;</span>));</span><br><span class="line">positions$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h3 id="scan-累加器，类似于reduce"><a href="#scan-累加器，类似于reduce" class="headerlink" title="scan 累加器，类似于reduce"></a>scan 累加器，类似于reduce</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; scan, mapTo &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ones = clicks.<span class="title function_">pipe</span>(<span class="title function_">mapTo</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">const</span> seed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> count = ones.<span class="title function_">pipe</span>(<span class="title function_">scan</span>(<span class="function">(<span class="params">acc, one</span>) =&gt;</span> acc + one, seed));</span><br><span class="line">count.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h3 id="pairwise-将发出的值每两个分一组"><a href="#pairwise-将发出的值每两个分一组" class="headerlink" title="pairwise 将发出的值每两个分一组"></a>pairwise 将发出的值每两个分一组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; pairwise, map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pairs = clicks.<span class="title function_">pipe</span>(<span class="title function_">pairwise</span>());</span><br><span class="line"><span class="keyword">const</span> distance = pairs.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">pair</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> x0 = pair[<span class="number">0</span>].<span class="property">clientX</span>;</span><br><span class="line">    <span class="keyword">const</span> y0 = pair[<span class="number">0</span>].<span class="property">clientY</span>;</span><br><span class="line">    <span class="keyword">const</span> x1 = pair[<span class="number">1</span>].<span class="property">clientX</span>;</span><br><span class="line">    <span class="keyword">const</span> y1 = pair[<span class="number">1</span>].<span class="property">clientY</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(x0 - x1, <span class="number">2</span>) + <span class="title class_">Math</span>.<span class="title function_">pow</span>(y0 - y1, <span class="number">2</span>));</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br><span class="line">distance.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h3 id="buffer-x2F-bufferCount-x2F-bufferTime-x2F-bufferToggle"><a href="#buffer-x2F-bufferCount-x2F-bufferTime-x2F-bufferToggle" class="headerlink" title="buffer &#x2F; bufferCount &#x2F; bufferTime &#x2F; bufferToggle"></a>buffer &#x2F; bufferCount &#x2F; bufferTime &#x2F; bufferToggle</h3><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><blockquote><p>从过去收集值作为一个数组，并且仅在另一个Observable发出时才发出该数组。</p></blockquote><p>每次点击页面输出定时器走了多少次</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent, interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; buffer &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clicks$ = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> interval$ = <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">let</span> buffered = interval$.<span class="title function_">pipe</span>(<span class="title function_">buffer</span>(clicks$));</span><br><span class="line">buffered.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"><span class="comment">// [0, 1]</span></span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="comment">// [3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="bufferCount"><a href="#bufferCount" class="headerlink" title="bufferCount"></a>bufferCount</h4><blockquote><p>缓存发出的值，知道达到制定的最大值</p></blockquote><p>每点击两次输出 [MouseEvent, MouseEvent]</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bufferCount &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clicks$ = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> bufferCount$ = clicks$.<span class="title function_">pipe</span>(<span class="title function_">bufferCount</span>(<span class="number">2</span>))</span><br><span class="line">bufferCount$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="bufferTime"><a href="#bufferTime" class="headerlink" title="bufferTime"></a>bufferTime</h4><blockquote><p>在特定时间段内缓冲源Observable值。</p></blockquote><p>每秒发出一系列最近的点击事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bufferTime &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buffered = clicks.<span class="title function_">pipe</span>(<span class="title function_">bufferTime</span>(<span class="number">1000</span>));</span><br><span class="line">buffered.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><p>每隔5秒，从接下来的2秒发出点击事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bufferTime &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buffered = clicks.<span class="title function_">pipe</span>(<span class="title function_">bufferTime</span>(<span class="number">2000</span>, <span class="number">5000</span>));</span><br><span class="line">buffered.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h4 id="bufferToggle"><a href="#bufferToggle" class="headerlink" title="bufferToggle"></a>bufferToggle</h4><p>每隔一秒钟，从接下来的500ms发出点击事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent, interval, <span class="variable constant_">EMPTY</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bufferToggle &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> openings = <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> buffered = clicks.<span class="title function_">pipe</span>(<span class="title function_">bufferToggle</span>(openings, <span class="function"><span class="params">i</span> =&gt;</span></span><br><span class="line">  i % <span class="number">2</span> ? <span class="title function_">interval</span>(<span class="number">500</span>) : <span class="variable constant_">EMPTY</span></span><br><span class="line">));</span><br><span class="line">buffered.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure><h1 id="其他语言实现"><a href="#其他语言实现" class="headerlink" title="其他语言实现"></a>其他语言实现</h1><ul><li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li><li><a href="https://github.com/ReactiveX/RxGo">RxGo</a></li><li><a href="https://github.com/ReactiveX/RxPY">RxPython</a></li><li><a href="https://github.com/ReactiveX/RxPHP">RxPHP</a></li><li><a href="https://github.com/ReactiveX/RxSwift">RxSwift</a></li><li><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></li><li><a href="https://github.com/ReactiveX/rxdart">RxDart</a></li><li><a href="https://github.com/ReactiveX/RxCpp">RxCpp</a></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://cn.rx.js.org/">RxJs(5)中文官网</a><br><a href="https://rxjs.dev/">RxJs(6)官网</a><br><a href="https://reactive.how/">用动画的方式演示了大部分Rxjs的Operator的执行过程</a></p>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flow-root-创建格式化上下文</title>
      <link href="/posts/1370625290/"/>
      <url>/posts/1370625290/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flow-root;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3cplus.com/css3/display-flow-root.html">https://www.w3cplus.com/css3/display-flow-root.html</a></p><span id="more"></span><table><thead><tr><th align="center">单个值</th><th align="center">两个值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">block</td><td align="center">block flow</td><td align="left">正常流内的块级盒子</td></tr><tr><td align="center">inline</td><td align="center">inline flow</td><td align="left">正常流内的内联级盒子</td></tr><tr><td align="center">inline-block</td><td align="center">inline flow-root</td><td align="left">定义一个BFC的内联级盒子</td></tr><tr><td align="center">list-item</td><td align="center">block flow list-item</td><td align="left">正常文档流和带有附加标记的块级盒子</td></tr><tr><td align="center">flow-root</td><td align="center">block flow-root</td><td align="left">定义一个BFC的块级盒子</td></tr><tr><td align="center">flex</td><td align="center">block flex</td><td align="left">带有内部伸缩布局的块级盒子</td></tr><tr><td align="center">inline-flex</td><td align="center">inline flex</td><td align="left">带有内部伸缩布局的内联级盒子</td></tr><tr><td align="center">grid</td><td align="center">block grid</td><td align="left">带有内部网格布局的块级盒子</td></tr><tr><td align="center">inline-grid</td><td align="center">inline grid</td><td align="left">带有内部网格布局的内联级盒子</td></tr><tr><td align="center">table</td><td align="center">block table</td><td align="left">带有内部表格布局的块级盒子</td></tr><tr><td align="center">inline-table</td><td align="center">inline table</td><td align="left">带有内部表格布局的内联级盒子</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-安全和不安全对齐</title>
      <link href="/posts/1524921180/"/>
      <url>/posts/1524921180/</url>
      
        <content type="html"><![CDATA[<p>使用safe和unsafe关键词进行安全和不安全对齐的设置</p><span id="more"></span><img src="/posts/1524921180/Snipaste_2019-10-09_14-50-23.png" class=""><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: unsafe center;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-两端对齐</title>
      <link href="/posts/1281879453/"/>
      <url>/posts/1281879453/</url>
      
        <content type="html"><![CDATA[<p>1 可以使用 justify-content: space-between<br>2 使用 margin-left: auto</p><span id="more"></span><img src="/posts/1281879453/Snipaste_2019-10-09_14-42-59.png" class=""><img src="/posts/1281879453/Snipaste_2019-10-09_14-44-35.png" class="">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-flex属性</title>
      <link href="/posts/4045953967/"/>
      <url>/posts/4045953967/</url>
      
        <content type="html"><![CDATA[<img src="/posts/4045953967/Snipaste_2019-10-09_14-27-51.png" class=""><span id="more"></span><p>在Flexbox中，flex属性是最令人难以琢磨的，也是最为复杂的一部分。该属性主要由flex-grow、flex-shrink和flex-basis三个属性组成。这三个属性可以控制一个Flex项目，主要表现在以下几个方面：</p><ul><li>flex-grow：Flex项目的扩展比率，让Flex项目得到（伸张）多少Flex容器多余的空间（Positive free space）</li><li>flex-shrink：Flex项目收缩比率，让Flex项目减去Flex容器不足的空间（Negative free space）</li><li>flex-basis：Flex项目未扩展或收缩之前，它的大小是多少</li></ul><p>大部分情形之下，我们都是使用flex属性来设置Flex项目的伸缩的值。其常见值的效果有：</p><ul><li>flex: 0 auto和flex:initial，这两个值与flex: 0 1 auto相同，也是初始值。会根据width属性决定Flex项目的尺寸。当Flex容器有剩余空间时，Flex项目无法扩展；当Flex容器有不足空间时，Flex项目收缩到其最小值min-content。</li><li>flex: auto与flex: 1 1 auto相同。Flex项目会根据width来决定大小，但是完全可以扩展Flex容器剩余的空间。如果所有Flex项目均为flex: auto、flex:initial或flex: none，则Flex项目尺寸决定后，Flex容器剩余空间会被平均分给是flex:auto的Flex项目。</li><li>flex: none与flex: 0 0 auto相同。Flex项目根据width决定大小，但是完全不可伸缩，其效果和initial类似，这种情况下，即使在Flex容器空间不够而溢出的情况之下，Flex项目也不会收缩。</li><li>flex: <positive-number>（正数）与flex: 1 0px相同。该值使Flex项目可伸缩，并将flex-basis值设置为0，导致Flex项目会根据设置的比例因子来计算Flex容器的剩余空间。如果所有Flex项目都使用该模式，则它们的尺寸会正比于指定的伸缩比。</li></ul><p><a href="https://www.w3cplus.com/css/does-it-work-using-the-new-css-layout.html">https://www.w3cplus.com/css/does-it-work-using-the-new-css-layout.html</a></p><img src="/posts/4045953967/flex-19.png" class=""><img src="/posts/4045953967/flex-20.png" class=""><p>🔜</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notification-浏览器通知</title>
      <link href="/posts/310135269/"/>
      <url>/posts/310135269/</url>
      
        <content type="html"><![CDATA[<p>推送通知实际上包括了两件独立的事情：</p><ul><li>使用 Push API 发送消息</li><li>使用 Notification API 显示通知。</li></ul><span id="more"></span><p><a href="https://www.ituring.com.cn/book/tupubarticle/24767">https://www.ituring.com.cn/book/tupubarticle/24767</a></p><h3 id="Notification-API"><a href="#Notification-API" class="headerlink" title="Notification API"></a>Notification API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">permission</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (permission === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Notification</span>(<span class="string">&quot;Shiny&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只需用这段示例代码就可以请求显示通知的权限。然后，如果权限被授予（granted），就创建一个标题为 Shiny 的通知。就这么简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Notification</span>.<span class="property">permission</span> === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">showNotification</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Notification</span>.<span class="property">permission</span> === <span class="string">&quot;denied&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Can&#x27;t show notification&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Notification</span>.<span class="property">permission</span> === <span class="string">&quot;default&quot;</span>) &#123;</span><br><span class="line">  <span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (permission === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 被调用后，显示权限许可对话框，用户选择同意；</span></span><br><span class="line">        <span class="comment">// 被调用，但由于用户之前已经授权过，所以不需再显示权限许可对话框。</span></span><br><span class="line">        <span class="title function_">showNotification</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Notification</span>.<span class="property">permission</span> === <span class="string">&quot;denied&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 被调用后，显示权限许可对话框，但用户选择拒绝</span></span><br><span class="line">        <span class="comment">// 但由于用户之前已经拒绝过，所以不需再显示权限许可对话框。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Can&#x27;t show notification&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Notification</span>.<span class="property">permission</span> === <span class="string">&quot;default&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 被调用后，显示权限许可对话框，但用户没有做出选择，直接关闭了对话框。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Can&#x27;t show notification, but can ask for permission again.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>用户的选择是根据同源策略保存的。换句话说，一旦用户授予权限，你就可以在应用中同源的任何页面下创建新的通知。<br>如果两个 Web 页面的 URI 协议（例如 HTTPS、HTTP）、主机名（例如 <a href="http://www.talater.com)和端口号都一致,那么这两个页面就是同源的.例如,在/">www.talater.com）和端口号都一致，那么这两个页面就是同源的。例如，在</a> <a href="https://www.talater.com/annyang">https://www.talater.com/annyang</a> 授予的权限，可以在 <a href="https://www.talater.com/upup">https://www.talater.com/upup</a> 上使用，但是不能在 <a href="http://www.talater.com/annyang%EF%BC%88%E4%BD%BF%E7%94%A8">http://www.talater.com/annyang（使用</a> HTTP，而权限授予在 HTTPS 协议上）或者<a href="https://www.talater.com:8443/%EF%BC%88%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%8D%E4%B8%80%E8%87%B4%EF%BC%89%E4%B8%8A%E4%BD%BF%E7%94%A8%E3%80%82">https://www.talater.com:8443/（端口号不一致）上使用。</a></p></blockquote><h3 id="push-Api"><a href="#push-Api" class="headerlink" title="push Api"></a>push Api</h3><p>Push API 允许用户同意应用推送消息，让服务器可以随时推送消息到浏览器。这些消息会由 service worker 监听并处理，甚至在用户离开应用后也可以进行操作。最常见的操作方式就是向用户显示通知。</p><p>这给应用带来了巨大的能量。一旦你可以在任何时候向用户的设备发送消息，你就有可能用无尽的消息来骚扰他。你甚至可以通过每隔几秒向 service worker 发送消息，然后将一些影响数据响应发回服务器，来静默地跟踪用户的行为。</p><p>为了确保 Push API 不会被这样滥用，所有的推送消息都要通过中心消息服务器。中心服务器由浏览器供应商维护，它会为你跟踪所有用户的订阅。它确保推送消息不会被滥用，且用户不会被骚扰。即使用户在你发送消息时无法触达，它也能确保消息被到达。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flutter-文件储存</title>
      <link href="/posts/3794814147/"/>
      <url>/posts/3794814147/</url>
      
        <content type="html"><![CDATA[<p>flutter 文件存储<br><a href="http://flutter.link/2018/04/13/Flutter%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/">Flutter开发者文档-数据储存</a></p><span id="more"></span><h3 id="1-在pubspec-yaml文件中添加依赖"><a href="#1-在pubspec-yaml文件中添加依赖" class="headerlink" title="1 在pubspec.yaml文件中添加依赖"></a>1 在pubspec.yaml文件中添加依赖</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path_provider:</span> <span class="string">^0.4.0</span></span><br></pre></td></tr></table></figure><p>并更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure><h3 id="2-导入使用"><a href="#2-导入使用" class="headerlink" title="2 导入使用"></a>2 导入使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import ‘package:path_provider/path_provider.dart’;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在path_provider中有三个获取文件路径的方法：</p><ul><li>getTemporaryDirectory()&#x2F;&#x2F;获取应用缓存目录，等同IOS的NSTemporaryDirectory()和Android的getCacheDir() 方法</li><li>getApplicationDocumentsDirectory()获取应用文件目录类似于Ios的NSDocumentDirectory和Android上的 AppData目录</li><li>getExternalStorageDirectory()&#x2F;&#x2F;这个是存储卡，仅仅在Android平台可以使用</li></ul><h3 id="3-首先我们先获取存储目录"><a href="#3-首先我们先获取存储目录" class="headerlink" title="3 首先我们先获取存储目录"></a>3 首先我们先获取存储目录</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> _localPath <span class="keyword">async</span> &#123;</span><br><span class="line">   <span class="keyword">final</span> directory = <span class="keyword">await</span> getApplicationDocumentsDirectory();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> directory.path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-然后在本地建立文件（不存在这个名字的自动创建并返回，存在则直接返回这个文件对象），名字就叫做nameFile吧。"><a href="#4-然后在本地建立文件（不存在这个名字的自动创建并返回，存在则直接返回这个文件对象），名字就叫做nameFile吧。" class="headerlink" title="4 然后在本地建立文件（不存在这个名字的自动创建并返回，存在则直接返回这个文件对象），名字就叫做nameFile吧。"></a>4 然后在本地建立文件（不存在这个名字的自动创建并返回，存在则直接返回这个文件对象），名字就叫做nameFile吧。</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;File&gt; <span class="keyword">get</span> _localFile <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> path = <span class="keyword">await</span> _localPath;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> File(<span class="string">&#x27;<span class="subst">$path</span>/nameFile.txt&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-写入文件内容"><a href="#4-写入文件内容" class="headerlink" title="4 写入文件内容"></a>4 写入文件内容</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;File&gt; save(<span class="built_in">String</span> name) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> file = <span class="keyword">await</span> _localFile;</span><br><span class="line">  <span class="keyword">return</span> file.writeAsString(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-读取内容"><a href="#5-读取内容" class="headerlink" title="5 读取内容"></a>5 读取内容</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> file = <span class="keyword">await</span> _localFile;</span><br><span class="line">  <span class="keyword">return</span> file.readAsString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> file = <span class="keyword">await</span> _localFile;</span><br><span class="line">  <span class="keyword">return</span> file.readAsString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flutter-本地存储</title>
      <link href="/posts/1340560355/"/>
      <url>/posts/1340560355/</url>
      
        <content type="html"><![CDATA[<p>在Flutter中，我们使用shared_preferences库来同时支持Android和ios平台。<br>相当于浏览器的 localStorage</p><span id="more"></span><p><a href="http://flutter.link/2018/04/13/Flutter%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/">Flutter开发者文档-数据储存</a></p><h3 id="1-在pubspec-yaml文件中添加依赖"><a href="#1-在pubspec-yaml文件中添加依赖" class="headerlink" title="1 在pubspec.yaml文件中添加依赖"></a>1 在pubspec.yaml文件中添加依赖</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shared_preferences:</span> <span class="string">&quot;^0.4.2&quot;</span></span><br></pre></td></tr></table></figure><p>并更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure><h3 id="2-导入使用"><a href="#2-导入使用" class="headerlink" title="2 导入使用"></a>2 导入使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-增删改查"><a href="#3-增删改查" class="headerlink" title="3 增删改查"></a>3 增删改查</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line"><span class="comment">// 增 改(重新赋值就好)</span></span><br><span class="line">prefs.setString(key, value)</span><br><span class="line">prefs.setBool(key, value)</span><br><span class="line">prefs.setDouble(key, value)</span><br><span class="line">prefs.setInt(key, value)</span><br><span class="line">prefs.setStringList(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">prefs.remove(key); <span class="comment">//删除指定键</span></span><br><span class="line">prefs.clear();<span class="comment">//清空键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">_prefs.then((SharedPreferences prefs) &#123;</span><br><span class="line">    <span class="keyword">return</span> (prefs.getBool(<span class="string">&#x27;disclaimer::Boolean&#x27;</span>) ?? <span class="keyword">false</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span>(<span class="built_in">String</span> mUserName = <span class="string">&#x27;userName&#x27;</span>) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> userName;</span><br><span class="line">    SharedPreferences prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">    userName = <span class="keyword">await</span> prefs.getString(mUserName);</span><br><span class="line">  <span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; userName = <span class="keyword">get</span>();</span><br><span class="line">userName.then((<span class="built_in">String</span> userName) &#123;</span><br><span class="line">Scaffold.of(context).showSnackBar(</span><br><span class="line">        SnackBar(content: Text(<span class="string">&quot;数据获取成功：<span class="subst">$userName</span>&quot;</span>)));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-支持类型"><a href="#4-支持类型" class="headerlink" title="4 支持类型"></a>4 支持类型</h3><ul><li>setBool</li><li>setInt</li><li>setDouble</li><li>setString</li><li>setStringList</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css3-fill-available 填充剩余空间</title>
      <link href="/posts/3653483952/"/>
      <url>/posts/3653483952/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: fill-available;</span><br></pre></td></tr></table></figure><p>设置宽度为fill-available，可以使inline-block像block那样填充整个空间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fit-<span class="attribute">content</span></span><br></pre></td></tr></table></figure><p>设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果</p><span id="more"></span><h3 id="fill-available"><a href="#fill-available" class="headerlink" title="fill-available"></a>fill-available</h3><img src="/posts/3653483952/fill-available.gif" class=""><h3 id="fit-content"><a href="#fit-content" class="headerlink" title="fit-content"></a>fit-content</h3><img src="/posts/3653483952/fit-content.gif" class="">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 fill-available </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3-overflow-anchor滚动锚定</title>
      <link href="/posts/3965827120/"/>
      <url>/posts/3965827120/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor">https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>-anchor: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="为何要有这个属性"><a href="#为何要有这个属性" class="headerlink" title="为何要有这个属性"></a>为何要有这个属性</h3><p>滚动锚定是一种浏览器特性，它试图阻止一种常见的情况，在DOM完全加载之前，你可以向下滚动一个网页，当它完成时，任何加载到当前位置的元素都会把你推到页面的下方。</p><p>这是有道理的，为什么会这样。<br>有一些CSS属性，我们应用于那些赋予它们大小（例如宽度）、形状（如转换）和位置（例如空白）的元素。<br>如果这些元素在我们在页面上滚动的时候没有加载，那么DOM将继续加载它们，即使它们位于我们当前的viewport之外，并且会在物理上扩展，为那些新加载的元素腾出空间。<br>随着DOM的增长，我们在页面上的位置会发生变化，以适应这些元素。</p><p>滚动锚定可以防止“跳跃”体验，因为在当前位置上方的DOM中发生变化时，锁定用户在页面上的位置。<br>这允许用户在页面上停留的位置，即使新元素被加载到DOM中。</p><blockquote><p>简单的说就是：我们读文章时，页面内容变化不影响我们阅读，此时的页码位置静止</p></blockquote><p>overflow-anchor属性允许我们在事件中选择退出滚动锚定特性，因为它更倾向于允许内容在加载元素时重新流动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>-anchor: [auto | none];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>auto（默认）：滚动事件使页面高度或宽度发生了改变，滚动条不会因此而改变指向的内容，而。允许滚动锚定。</li><li>none：滚动事件使页面高度或宽度发生了改变，滚动条指向的内容也会随之而变。禁止滚动锚定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-专门为打印设计的css样式</title>
      <link href="/posts/806548742/"/>
      <url>/posts/806548742/</url>
      
        <content type="html"><![CDATA[<p>分隔符插入位置<br>page-break-before<br>page-break-after<br>page-break-inside</p><span id="more"></span><blockquote><p><a href="https://lon.im/post/css-print.html">https://lon.im/post/css-print.html</a></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">page-break-before</span>: auto;</span><br><span class="line">    <span class="attribute">page-break-after</span>: always;</span><br><span class="line">    <span class="attribute">page-break-inside</span>: auto;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">        auto 如果需要，在对象之前插入页分割符</span></span><br><span class="line"><span class="comment">        always 始终在对象之前插入页分割符</span></span><br><span class="line"><span class="comment">        avoid 避免在对象前面插入页分割符</span></span><br><span class="line"><span class="comment">        left 在对象前面插入页分割符直到它到达一个空白的左页边</span></span><br><span class="line"><span class="comment">        right 在对象前面插入页分割符直到它到达一个空白的右页边</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用媒体查询来专门设置打印时的样式"><a href="#使用媒体查询来专门设置打印时的样式" class="headerlink" title="使用媒体查询来专门设置打印时的样式"></a>使用媒体查询来专门设置打印时的样式</h2><h3 id="media-print"><a href="#media-print" class="headerlink" title="@media print"></a>@media print</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;(&quot;</span> <span class="built_in">attr</span>(href) <span class="string">&quot;)&quot;</span>; <span class="comment">/* 所有链接后显示链接地址 */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="在css中导入打印时专有样式"><a href="#在css中导入打印时专有样式" class="headerlink" title="在css中导入打印时专有样式"></a>在css中导入打印时专有样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;my-print-style.css&quot;</span>) print;</span><br></pre></td></tr></table></figure><h3 id="使用link引入打印时专有样式"><a href="#使用link引入打印时专有样式" class="headerlink" title="使用link引入打印时专有样式"></a>使用link引入打印时专有样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span> <span class="attr">href</span>=<span class="string">&quot;my-print-style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="page"><a href="#page" class="headerlink" title="@page"></a>@page</h2><p><code>@page</code>可以设置页面的大小<br>支持的属性有：margin、size、marks、bleed 以及页面外边距盒子等</p><h3 id="设置页面外边距盒子"><a href="#设置页面外边距盒子" class="headerlink" title="设置页面外边距盒子"></a>设置页面外边距盒子</h3><p>页面外边距盒子需要在 @page 下使用，使用起来和伪类类似，也包含 content 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@page</span> &#123;</span><br><span class="line">    <span class="comment">/* 页面内容区域底部添加一条 1px 的灰线 */</span></span><br><span class="line">    <span class="keyword">@bottom-left</span>, @bottom-center, @bottom-right &#123;</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 页脚中间显示格式如 &quot;第 3 页&quot; 的页码 */</span></span><br><span class="line">    <span class="keyword">@bottom-center</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;第&quot;</span> <span class="built_in">counter</span>(page) <span class="string">&quot;页&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="margin-系列属性（margin-top、margin-right、margin-bottom、margin-left-和-margin）用于指定页面外边距大小。"><a href="#margin-系列属性（margin-top、margin-right、margin-bottom、margin-left-和-margin）用于指定页面外边距大小。" class="headerlink" title="margin 系列属性（margin-top、margin-right、margin-bottom、margin-left 和 margin）用于指定页面外边距大小。"></a>margin 系列属性（margin-top、margin-right、margin-bottom、margin-left 和 margin）用于指定页面外边距大小。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@page</span> &#123;</span><br><span class="line">    size: A4 portrait;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3.7cm</span> <span class="number">2.6cm</span> <span class="number">3.5cm</span>; <span class="comment">/* 国家标准公文页边距 GB/T 9704-2012 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="size-属性支持-auto、landscape、portrait、-1-2-和-。"><a href="#size-属性支持-auto、landscape、portrait、-1-2-和-。" class="headerlink" title="size 属性支持 auto、landscape、portrait、{1,2} 和 。"></a>size 属性支持 auto、landscape、portrait、<length>{1,2} 和 <page-size>。</h4><ul><li>默认值为 auto，表示页面大小和方向由用户代理决定</li><li>landscape 指定页面为横向，如果 <page-size> 没有指定，大小则由用户代理决定</li><li>portrait 指定页面为纵向，如果 <page-size> 没有指定，大小则由用户代理决定</li><li><length>{1,2} 表示指定页面大小，填写两个值则分别指定页面盒子的宽度和高度，填写一个值则同时指定宽度和高度。在 CSS3 中，值的单位支持em 和 ex，大小相对于页面上下文中字体的大小</li><li><page-size> 也用于指定页面大小，等价于使用 <length>{1,2}。常用的值有：A3、A4、A5、B4 和 B5 等，详细尺寸请参考 ISO 216。* * <page-size> 可以与 landscape 或 portrait 组合同时指定页面方向。</li></ul><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>页面上下文也支持使用伪类，其中支持的伪类有：:left、:right、:first 和 :blank。</p><h4 id="伪类-left-和-right"><a href="#伪类-left-和-right" class="headerlink" title="伪类 :left 和 :right"></a>伪类 :left 和 :right</h4><p>需要双面打印时，通常需要将左页和右页设置不同的样式（如页边距、页码位置）。这时左页和右页可以分别用 :left 和 :right 表示。再次强调，通过 :left 和 :right 设置左右页面不同样式，并不代表用户代理会将页面双面打印</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通过分别设置左页和右页不同的左右页面距，为装订边留出更多的空间 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> :left &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2.5cm</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">2.7cm</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> :right &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2.7cm</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">2.5cm</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪类-first"><a href="#伪类-first" class="headerlink" title="伪类 :first"></a>伪类 :first</h3><h4 id="伪类-first-用于匹配到文档的第一页。"><a href="#伪类-first-用于匹配到文档的第一页。" class="headerlink" title="伪类 :first 用于匹配到文档的第一页。"></a>伪类 :first 用于匹配到文档的第一页。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@page</span> :first &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10cm</span>; <span class="comment">/* 首页上页边距设置为 10cm */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伪类-blank"><a href="#伪类-blank" class="headerlink" title="伪类 :blank"></a>伪类 :blank</h4><p>伪类 :blank 用于匹配文档的空白页。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">page-break-before</span>: left; <span class="comment">/* 一级标题强制分配到右页 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> :blank &#123;</span><br><span class="line">    <span class="keyword">@top-center</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;这是空白页&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，空白页既可能是左页，又可能是右页，设置左页或右页的样式也会显示在空白页上，如果不希望显示在空白页上，可以清除这些样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">break-before</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> :left &#123;</span><br><span class="line">    <span class="keyword">@left-center</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;这是左页&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> :right &#123;</span><br><span class="line">    <span class="keyword">@right-center</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;这是右页&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> :blank &#123;</span><br><span class="line">    <span class="keyword">@left-center</span>, @right-center &#123;</span><br><span class="line">        <span class="attribute">content</span>: none; <span class="comment">/* 如果是空白页则不显示 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>page-break-before，page-break-after，page-break-inside (CSS 2.1)<br>用于控制元素之前、之后或之中是否分页，没有生成盒子的块元素不会生效。</p><p>page-break-before、page-break-after 属性支持 auto、always、avoid、left、right、recto 和 verso。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">page-break-before</span>: always;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>auto 默认值，表示既不强制分页也不禁止分页</li><li>always、avoid 表示在该元素之前（或之后）强制或禁止分页</li><li>left、right 表示在该元素之前（或之后）强制分页，使得下一页出现在左页或右页</li><li>recto、verso 页面进度从左至右时，分别与 right 和 left 一致；反之与 left 和 right 一致</li></ul><p>page-break-inside 属性仅支持 auto 和 avoid，表示在元素内允许或禁止分页。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span>, <span class="selector-tag">tfoot</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-row-group;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">thead</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">page-break-inside</span>: avoid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="orphans，windows-CSS-2-1"><a href="#orphans，windows-CSS-2-1" class="headerlink" title="orphans，windows (CSS 2.1)"></a>orphans，windows (CSS 2.1)</h3><p>orphans 和 windows 用于指定在页面的底部或顶部，元素中允许剩余的最少行数，默认为 2 行。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>“白纸黑字”–避免不必要的背景颜色、加深文字颜色等</li><li>避免打印次要的内容，比如导航栏、侧边栏等</li><li>链接后显示链接地址</li><li>做好分页，避免标题、表格单元格等换行</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">    <span class="keyword">@page</span> &#123;</span><br><span class="line">        size: A4 portrait;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">3.7cm</span> <span class="number">2.6cm</span> <span class="number">3.5cm</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">page-break-before</span>: always;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>,</span><br><span class="line">    <span class="selector-tag">thead</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">page-break-inside</span>: avoid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: white;</span><br><span class="line">        <span class="attribute">color</span>: black;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">nav</span>, <span class="selector-tag">aside</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;(&quot;</span> <span class="built_in">attr</span>(href) <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">thead</span>, <span class="selector-tag">tfoot</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: table-row-group;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css-隐藏滚动条</title>
      <link href="/posts/2631211152/"/>
      <url>/posts/2631211152/</url>
      
        <content type="html"><![CDATA[<p>对于Chrome，Safari 和 Opera 而言，可以使用以下的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IE 或 Edge 可用以下代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    -ms-<span class="attribute">overflow</span>-style: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于 Firefox，很不幸，没有任何办法隐藏滚动条。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css-scroll-滚动捕捉</title>
      <link href="/posts/3578512530/"/>
      <url>/posts/3578512530/</url>
      
        <content type="html"><![CDATA[<p>通过在容器元素上设置scroll-snap-type属性并在其子元素上设置scroll-snap-align属性来使用滚动捕捉。当滚动容器元素时，它将捕捉到你定义的子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">scroll-snap-type</span>: y mandatory; &#125; </span><br><span class="line"><span class="selector-class">.child</span> &#123; <span class="attribute">scroll-snap-align</span>: start; &#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><a href="https://www.w3cplus.com/css/practical-css-scroll-snapping.html">https://www.w3cplus.com/css/practical-css-scroll-snapping.html</a></p><h3 id="设置捕捉关键点"><a href="#设置捕捉关键点" class="headerlink" title="设置捕捉关键点"></a>设置捕捉关键点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; scroll-snap-points-y: <span class="built_in">repeat</span>(<span class="number">300px</span>); &#125;</span><br></pre></td></tr></table></figure><p>这种方法非常有限。由于它只允许均匀间隔的捕捉点，因此你无法真正构建捕捉到不同大小元素的接口。<br>如果元素在不同的屏幕尺寸之间改变形状，你也必然会遇到问题。</p><p>或</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; </span><br><span class="line">    <span class="attribute">scroll-snap-type</span>: y mandatory;</span><br><span class="line">    <span class="comment">/* 在y轴上设置捕捉点，适合竖直方向上的滚动 */</span></span><br><span class="line">    <span class="comment">/* 在x轴上设置捕捉点 适合水平方向上的滚动*/</span></span><br><span class="line">    scroll-snap-points-y: <span class="built_in">repeat</span>(<span class="number">300px</span>);</span><br><span class="line">    <span class="attribute">scroll-snap-type</span>: y mandatory;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">    <span class="attribute">scroll-snap-align</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="父容器属性"><a href="#父容器属性" class="headerlink" title="父容器属性"></a>父容器属性</h2><h3 id="scroll-snap-type-mandatory-vs-proximity"><a href="#scroll-snap-type-mandatory-vs-proximity" class="headerlink" title="scroll-snap-type: mandatory vs. proximity"></a>scroll-snap-type: mandatory vs. proximity</h3><p><code>mandatory</code> 属性值意味着每当用户停止滚动时，浏览器必须捕捉到捕捉点。<br><code>proximity</code> 属性没有那么严格，它意味着浏览器可能会在看起来合适的情况下突然捕捉到某个位置。根据我的经验，当你在一个捕捉点的几百个像素内停止滚动时，这种情况就会出现。</p><p><code>mandatory</code> 更危险 可以提供更一致的用户体验<br><code>proximity</code> 更温和</p><h3 id="scroll-padding"><a href="#scroll-padding" class="headerlink" title="scroll-padding"></a>scroll-padding</h3><p>默认情况下，内容会吸附到容器的边缘。你可以通过在容器上设置scroll-padding属性来改变它。它遵循与常规padding属性相同的语法。</p><p>如果你的布局中有可能妨碍内容的元素（比如固定的标题），那么这个属性就非常的有用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">scroll-padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子元素上的属性"><a href="#子元素上的属性" class="headerlink" title="子元素上的属性"></a>子元素上的属性</h2><h3 id="scroll-snap-align"><a href="#scroll-snap-align" class="headerlink" title="scroll-snap-align"></a>scroll-snap-align</h3><p>这个属性可以让你指定元素哪一部分应该与容器对齐。它有三个值可选择：start、center和end。</p><p>这些是相对于滚动方向的。如果是垂直滚动，start指的是元素的顶部边缘。如果是水平滚动条，它指的是左边缘。center和end遵循相同的原则。<br>你可以为滚动条的不同方向设置不同的值，这两个值之间用空格分隔开</p><h3 id="scroll-snap-stop：normal-vs-always"><a href="#scroll-snap-stop：normal-vs-always" class="headerlink" title="scroll-snap-stop：normal vs. always"></a>scroll-snap-stop：normal vs. always</h3><p>默认情况下，滚动捕捉仅在用户停止滚动时启动，这意味着用户可以在停止之前跳过多个捕捉点</p><p>你可以在任何子元素上设置scroll-snap-stop: always来改变它。这会强制滚动容器在该元素上停止，然后用户可以继续滚动。</p><blockquote><p>这个特性可以实现滚屏</p></blockquote><h2 id="滚动捕捉可以同时在两个方向工作"><a href="#滚动捕捉可以同时在两个方向工作" class="headerlink" title="滚动捕捉可以同时在两个方向工作"></a>滚动捕捉可以同时在两个方向工作</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; </span><br><span class="line">    <span class="attribute">scroll-snap-type</span>: both mandatory; // both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tile</span> &#123; <span class="attribute">scroll-snap-align</span>: start; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css 滚动捕捉 scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断一个元素是否在另一个元素中</title>
      <link href="/posts/183942322/"/>
      <url>/posts/183942322/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;children&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parent = doucument.<span class="title function_">getElementById</span>(<span class="string">&#x27;parent&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> children = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;children&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="方案一：使用-contains"><a href="#方案一：使用-contains" class="headerlink" title="方案一：使用 contains"></a>方案一：使用 contains</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parent.<span class="title function_">contains</span>(children);   <span class="comment">// true</span></span><br><span class="line">children.<span class="title function_">contains</span>(parent);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTargetNode</span>(<span class="params">ele, target</span>) &#123;</span><br><span class="line">    <span class="comment">// ele是内部元素，target是你想找到的包裹元素</span></span><br><span class="line">    <span class="keyword">if</span> (!ele || ele === <span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ele === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getTargetNode</span>(ele.<span class="property">parentNode</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getTargetNode</span>(children, parent); <span class="comment">// ie9下依旧坚挺</span></span><br></pre></td></tr></table></figure><p>兼容方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> contains = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">contains</span> ?</span><br><span class="line">      <span class="keyword">function</span>(<span class="params">parent, node</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> parent !== node &amp;&amp; parent.<span class="title function_">contains</span>(node)</span><br><span class="line">      &#125; :</span><br><span class="line">      <span class="keyword">function</span>(<span class="params">parent, node</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; (node = node.<span class="property">parentNode</span>))</span><br><span class="line">          <span class="keyword">if</span> (node === parent) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css对象模型-CSSOM</title>
      <link href="/posts/3542651706/"/>
      <url>/posts/3542651706/</url>
      
        <content type="html"><![CDATA[<p>CSSOM是一组允许JavaScript操作CSS的API。它非常类似于DOM，但是用于CSS而不是HTML。它允许用户动态读取和修改CSS样式。</p><span id="more"></span><p><a href="https://www.w3cplus.com/javascript/cssom-css-typed-om.html">https://www.w3cplus.com/javascript/cssom-css-typed-om.html</a><br><a href="https://www.w3.org/TR/cssom-1/">https://www.w3.org/TR/cssom-1/</a></p><h2 id="设置css方法"><a href="#设置css方法" class="headerlink" title="设置css方法"></a>设置css方法</h2><h3 id="1-ele-style-protypeName"><a href="#1-ele-style-protypeName" class="headerlink" title="1 ele.style.protypeName"></a>1 ele.style.protypeName</h3><p>我们可以使用相同的格式添加或更改页面上任何对象的CSS：ele.style.propertyName，其中ele指的是DOM元素，propertyName指的是希望给ele元素要添加的样式属性</p><blockquote><p>记住，带有-中划线的CSS属性需要改用陀峰形式，比如上面示例中的background-color属性要写成backgroundColor</p></blockquote><blockquote><p>注意，在动态设置float属性时，需要使用cssFloat，这是因为float是JavaScript中的一个关键词。<br>这个有点类似于getAttribute()给HTML元素设置for属性时，需要使用htmlFor。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>style.<span class="property">backgroundColor</span>=<span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-0-attributeStyleMap"><a href="#2-0-attributeStyleMap" class="headerlink" title="2 $0.attributeStyleMap"></a>2 $0.attributeStyleMap</h3><p>在CSS Houdini中的CSSOM，我们可以使用.attributeStyleMap属性来替代ele.style。可以使用ele.attributeStyleMap.set(property, value)来设置元素内联样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>attributeStyleMap.<span class="title function_">set</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;green&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其得到的效果和ele.style.property &#x3D; value等同的效果。另外，.attributeStyleMap类似于Map对象，所以它们支持对象常有的一些方法，比如get、set、keys、values和entry等。这样让我们的工作也变得更为灵活：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>attributeStyleMap.<span class="title function_">set</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;green&#x27;</span>) <span class="comment">// 设置background-color的值为green</span></span><br><span class="line">$<span class="number">0.</span>attributeStyleMap.<span class="title function_">get</span>(<span class="string">&#x27;background-color&#x27;</span>).<span class="property">value</span> === <span class="string">&#x27;green&#x27;</span> <span class="comment">// =&gt; false</span></span><br><span class="line">$<span class="number">0.</span>attributeStyleMap.<span class="title function_">has</span>(<span class="string">&#x27;background-color&#x27;</span>) <span class="comment">// =&gt; true</span></span><br><span class="line">$<span class="number">0.</span>attributeStyleMap.<span class="title function_">delete</span>(<span class="string">&#x27;background-color&#x27;</span>) <span class="comment">// =&gt; 删除background-color</span></span><br><span class="line">$<span class="number">0.</span>attributeStyleMap.<span class="title function_">clear</span>() <span class="comment">// =&gt; 删除所有样式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-0-style-cssText"><a href="#3-0-style-cssText" class="headerlink" title="3 $0.style.cssText"></a>3 $0.style.cssText</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>style.<span class="property">cssText</span> = <span class="string">&#x27;color: red; background-color: blue&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取计算样式"><a href="#获取计算样式" class="headerlink" title="获取计算样式"></a>获取计算样式</h2><h3 id="1-window-getComputedStyle"><a href="#1-window-getComputedStyle" class="headerlink" title="1 window.getComputedStyle()"></a>1 window.getComputedStyle()</h3><p>我们可以使用window.getComputedStyle()方法获取元素上任何CSS的计算值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($<span class="number">0</span>).<span class="property">backgroundColor</span> <span class="comment">// =&gt; &quot;rgb(0, 128, 0)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el).<span class="property">backgroundColor</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el)[<span class="string">&#x27;background-color&#x27;</span>];</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;background-color&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-使用el-computedStyleMap"><a href="#2-使用el-computedStyleMap" class="headerlink" title="2 使用el.computedStyleMap()"></a>2 使用el.computedStyleMap()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.<span class="title function_">computedStyleMap</span>().<span class="title function_">get</span>(<span class="string">&#x27;opacity&#x27;</span>).<span class="property">value</span> <span class="comment">// =&gt; 0.5</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，window.getComputedStyle()和ele.computedStyleMap()的差别是，前者返回的是解析值，而后值返回计算值。类如，如果你的样式中有一个这样的值，width: 50%，那么在Typed OM中将保留百分值（width: 50%）;而CSSOM中返回的是解析值（width: 200px</p></blockquote><blockquote><p>window.getComputedStyle() 返回50% 原始值 可以检索伪元素<br>ele.computedStyleMap() 返回200px 计算值</p></blockquote><h3 id="3-检索伪元素"><a href="#3-检索伪元素" class="headerlink" title="3 检索伪元素"></a>3 检索伪元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(ele, <span class="string">&#x27;::before&#x27;</span>).<span class="property">property</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-setProperty-该方法可以给CSS的属性设置一个新的值"><a href="#4-setProperty-该方法可以给CSS的属性设置一个新的值" class="headerlink" title="4 setProperty() 该方法可以给CSS的属性设置一个新的值"></a>4 setProperty() 该方法可以给CSS的属性设置一个新的值</h3><p>其中property指的是CSS属性，value设置的属性的值，priority允许设置CSS的权重，即!important。比如下面这个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>style.<span class="title function_">setProperty</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;important&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($<span class="number">0</span>).<span class="property">color</span>  <span class="comment">// =&gt; &quot;rgb(255, 0, 0)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-getPropertyPriority-返回css属性的优先级"><a href="#5-getPropertyPriority-返回css属性的优先级" class="headerlink" title="5 getPropertyPriority() 返回css属性的优先级"></a>5 getPropertyPriority() 返回css属性的优先级</h3><p>getPropertyPriority()方法是一个很有意思的方法。这个方法会根据传入的CSS属性，返回一个DOMString来表示该属性的优先级。如果有的话，则返回important；如果不存在的话，返回空字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>style.<span class="title function_">setProperty</span>(<span class="string">&#x27;border&#x27;</span>, <span class="string">&#x27;2px solid red&#x27;</span>, <span class="string">&#x27;important&#x27;</span>)</span><br><span class="line">$<span class="number">0.</span>style.<span class="title function_">setProperty</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">$<span class="number">0.</span>style.<span class="title function_">getPropertyPriority</span>(<span class="string">&#x27;border&#x27;</span>) <span class="comment">// =&gt; &quot;important&quot; </span></span><br><span class="line">$<span class="number">0.</span>style.<span class="title function_">getPropertyPriority</span>(<span class="string">&#x27;background-color&#x27;</span>) <span class="comment">// =&gt; &quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-removeProperty-移除style对象的一个属性"><a href="#6-removeProperty-移除style对象的一个属性" class="headerlink" title="6 removeProperty() 移除style对象的一个属性"></a>6 removeProperty() 移除style对象的一个属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0.</span>style.<span class="title function_">removeProperty</span>(<span class="string">&#x27;margin&#x27;</span>) <span class="comment">// =&gt; &quot;&quot; $0.style.getPropertyValue(&#x27;margin&#x27;) // =&gt; &quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSSStyleSheet-接口"><a href="#CSSStyleSheet-接口" class="headerlink" title="CSSStyleSheet 接口"></a>CSSStyleSheet 接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">styleSheets</span></span><br></pre></td></tr></table></figure><p>遍历出来所有运用到的样式表的相关信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">document</span>.<span class="property">styleSheets</span>.<span class="property">length</span>; i++) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">styleSheets</span>[i]) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSSStyleSheet主要有两个属性</p><ul><li>cssRules：返回样式表中CSS规则的CSSRuleList对象</li><li>ownerRule：如果一个样式表示通过@import规则引入document的，则ownerRule将返回那个CSSImportRule对象，否则返回null</li></ul><p>cssRules 非常有用，可以遍历出所有的css选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myRules = <span class="variable language_">document</span>.<span class="property">styleSheets</span>[<span class="number">0</span>].<span class="property">cssRules</span>; </span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">of</span> myRules) &#123; </span><br><span class="line">    <span class="keyword">if</span> (i.<span class="property">type</span> === <span class="number">1</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">selectorText</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insertRule-向样式表中插入一条新规则"><a href="#insertRule-向样式表中插入一条新规则" class="headerlink" title="insertRule 向样式表中插入一条新规则"></a>insertRule 向样式表中插入一条新规则</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstStylesheet = <span class="variable language_">document</span>.<span class="property">styleSheets</span>[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstStylesheet.<span class="property">cssRules</span>.<span class="property">length</span>) <span class="comment">// =&gt; 116 </span></span><br><span class="line">firstStylesheet.<span class="title function_">insertRule</span>( <span class="string">`</span></span><br><span class="line"><span class="string">    body &#123; </span></span><br><span class="line"><span class="string">        background-color: orange; </span></span><br><span class="line"><span class="string">        font-size: 3em; padding: 2em; </span></span><br><span class="line"><span class="string">    &#125;`</span>, firstStylesheet.<span class="property">cssRules</span>.<span class="property">length</span> <span class="comment">// 插入位置，插入到最后一个位置</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>stylesheet.insertRule()方法接受两值参数：</p><p>rule：一个字符串，也就是想插入的样式规则，包含选择器和对应的样式规则<br>index：一个数字，表示要插入的位置，这是一个可选参数</p><h3 id="deleteRule-从当前样式表对象中删除指定的样式规则"><a href="#deleteRule-从当前样式表对象中删除指定的样式规则" class="headerlink" title="deleteRule 从当前样式表对象中删除指定的样式规则"></a>deleteRule 从当前样式表对象中删除指定的样式规则</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firstStylesheet.<span class="title function_">deleteRule</span>(<span class="number">116</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>deleteRule()方法相对来说更为容易，它只接受一个参数index。index就是一个数字，用来指定样式规则的位置。作为参数传入的所选index必须小于cssRules.length，否则将抛出错误。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>\b 和 \B</title>
      <link href="/posts/3545086800/"/>
      <url>/posts/3545086800/</url>
      
        <content type="html"><![CDATA[<p>\b 是单词边界，具体就是 \w 与 \W 之间的位置<br>也包括 \w 与 ^ 之间的位置，和 \w 与 $ 之间的位置。</p><span id="more"></span><h2 id="b-单词边界"><a href="#b-单词边界" class="headerlink" title="\b 单词边界"></a>\b 单词边界</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;[JS] Lesson_01.mp4&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/\b/g</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line"><span class="comment">// =&gt; &quot;[#JS#] #Lesson_01#.#mp4#&quot;\</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第 1 个，两边字符是 “[“ 与 “J”，是 \W 与 \w 之间的位置。<br>第 2 个，两边字符是 “S” 与 “]”，也就是 \w 与 \W 之间的位置。<br>第 3 个，两边字符是空格与 “L”，也就是 \W 与 \w 之间的位置。<br>第 4 个，两边字符是 “1” 与 “.”，也就是 \w 与 \W 之间的位置。<br>第 5 个，两边字符是 “.” 与 “m”，也就是 \W 与 \w之间的位置。<br>第 6 个，位于结尾，前面的字符 “4” 是 \w，即 \w 与 $ 之间的位置。</p><h2 id="B-非单词边界"><a href="#B-非单词边界" class="headerlink" title="\B 非单词边界"></a>\B 非单词边界</h2><p>知道了 \b 的概念后，那么 \B 也就相对好理解了。<br>\B 就是 \b 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 \b，剩下的都是 \B 的。<br>具体说来就是 \w 与 \w、 \W 与 \W、^ 与 \W，\W 与 $ 之间的位置。<br>比如上面的例子，把所有 \B 替换成 “#”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;[JS] Lesson_01.mp4&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/\B/g</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// =&gt; &quot;#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RegExp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向先行断言和负向先行断言</title>
      <link href="/posts/933613212/"/>
      <url>/posts/933613212/</url>
      
        <content type="html"><![CDATA[<p>(?&#x3D;p)，其中 p 是一个子模式，即 p 前面的位置，或者说，该位置后面的字符要匹配 p。<br>而 (?!p) 就是 (?&#x3D;p) 的反面意思。</p><span id="more"></span><h2 id="正向断言"><a href="#正向断言" class="headerlink" title="正向断言"></a>正向断言</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;hello&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(?=l)/g</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// =&gt; &quot;he#l#lo&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反向断言"><a href="#反向断言" class="headerlink" title="反向断言"></a>反向断言</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;hello&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(?!l)/g</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// =&gt; &quot;#h#ell#o#&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RegExp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式位置匹配攻略</title>
      <link href="/posts/3263802470/"/>
      <url>/posts/3263802470/</url>
      
        <content type="html"><![CDATA[<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><span id="more"></span><h2 id="什么是位置呢？"><a href="#什么是位置呢？" class="headerlink" title="什么是位置呢？"></a>什么是位置呢？</h2><p>位置（锚）是相邻字符之间的位置。</p><h2 id="如何匹配位置呢？"><a href="#如何匹配位置呢？" class="headerlink" title="如何匹配位置呢？"></a>如何匹配位置呢？</h2><p>在 ES5 中，共有 6 个锚：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^、$、\b、\B、(?=p)、(?!p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>^（脱字符）匹配开头，在多行匹配中匹配行开头。<br>$（美元符号）匹配结尾，在多行匹配中匹配行结尾。<br>比如我们把字符串的开头和结尾用 “#” 替换（位置可以替换成字符的！）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;hello&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/^|$/g</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// =&gt; &quot;#hello#&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多行匹配模式（即有修饰符 m）时，二者是行的概念，这一点需要我们注意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&quot;I\nlove\njavascript&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/^|$/gm</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">#I#</span></span><br><span class="line"><span class="comment">#love#</span></span><br><span class="line"><span class="comment">#javascript#</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RegExp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪婪匹配与惰性匹配</title>
      <link href="/posts/494223915/"/>
      <url>/posts/494223915/</url>
      
        <content type="html"><![CDATA[<p>贪婪匹配与惰性匹配</p><span id="more"></span><h2 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;/g</span>; </span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&quot;123 1234 12345 123456&quot;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( string.<span class="title function_">match</span>(regex) ); <span class="comment">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它会尽可能多的匹配。你能给我 6 个，我就要 5 个。你能给我 3 个，我就要 3 个。 反正只要在能力范围内，越多越好。</p><h2 id="纵向模糊匹配"><a href="#纵向模糊匹配" class="headerlink" title="纵向模糊匹配"></a>纵向模糊匹配</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&quot;123 1234 12345 123456&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( string.<span class="title function_">match</span>(regex) ); <span class="comment">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 &#x2F;\d{2,5}?&#x2F; 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不再往下尝试了</p>]]></content>
      
      
      <categories>
          
          <category> RegExp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种模糊匹配</title>
      <link href="/posts/625326987/"/>
      <url>/posts/625326987/</url>
      
        <content type="html"><![CDATA[<p>两种模糊匹配</p><span id="more"></span><h2 id="横向模糊匹配"><a href="#横向模糊匹配" class="headerlink" title="横向模糊匹配"></a>横向模糊匹配</h2><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。<br>其实现的方式是使用量词。譬如 {m,n}，表示连续出现最少 m 次，最多 n 次。<br>比如正则 &#x2F;ab{2,5}c&#x2F; 表示匹配这样一个字符串：第一个字符是 “a”，接下来是 2 到 5 个字符 “b”，最后 是字符 “c”。</p><h2 id="纵向模糊匹配"><a href="#纵向模糊匹配" class="headerlink" title="纵向模糊匹配"></a>纵向模糊匹配</h2><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种 可能。<br>其实现的方式是使用字符组。譬如 [abc]，表示该字符是可以字符 “a”、”b”、”c” 中的任何一个。<br>比如 &#x2F;a[123]b&#x2F; 可以匹配如下三种字符串： “a1b”、”a2b”、”a3b”。</p>]]></content>
      
      
      <categories>
          
          <category> RegExp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-Dockerfile指令详解</title>
      <link href="/posts/357215418/"/>
      <url>/posts/357215418/</url>
      
        <content type="html"><![CDATA[<p>Dockerfile 指令详解<br>FROM，RUN，，COPY, ADD等</p><span id="more"></span><h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">COPY package.json /usr/src/app/ <span class="comment"># 复制package.json到/usr/src/app/</span></span><br><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=55:mygroup files* /mydir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=bin files* /mydir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=1 files* /mydir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=10:11 files* /mydir/</span><br><span class="line"><span class="comment"># 在使用该指令的时候还可以加上 --chown=&lt;user&gt;:&lt;group&gt; 选项来改变文件的所属用户及所属组。</span></span><br></pre></td></tr></table></figure><h3 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。</span></span><br><span class="line"><span class="comment"># 如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。</span></span><br><span class="line">FROM scratch</span><br><span class="line">ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span><br><span class="line">ADD --<span class="built_in">chown</span>=10:11 files* /mydir/ 同样可以设置权限</span><br></pre></td></tr></table></figure><h3 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMD 指令就是用于指定默认的容器主进程的启动命令的。</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$HOME</span> <span class="comment"># </span></span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>] <span class="comment"># 接执行 nginx 可执行文件，并且要求以前台形式运行。</span></span><br></pre></td></tr></table></figure><h3 id="ENV-定义环境变量"><a href="#ENV-定义环境变量" class="headerlink" title="ENV 定义环境变量"></a>ENV 定义环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line"></span><br><span class="line">RUN curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span><br><span class="line">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span> \</span><br><span class="line">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \</span><br><span class="line">  &amp;&amp; grep <span class="string">&quot; node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz\$&quot;</span> SHASUMS256.txt | <span class="built_in">sha256sum</span> -c - \</span><br><span class="line">  &amp;&amp; tar -xJf <span class="string">&quot;node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> -C /usr/local --strip-components=1 \</span><br><span class="line">  &amp;&amp; <span class="built_in">rm</span> <span class="string">&quot;node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> SHASUMS256.txt.asc SHASUMS256.txt \</span><br><span class="line">  &amp;&amp; <span class="built_in">ln</span> -s /usr/local/bin/node /usr/local/bin/nodejs</span><br></pre></td></tr></table></figure><h3 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /data</span><br><span class="line"><span class="comment"># 这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置</span></span><br><span class="line"></span><br><span class="line">docker run -d -v mydata:/data xxxx</span><br><span class="line"><span class="comment"># 在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</span></span><br></pre></td></tr></table></figure><h3 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h3><p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，<br>换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h3 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h3><p>抄的<br>参考资料<a href="https://yeasy.gitbooks.io/docker_practice/content/image/dockerfile/copy.html">https://yeasy.gitbooks.io/docker_practice&#x2F;content&#x2F;image&#x2F;dockerfile&#x2F;copy.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-构建镜像</title>
      <link href="/posts/636686316/"/>
      <url>/posts/636686316/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile </span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先创建Dockerfile文件</span></span><br><span class="line">vim Dockerfile </span><br><span class="line"></span><br><span class="line">FROM nginx</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line">docker build -t nginx:v3 .              </span><br><span class="line"><span class="comment"># -t让docker分配一个伪终端并绑定到容器的标准输入上, -i则让容器的标准输入保持打开.</span></span><br><span class="line"></span><br><span class="line">docker build https://github.com/twang2218/gitlab-ce-zh.git<span class="comment">#:11.1</span></span><br><span class="line"><span class="comment"># 这行命令指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录为 /11.1/，然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建。</span></span><br><span class="line"></span><br><span class="line">docker build - &lt; Dockerfile</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">cat</span> Dockerfile | docker build -</span><br><span class="line"><span class="comment"># 从标准输入中读取 Dockerfile 进行构建</span></span><br><span class="line"></span><br><span class="line">docker build - &lt; context.tar.gz</span><br><span class="line"><span class="comment"># 从标准输入中读取上下文压缩包进行构建</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-提交镜像</title>
      <link href="/posts/2298398267/"/>
      <url>/posts/2298398267/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> webserve bash <span class="comment"># 进入镜像</span></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> webserve bash <span class="comment"># 进入镜像</span></span><br><span class="line">vim ... <span class="comment"># 修改镜像</span></span><br><span class="line">docker diff webserve <span class="comment"># 对比镜像改动</span></span><br><span class="line">docker commit --author <span class="string">&quot;王闯&quot;</span> --message <span class="string">&quot;修改了默认网页&quot;</span> webserve nginx:v2 <span class="comment"># 提交镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span> 查看镜像</span><br><span class="line"></span><br><span class="line"><span class="comment"># --author 是指定修改的作者，而 --message 则是记录本次修改的内容。这点和 git 版本控制相似，不过这里这些信息可以省略留空。</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">history</span> nginx:v2 <span class="comment"># 查看镜像内的历史记录</span></span><br><span class="line">docker run --name web2 -d -p 81:80 nginx:v2 <span class="comment"># 运行这个镜像</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-常用容器命令</title>
      <link href="/posts/1468361160/"/>
      <url>/posts/1468361160/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a 列出容器</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a 列出容器</span><br><span class="line">docker run --name webserve -d -p 5003:80 nginx  创建容器   本地端口:容器端口</span><br><span class="line">docker start webserve 启动容器</span><br><span class="line">docker <span class="built_in">exec</span> -i -t  mynginx bash 进入容器</span><br><span class="line">docker container stop webserve 停止容器</span><br><span class="line">docker container restart webserve 重启容器</span><br><span class="line">docker container <span class="built_in">rm</span> webserve 删除容器</span><br><span class="line">docker container logs webserve 打印容器日志 docker logs webserve</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-常用镜像命令</title>
      <link href="/posts/399575668/"/>
      <url>/posts/399575668/</url>
      
        <content type="html"><![CDATA[ <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:18.04 <span class="comment"># 获取镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span> <span class="comment"># 列出所有镜像</span></span><br><span class="line">docker image <span class="built_in">rm</span> centos <span class="comment"># 删除镜像</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-运行</title>
      <link href="/posts/201401570/"/>
      <url>/posts/201401570/</url>
      
        <content type="html"><![CDATA[<p>docker run </p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker -it --<span class="built_in">rm</span> \</span><br><span class="line">ubuntu:18.04 \</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br></pre></td></tr></table></figure><p>docker run 就是运行容器的命令，具体格式我们会在 容器 一节进行详细讲解，我们这里简要的说明一下上面用到的参数。</p><p>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</p><p>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</p><p>ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。</p><p>bash：放在镜像名后的是 命令，这里我们希望有个交互式 Shell，因此用的是 bash。<br>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。</p><p>这里，我们执行了 cat &#x2F;etc&#x2F;os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 18.04.1 LTS 系统。</p><p>最后我们通过 exit 退出了这个容器。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-重写历史提交记录</title>
      <link href="/posts/897747710/"/>
      <url>/posts/897747710/</url>
      
        <content type="html"><![CDATA[<p>重写历史提交记录</p><span id="more"></span><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>执行 git 命令, 修改近几次的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><img src="/posts/897747710/1.png" class=""><p>得到如上的提交信息，值得注意的是： 提交信息是倒叙排列的</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>我们将需要修改的那条记录前面的pick 修改成edit</p><img src="/posts/897747710/2.png" class=""><img src="/posts/897747710/3.png" class=""><p>得到如下结果</p><img src="/posts/897747710/4.png" class=""><p>然后按着做就行了<br>如果想修改用户邮箱<br>则执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">&quot;user &lt;email@outlook.com&gt;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p>如果哪里写错了，则执行 git rebase –abort 重来一遍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><p>参考资料<a href="https://www.jianshu.com/p/0f1fbd50b4be">https://www.jianshu.com/p/0f1fbd50b4be</a><br>参考资料<a href="https://blog.csdn.net/furzoom/article/details/90670893">https://blog.csdn.net/furzoom/article/details/90670893</a><br>参考资料<a href="https://cloud.tencent.com/developer/article/1352623">https://cloud.tencent.com/developer/article/1352623</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除safari浏览器自带title</title>
      <link href="/posts/2443708596/"/>
      <url>/posts/2443708596/</url>
      
        <content type="html"><![CDATA[<p>去除safari浏览器自带title<br><a href="http://blog.sina.com.cn/s/blog_69ec42d50102ywqf.html">http://blog.sina.com.cn/s/blog_69ec42d50102ywqf.html</a><br><a href="https://stackoverflow.com/questions/20974276/prevent-safari-from-showing-tooltip-when-text-overflow-is-hidden-with-ellipsis">https://stackoverflow.com/questions/20974276/prevent-safari-from-showing-tooltip-when-text-overflow-is-hidden-with-ellipsis</a></p><span id="more"></span><p>safari浏览器在文本溢出时会非常智能的添加一个title用于提示体验，<br>但是有时候我们自定义了title，不需要自带的title时就可以使用以下2种方式来屏蔽自带title,并且不与正常的title属性冲突</p><h3 id="1-空div法"><a href="#1-空div法" class="headerlink" title="1 空div法"></a>1 空div法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    你是从石头里蹦出来的吧，你总是忧虑，因为几万年来沉寂的你还在害怕那林间飞速的跳跃，千百万扑面而来的事物，本篇文章来自资料管理下载。而你知道你能如此自由的掌握自己的时间是极短暂的，你能感受到自己这样思考的时间是极短暂的，为了这短暂的时光，你要尽力的去抓住你所遇见的。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考来源：<a href="http://blog.sina.com.cn/s/blog_69ec42d50102ywqf.html">http://blog.sina.com.cn/s/blog_69ec42d50102ywqf.html</a></p><h3 id="2-before-after法"><a href="#2-before-after法" class="headerlink" title="2 before,after法"></a>2 before,after法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考来源：<a href="https://stackoverflow.com/questions/20974276/prevent-safari-from-showing-tooltip-when-text-overflow-is-hidden-with-ellipsis">https://stackoverflow.com/questions/20974276/prevent-safari-from-showing-tooltip-when-text-overflow-is-hidden-with-ellipsis</a></p>]]></content>
      
      
      <categories>
          
          <category> 兼容性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css/css书写模式</title>
      <link href="/posts/3871472345/"/>
      <url>/posts/3871472345/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.w3cplus.com/css/css-writing-modes.html">https://www.w3cplus.com/css/css-writing-modes.html</a><br><a href="https://www.w3cplus.com/css3/vertical-typesetting-revisited.html">https://www.w3cplus.com/css3/vertical-typesetting-revisited.html</a></p><span id="more"></span><p><a href="https://www.w3cplus.com/css/css-overflow-module.html">你所不知道的CSS Overflow Module_CSS, overflow, text-overflow</a><br><a href="https://www.w3cplus.com/css/css-writing-modes.html">CSS书写模式</a><br><a href="https://www.w3cplus.com/css3/vertical-typesetting-revisited.html">CSS的逻辑属性对盒模型带来的变化</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; </span><br><span class="line">    <span class="attribute">writing-mode</span>: horizontal-tb; <span class="comment">/* 水平方向自上而下的书写方式。即 left-right-top-bottom */</span></span><br><span class="line">    <span class="attribute">writing-mode</span>: vertical-rl; <span class="comment">/* 垂直方向自右而左的书写方式。即 top-bottom-right-left */</span></span><br><span class="line">    <span class="attribute">writing-mode</span>: vertical-lr; <span class="comment">/* 垂直方向内内容从上到下，水平方向从左到右 */</span></span><br><span class="line">    <span class="attribute">writing-mode</span>: sideways-rl; <span class="comment">/* 内容垂直方向从上到下排列 */</span></span><br><span class="line">    <span class="attribute">writing-mode</span>: sideways-lr; <span class="comment">/* 内容垂直方向从下到上排列 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文本溢出方向依赖 direction: rtl | ltr</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dir</span>=<span class="string">rtl</span>&gt;</span>1234567890<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用text-overflow属性实现单行文本溢出添加省略号需满足下面相关条件：</p><p>1 该元素必须为 display:block 或者 display:inline-block 元素（或者功能对等，比如Flex项目）<br>2 元素必须得设置了width、max-width或flex-basis<br>3 该元素必须设置 overflow: hidden | scroll | auto<br>4 文本溢出方向依赖 direction: rtl | ltr 属性<br>5 整行溢出依赖 white-space: nowrap 属性</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>svg-radialGradient-径向渐变</title>
      <link href="/posts/651820336/"/>
      <url>/posts/651820336/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/radialGradient">官方文档</a></p><span id="more"></span><p>radialGradient 用来定义径向渐变，以对图形元素进行填充或描边。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;220&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;PadGradient&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">x1</span>=<span class="string">&quot;33%&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;67%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;fuchsia&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;orange&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;ReflectGradient&quot;</span> <span class="attr">spreadMethod</span>=<span class="string">&quot;reflect&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">x1</span>=<span class="string">&quot;33%&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;67%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;fuchsia&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;orange&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;RepeatGradient&quot;</span> <span class="attr">spreadMethod</span>=<span class="string">&quot;repeat&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">x1</span>=<span class="string">&quot;33%&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;67%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;fuchsia&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;orange&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#PadGradient)&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#ReflectGradient)&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#RepeatGradient)&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="sbhssdkal109032"></div><script>  var a = `<svg width="220" height="150">  <defs>    <linearGradient id="PadGradient"                    x1="33%" x2="67%">      <stop offset="0%"  stop-color="fuchsia"/>      <stop offset="100%" stop-color="orange"/>    </linearGradient>    <linearGradient id="ReflectGradient" spreadMethod="reflect"                    x1="33%" x2="67%">      <stop offset="0%"  stop-color="fuchsia"/>      <stop offset="100%" stop-color="orange"/>    </linearGradient>    <linearGradient id="RepeatGradient" spreadMethod="repeat"                    x1="33%" x2="67%">      <stop offset="0%"  stop-color="fuchsia"/>      <stop offset="100%" stop-color="orange"/>    </linearGradient>  </defs> <p>  <rect fill="url(#PadGradient)"          x="10" y="0" width="200" height="40"/><br>  <rect fill="url(#ReflectGradient)"          x="10" y="50" width="200" height="40"/><br>  <rect fill="url(#RepeatGradient)"          x="10" y="100" width="200" height="40"/><br></svg><br>&#96;;<br>  sbhssdkal109032.innerHTML &#x3D; a<br></script></p><h3 id="spreadMethod控制不同方式渐变"><a href="#spreadMethod控制不同方式渐变" class="headerlink" title="spreadMethod控制不同方式渐变"></a>spreadMethod控制不同方式渐变</h3><ul><li>pad </li><li>reflect </li><li>repeat 重复</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;340&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialPadGradient&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">cx</span>=<span class="string">&quot;75%&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">r</span>=<span class="string">&quot;33%&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">fx</span>=<span class="string">&quot;64%&quot;</span> <span class="attr">fy</span>=<span class="string">&quot;18%&quot;</span> <span class="attr">fr</span>=<span class="string">&quot;17%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;fuchsia&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;orange&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialReflectGradient&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">spreadMethod</span>=<span class="string">&quot;reflect&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">cx</span>=<span class="string">&quot;75%&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">r</span>=<span class="string">&quot;33%&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">fx</span>=<span class="string">&quot;64%&quot;</span> <span class="attr">fy</span>=<span class="string">&quot;18%&quot;</span> <span class="attr">fr</span>=<span class="string">&quot;17%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;fuchsia&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;orange&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialRepeatGradient&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">spreadMethod</span>=<span class="string">&quot;repeat&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">cx</span>=<span class="string">&quot;75%&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">r</span>=<span class="string">&quot;33%&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">fx</span>=<span class="string">&quot;64%&quot;</span> <span class="attr">fy</span>=<span class="string">&quot;18%&quot;</span> <span class="attr">fr</span>=<span class="string">&quot;17%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;fuchsia&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;orange&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#RadialPadGradient)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#RadialReflectGradient)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x</span>=<span class="string">&quot;120&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#RadialRepeatGradient)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x</span>=<span class="string">&quot;230&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div id="sbhssdkal109033"></div><script>  var b = `<svg width="340" height="120" xmlns="http://www.w3.org/2000/svg">  <defs>   <radialGradient id="RadialPadGradient"                    cx="75%" cy="25%" r="33%"                     fx="64%" fy="18%" fr="17%">      <stop offset="0%"  stop-color="fuchsia"/>      <stop offset="100%" stop-color="orange"/>    </radialGradient>    <radialGradient id="RadialReflectGradient"                    spreadMethod="reflect"                    cx="75%" cy="25%" r="33%"                     fx="64%" fy="18%" fr="17%">      <stop offset="0%"  stop-color="fuchsia"/>      <stop offset="100%" stop-color="orange"/>    </radialGradient>    <radialGradient id="RadialRepeatGradient"                    spreadMethod="repeat"                    cx="75%" cy="25%" r="33%"                     fx="64%" fy="18%" fr="17%">      <stop offset="0%"  stop-color="fuchsia"/>      <stop offset="100%" stop-color="orange"/>    </radialGradient>  </defs> <p>  <rect fill="url(#RadialPadGradient)"        x="10" y="10" width="100" height="100"/><br>  <rect fill="url(#RadialReflectGradient)"        x="120" y="10" width="100" height="100"/><br>  <rect fill="url(#RadialRepeatGradient)"        x="230" y="10" width="100" height="100"/><br></svg><br>&#96;;<br>  sbhssdkal109033.innerHTML &#x3D; b<br></script></p>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg-linearGradient-线性渐变</title>
      <link href="/posts/1946736650/"/>
      <url>/posts/1946736650/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/linearGradient">官方文档</a></p><span id="more"></span><p>linearGradient元素用来定义线性渐变，用于图形元素的填充或描边。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span>  <span class="attr">viewBox</span>=<span class="string">&quot;0 0 120 120&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;MyGradient&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;5%&quot;</span>  <span class="attr">stop-color</span>=<span class="string">&quot;green&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;gold&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;url(#MyGradient)&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="sbhssdkal109032"></div><script>  var a = `<svg width="120" height="120"  viewBox="0 0 120 120">    <defs>        <linearGradient id="MyGradient">            <stop offset="5%"  stop-color="green"/>            <stop offset="95%" stop-color="gold"/>        </linearGradient>    </defs>    <rect fill="url(#MyGradient)"          x="10" y="10" width="100" height="100"/></svg>`;  sbhssdkal109032.innerHTML = a</script><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>一个渐变上的颜色坡度，是用stop元素定义的。<br>stop元素可以是<linearGradient>元素或者<radialGradient>元素的子元素。</p>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg-symbol-图形模板对象</title>
      <link href="/posts/4077144925/"/>
      <url>/posts/4077144925/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/symbol">官方文档</a></p><span id="more"></span><p>symbol元素用来定义一个图形模板对象，它可以用一个<use>元素实例化。symbol元素对图形的作用是在同一文档中多次使用，添加结构和语义。结构丰富的文档可以更生动地呈现出来，类似讲演稿或盲文，从而提升了可访问性。注意，一个symbol元素本身是不呈现的。只有symbol元素的实例（亦即，一个引用了symbol的 <use>元素）才能呈现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;sym01&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 150 110&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span> <span class="attr">r</span>=<span class="string">&quot;40&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;8&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;90&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;60&quot;</span> <span class="attr">r</span>=<span class="string">&quot;40&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;8&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;green&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#sym01&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#sym01&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75&quot;</span> <span class="attr">height</span>=<span class="string">&quot;38&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#sym01&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="sbhssdkal109032"></div><script>  var a = `<svg><symbol id="sym01" viewBox="0 0 150 110">  <circle cx="50" cy="50" r="40" stroke-width="8" stroke="red" fill="red"/>  <circle cx="90" cy="60" r="40" stroke-width="8" stroke="green" fill="white"/></symbol><p><use xlink:href="#sym01"     x="0" y="0" width="100" height="50"/><br><use xlink:href="#sym01"     x="0" y="50" width="75" height="38"/><br><use xlink:href="#sym01"     x="0" y="100" width="50" height="25"/><br></svg><br>&#96;;<br>  sbhssdkal109032.innerHTML &#x3D; a<br></script></p>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg-pattern-描边填充</title>
      <link href="/posts/290820026/"/>
      <url>/posts/290820026/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/pattern">官方文档</a></p><span id="more"></span><p>使用预定义的图形对一个对象进行填充或描边，就要用到pattern元素。pattern元素让预定义图形能够以固定间隔在x轴和y轴上重复（或平铺）从而覆盖要涂色的区域。先使用pattern元素定义图案，然后在给定的图形元素上用属性fill或属性stroke引用用来填充或描边的图案。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 120 120&quot;</span>&quot;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">&quot;Triangle&quot;</span> <span class="attr">width</span>=<span class="string">&quot;10&quot;</span> <span class="attr">height</span>=<span class="string">&quot;10&quot;</span> <span class="attr">patternUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;10,0 10,10 0,10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;60&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;60&quot;</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#Triangle)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="sbhssdkal109032"></div><script>  var a = `  <svg width="120" height="120" viewBox="0 0 120 120"">    <defs>        <pattern id="Triangle" width="10" height="10" patternUnits="userSpaceOnUse">            <polygon points="10,0 10,10 0,10"/>        </pattern>    </defs>    <circle cx="60" cy="60" r="50" fill="url(#Triangle)"/></svg>`;  sbhssdkal109032.innerHTML = a</script>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg-marker绘制的箭头</title>
      <link href="/posts/3040464329/"/>
      <url>/posts/3040464329/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/marker">官方文档</a></p><span id="more"></span><p>marker元素定义了在特定的<path>元素、<line>元素、<polyline>元素或者<polygon>元素上绘制的箭头或者多边标记图形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 120 120&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">marker</span> <span class="attr">id</span>=<span class="string">&quot;Triangle&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 10 10&quot;</span> <span class="attr">refX</span>=<span class="string">&quot;1&quot;</span> <span class="attr">refY</span>=<span class="string">&quot;5&quot;</span> <span class="attr">markerWidth</span>=<span class="string">&quot;6&quot;</span> <span class="attr">markerHeight</span>=<span class="string">&quot;6&quot;</span> <span class="attr">orient</span>=<span class="string">&quot;auto&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 0 0 L 10 5 L 0 10 z&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">marker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;10,90 50,80 90,20&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">marker-end</span>=<span class="string">&quot;url(#Triangle)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="sbhssdkal109032"></div><script>  var a = `<svg >    <defs>        <marker id="Triangle" viewBox="0 0 10 10" refX="1" refY="5" markerWidth="6" markerHeight="6" orient="auto">            <path d="M 0 0 L 10 5 L 0 10 z" />        </marker>    </defs>    <polyline points="10,90 50,80 90,20" fill="none" stroke="black" stroke-width="2" marker-end="url(#Triangle)" /></svg>`;  sbhssdkal109032.innerHTML = a</script>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg-动画路径,轨迹移动,变幻</title>
      <link href="/posts/21984/"/>
      <url>/posts/21984/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/animateMotion">官方文档 animateMotion</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/animateTransform">官方文档 animateTransform</a></p><span id="more"></span><h3 id="animateMotion"><a href="#animateMotion" class="headerlink" title="animateMotion"></a>animateMotion</h3><p>animateMotion元素导致引用的元素沿着运动路径移动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span>  <span class="attr">viewBox</span>=<span class="string">&quot;0 0 120 120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M10,110 A120,120 -45 0,1 110 10 A120,120 -45 0,1 10,110&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stroke</span>=<span class="string">&quot;lightgrey&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">id</span>=<span class="string">&quot;theMotionPath&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;110&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;lightgrey&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;110&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;10&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;lightgrey&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;5&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateMotion</span> <span class="attr">dur</span>=<span class="string">&quot;6s&quot;</span> <span class="attr">repeatCount</span>=<span class="string">&quot;indefinite&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mpath</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#theMotionPath&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">animateMotion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="dakjlsdas90312j1"></div><script>    var svgstr = `<svg width="120" height="120"  viewBox="0 0 120 120"    xmlns="http://www.w3.org/2000/svg" version="1.1"    xmlns:xlink="http://www.w3.org/1999/xlink" >    <path d="M10,110 A120,120 -45 0,1 110 10 A120,120 -45 0,1 10,110"        stroke="lightgrey" stroke-width="2"         fill="none" id="theMotionPath"/>    <circle cx="10" cy="110" r="3" fill="lightgrey"  />    <circle cx="110" cy="10" r="3" fill="lightgrey"  />    <circle cx="" cy="" r="5" fill="red">        <animateMotion dur="6s" repeatCount="indefinite">            <mpath xlink:href="#theMotionPath"/>        </animateMotion>    </circle></svg>`dakjlsdas90312j1.innerHTML = svgstr;</script><h3 id="animateTransform"><a href="#animateTransform" class="headerlink" title="animateTransform"></a>animateTransform</h3><p>animateTransform元素变动了目标元素上的一个变形属性，从而允许动画控制转换、缩放、旋转或斜切。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 120 120&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;60,30 90,90 30,90&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animateTransform</span> <span class="attr">attributeName</span>=<span class="string">&quot;transform&quot;</span> <span class="attr">attributeType</span>=<span class="string">&quot;XML&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rotate&quot;</span> <span class="attr">from</span>=<span class="string">&quot;0 60 70&quot;</span> <span class="attr">to</span>=<span class="string">&quot;360 60 70&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">dur</span>=<span class="string">&quot;10s&quot;</span> <span class="attr">repeatCount</span>=<span class="string">&quot;indefinite&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">polygon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="dakjlsdasj1"></div><script>    var svgstr2 = `<svg width="120" height="120" viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg" version="1.1"    xmlns:xlink="http://www.w3.org/1999/xlink">    <polygon points="60,30 90,90 30,90">        <animateTransform attributeName="transform" attributeType="XML" type="rotate" from="0 60 70" to="360 60 70"            dur="10s" repeatCount="indefinite" ></animateTransform>    </polygon></svg>`dakjlsdasj1.innerHTML = svgstr2;</script>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg-animate元素说明</title>
      <link href="/posts/22764/"/>
      <url>/posts/22764/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/animate">官方文档</a></p><span id="more"></span><p>SVG 元素中的动画元素，用来描述某一个属性的动画过程</p><p><strong>官方描述</strong></p><blockquote><p>动画元素放在形状元素的内部，用来定义一个元素的某个属性如何踩着时点改变。在指定持续时间里，属性从开始值变成结束值。</p></blockquote><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><ul><li><a href="#attributeName">attributeName</a></li><li><a href="#attributeType">attributeType</a></li><li><a href="#from">from to</a></li><li><a href="#dur">dur</a></li><li><a href="#repeatCount">repeatCount</a></li></ul><h4 id="AttributeName-动画的属性名"><a href="#AttributeName-动画的属性名" class="headerlink" title="AttributeName 动画的属性名"></a><a name="attributeName">AttributeName</a> 动画的属性名</h4><p>该属性标识了在一个动画动作环节中，父元素的需要被改变的属性名。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeType</span>=<span class="string">&quot;XML&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">attributeName</span>=<span class="string">&quot;y&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">from</span>=<span class="string">&quot;0&quot;</span> <span class="attr">to</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">dur</span>=<span class="string">&quot;5s&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 比如这里的y，就是对矩形的长对象一个变化，从0增加到50 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="attributeType"><a href="#attributeType" class="headerlink" title="attributeType"></a><a name="attributeType">attributeType</a></h4><p>该属性指定目标属性和它相对应的值处于哪个命名空间里。<br>可取值有<br><code>CSS</code> <code>XML</code> <code>auto</code></p><p><strong>CSS</strong><br>指定attributeName的值是一个CSS属性名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">viewPort</span>=<span class="string">&quot;0 0 120 120&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeType</span>=<span class="string">&quot;CSS&quot;</span> <span class="attr">attributeName</span>=<span class="string">&quot;fill&quot;</span> <span class="attr">from</span>=<span class="string">&quot;red&quot;</span> <span class="attr">to</span>=<span class="string">&quot;green&quot;</span> <span class="attr">dur</span>=<span class="string">&quot;10s&quot;</span> <span class="attr">repeatCount</span>=<span class="string">&quot;indefinite&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将填充色从 red 变到 green --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>XML</strong><br>指定attributeName的值是一个XML属性名，在目标元素的默认XML命名空间里。<br>其实就是元素属性，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">viewPort</span>=<span class="string">&quot;0 0 120 120&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeType</span>=<span class="string">&quot;XML&quot;</span> <span class="attr">attributeName</span>=<span class="string">&quot;x&quot;</span> <span class="attr">from</span>=<span class="string">&quot;0&quot;</span> <span class="attr">to</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dur</span>=<span class="string">&quot;10s&quot;</span> <span class="attr">repeatCount</span>=<span class="string">&quot;indefinite&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将x坐标从 0 变到 100 --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>auto</strong><br>编译器将把attributeName匹配到目标元素的一个属性。用户代理先搜索CSS属性列表以找出一个匹配的属性名，如果找不到，再为这个元素搜索默认XML命名空间。</p><h4 id="from-to"><a href="#from-to" class="headerlink" title="from to"></a><a name="from">from to</a></h4><p>这个属性是在svg动画发生过程中被修改的属性的初始值。<br>当同时使用了这个属性和  to 属性, animation将会修改这个这个设定的动画属性的值从from属性的值到to属性的值。</p><h4 id="dur"><a href="#dur" class="headerlink" title="dur"></a><a name="dur">dur</a></h4><p>该属性标识了动画的简单持续时间。<br>可选值有<br><code>clock-value</code> | <code>indefinite</code></p><p><strong>clock-value</strong><br>指定简单持续时间的时长。值必须大于0。可以用小时（h）、分钟（m）、秒（s）、毫秒（ms）表达这个值。<br>可以组合这些时间表达式以提供一个复合的持续时间，比如这样：hh:mm:ss.iii或者这样：mm:ss.iii。</p><p><strong>indefinite</strong><br>不发生改变</p><h4 id="repeatCount"><a href="#repeatCount" class="headerlink" title="repeatCount"></a><a name="repeatCount">repeatCount</a></h4><p>这个属性表示动画将发生的次数。<br>这个属性的值指定了重复的次数。它也可以包括用分数值表示。它的值必须大于0。<br><code>number</code> | <code>indefinite</code></p>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg animate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular-ngstyle-奇妙的单位绑定</title>
      <link href="/posts/1870441517/"/>
      <url>/posts/1870441517/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.angular.cn/guide/template-syntax#style-binding">官方文档-样式绑定</a></p><span id="more"></span><img src="/posts/1870441517/D0Y5povUYAE8478.jpg" class=""><blockquote><p>注意，样式属性命名方法可以用中线命名法，像上面的一样 也可以用驼峰式命名法，如 fontSize。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewChild ContentChild 系列的查询参数</title>
      <link href="/posts/25813/"/>
      <url>/posts/25813/</url>
      
        <content type="html"><![CDATA[<p>ViewChild ContentChild 系列的查询参数，可以灵活的获得对应实例</p><span id="more"></span><h3 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h3><p>在调用 NgAfterViewInit 回调函数之前就会设置这些视图查询。<br>元数据属性：</p><ul><li>selector - 用于查询的指令类型或名字。</li><li>read - 从查询到的元素中读取另一个令牌。</li></ul><p>所支持的选择器包括：</p><ul><li>任何带有 @Component 或 @Directive 装饰器的类</li><li>字符串形式的模板引用变量（比如可以使用 @ViewChild(‘cmp’) 来查询 &lt;my-component #cmp&gt;</my-component></li><li>组件树中任何当前组件的子组件所定义的提供商（比如 @ViewChild(SomeService) someService: SomeService ）</li><li>任何通过字符串令牌定义的提供商（比如 @ViewChild(‘someToken’) someTokenVal: any ）</li><li>TemplateRef（比如可以用 @ViewChild(TemplateRef) template; 来查询 <ng-template></ng-template>）</li></ul><p>代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> #<span class="attr">testBox</span> [<span class="attr">appElementTitle</span>]=<span class="string">&quot;&#x27;属性指令测试&#x27;&quot;</span> [<span class="attr">appCopyAttr</span>]=<span class="string">&quot;&#x27;https://liangyuetian.cn/&#x27;&quot;</span>&gt;</span></span><br><span class="line">    appElementTitle 属性指令测试 appCopyAttr 属性指令测试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> #<span class="attr">box</span> [<span class="attr">appElementTitle</span>]=<span class="string">&quot;&#x27;这是box的title&#x27;&quot;</span> [<span class="attr">appCopyAttr</span>]=<span class="string">&quot;&#x27;https://baidu.com.cn/&#x27;&quot;</span>&gt;</span></span><br><span class="line">    appElementTitle 属性指令测试 appCopyAttr 属性指令测试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">AfterViewInit</span> &#123;</span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;testBox&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">ElementRef</span>&#125;) <span class="attr">elBox</span>: <span class="title class_">ElementRef</span>;</span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;testBox&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">CopyAttrDirective</span>&#125;) <span class="attr">copy</span>: <span class="title class_">CopyAttrDirective</span>;</span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;testBox&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">ElementTitleDirective</span>&#125;) <span class="attr">titles</span>: <span class="title class_">ElementTitleDirective</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;box&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">ElementRef</span>&#125;) <span class="attr">elBox2</span>: <span class="title class_">ElementRef</span>;</span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;box&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">CopyAttrDirective</span>&#125;) <span class="attr">copy2</span>: <span class="title class_">CopyAttrDirective</span>;</span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;box&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">ElementTitleDirective</span>&#125;) <span class="attr">titles2</span>: <span class="title class_">ElementTitleDirective</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">keyUpSearch</span>(<span class="params">$event: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>($event.<span class="property">code</span>, $event.<span class="property">key</span>, $event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one&#x27;</span>, <span class="variable language_">this</span>.<span class="property">elBox</span>, <span class="variable language_">this</span>.<span class="property">copy</span>, <span class="variable language_">this</span>.<span class="property">titles</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tow&#x27;</span>, <span class="variable language_">this</span>.<span class="property">elBox2</span>, <span class="variable language_">this</span>.<span class="property">copy2</span>, <span class="variable language_">this</span>.<span class="property">titles2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><img src="/posts/25813/Snipaste_2019-04-03_23-16-11.png" class="">]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angualr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-禁止响应式监听 Object.freeze</title>
      <link href="/posts/10984/"/>
      <url>/posts/10984/</url>
      
        <content type="html"><![CDATA[<p>vue-禁止响应式监听<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"><code>Object.freeze</code></a></p><span id="more"></span><p><a href="https://cn.vuejs.org/v2/guide/instance.html#%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%96%B9%E6%B3%95">官方文档位置</a></p><h3 id="Object-freeze-简洁"><a href="#Object-freeze-简洁" class="headerlink" title="Object.freeze 简洁"></a>Object.freeze 简洁</h3><p>Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">property1</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(object1);</span><br><span class="line"></span><br><span class="line">object2.<span class="property">property1</span> = <span class="number">33</span>;</span><br><span class="line"><span class="comment">// Throws an error in strict mode</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2.<span class="property">property1</span>);</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br></pre></td></tr></table></figure><h3 id="冻结非常量，浅冻结"><a href="#冻结非常量，浅冻结" class="headerlink" title="冻结非常量，浅冻结"></a>冻结非常量，浅冻结</h3><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj1 = &#123;</span><br><span class="line">  <span class="attr">internal</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj1);</span><br><span class="line">obj1.<span class="property">internal</span>.<span class="property">a</span> = <span class="string">&#x27;aValue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">internal</span>.<span class="property">a</span> <span class="comment">// &#x27;aValue&#x27;</span></span><br></pre></td></tr></table></figure><p>对于一个常量对象，整个引用图（直接和间接引用其他对象）只能引用不可变的冻结对象。冻结的对象被认为是不可变的，因为整个对象中的整个对象状态（对其他对象的值和引用）是固定的。注意，字符串，数字和布尔总是不可变的，而函数和数组是对象。</p><p>要使对象不可变，需要递归冻结每个类型为对象的属性（深冻结）。当你知道对象在引用图中不包含任何 环 (循环引用)时，将根据你的设计逐个使用该模式，否则将触发无限循环。对 deepFreeze()  的增强将是具有接收路径（例如Array）参数的内部函数，以便当对象进入不变时，可以递归地调用 deepFreeze() 。你仍然有冻结不应冻结的对象的风险，例如[window]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深冻结函数.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepFreeze</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取回定义在obj上的属性名</span></span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在冻结自身之前冻结属性</span></span><br><span class="line">  propNames.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> prop = obj[name];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果prop是个对象，冻结它</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> prop == <span class="string">&#x27;object&#x27;</span> &amp;&amp; prop !== <span class="literal">null</span>)</span><br><span class="line">      <span class="title function_">deepFreeze</span>(prop);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 冻结自身(no-op if already frozen)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj2 = &#123;</span><br><span class="line">  <span class="attr">internal</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">deepFreeze</span>(obj2);</span><br><span class="line">obj2.<span class="property">internal</span>.<span class="property">a</span> = <span class="string">&#x27;anotherValue&#x27;</span>;</span><br><span class="line">obj2.<span class="property">internal</span>.<span class="property">a</span>; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="对比-Object-seal"><a href="#对比-Object-seal" class="headerlink" title="对比 Object.seal()"></a>对比 Object.seal()</h3><p>用Object.seal()密封的对象可以改变它们现有的属性。使用Object.freeze() 冻结的对象中现有属性是不可变的。<br>密封对象特点</p><ul><li>不能添加新的属性</li><li>不能删除已有属性</li><li>*以及不能修改已有属性的可枚举性、可配置性、可写性</li><li><strong>可以</strong>修改已有属性的值的对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular - ngTemplateOutlet 与 ContenChildren</title>
      <link href="/posts/2947722764/"/>
      <url>/posts/2947722764/</url>
      
        <content type="html"><![CDATA[<p>angular ContentChild 与 ContenChildren 使用方法<br><a href="https://www.angular.cn/api/core/ContentChild">官网文档 ContentChild</a><br><a href="https://www.angular.cn/api/core/ContentChildren">官网文档 ContentChildren</a><br><a href="https://www.angular.cn/api/core/QueryList">官网文档 QueryList</a></p><span id="more"></span><h3 id="首先介绍-ngTemplateOutlet"><a href="#首先介绍-ngTemplateOutlet" class="headerlink" title="首先介绍 ngTemplateOutlet"></a>首先介绍 ngTemplateOutlet</h3><p>官方说法：根据一个提前备好的 TemplateRef 插入一个内嵌视图。<br>个人理解，就是将被<code>ng-template</code>标签包裹的元素渲染到某一个地方，一个更细粒度的内容投影（ng-content）<br>比如常规使用方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ng-template-outlet-example&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;ng-container *ngTemplateOutlet=&quot;greet; context: myContext&quot;&quot;&gt;&lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- ng-container 只是一个容器，常用与分组，不渲染到页面上，很安全 --&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- 注意不要跟 ng-content 弄混，ng-content是内容投影 --&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- ngTemplateOutlet可以具有自己的定义域 可以用angular特殊的content语法来定义；跟vue的作用于插槽作用相同  --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;ng-template #greet&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- ng-template 是定义一组模板，可以通过ViewChild获取实例(TemplateRef) --&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgTemplateOutletExample</span> &#123;</span><br><span class="line">    myContext = &#123;<span class="attr">$implicit</span>: <span class="string">&#x27;World&#x27;</span>, <span class="attr">localSk</span>: <span class="string">&#x27;Svet&#x27;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常规的用法！！<br>那如果这个<code>ng-template</code>标签是用户定义的呢，比如从父组件传入</p><h3 id="ContentChild-与-ngTemplateOutlet"><a href="#ContentChild-与-ngTemplateOutlet" class="headerlink" title="ContentChild 与 ngTemplateOutlet"></a>ContentChild 与 ngTemplateOutlet</h3><p>ContentChild 用于获取从父组件传入的模板，ngTemplateOutlet用于将模板显示到视图中</p><p>不得不说，从这里就可以看出anglar的api设计真的非常颗粒化，任意组合，功能复杂的同时也不失灵活度</p><p>写法如下</p><h4 id="首先-定义子组件"><a href="#首先-定义子组件" class="headerlink" title="首先 定义子组件"></a>首先 定义子组件</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">Component</span>,</span><br><span class="line">    <span class="title class_">OnInit</span>,</span><br><span class="line">    <span class="title class_">AfterViewInit</span>,</span><br><span class="line">    <span class="title class_">ContentChild</span>,</span><br><span class="line">    <span class="title class_">TemplateRef</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;order-list&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;ng-container *ngTemplateOutlet=&quot;template; context: myContext&quot;&gt;&lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">            &lt;!-- 这里的template只是变量名，与class中对应 --&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderListComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">AfterViewInit</span> &#123;</span><br><span class="line">    myContext = &#123;<span class="attr">$implicit</span>: <span class="string">&#x27;World&#x27;</span>, <span class="attr">localSk</span>: <span class="string">&#x27;Svet&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContentChild</span>(<span class="title class_">TemplateRef</span>, &#123;<span class="attr">read</span>: <span class="title class_">TemplateRef</span>&#125;) <span class="attr">template</span>: <span class="title class_">TemplateRef</span>&lt;&#123; <span class="attr">$implicit</span>: <span class="built_in">number</span>; <span class="attr">timer</span>: <span class="built_in">number</span> &#125;&gt;;</span><br><span class="line">    <span class="comment">// 只需一行</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;template:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">template</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其次-父组件使用"><a href="#其次-父组件使用" class="headerlink" title="其次 父组件使用"></a>其次 父组件使用</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">Component</span>,</span><br><span class="line">    <span class="title class_">OnInit</span>,</span><br><span class="line">    <span class="title class_">AfterViewInit</span>,</span><br><span class="line">    <span class="title class_">ContentChild</span>,</span><br><span class="line">    <span class="title class_">TemplateRef</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;order-list&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;order-list&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-template let-person=&quot;localSk&quot;&gt;&lt;span&gt;Ahoy0 &#123;&#123;person&#125;&#125;!&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">                &lt;!-- 没错，这里只能使用ng-template包裹，因为ngTemplateOutlet只是获取模板的，如果是组件的话，有更好用的方案--&gt;</span></span><br><span class="line"><span class="string">            &lt;/order-list&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderListComponent</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>特别简单，核心只有3部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件模板定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;greet; context: myContext&quot;</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件 获取未来模板</span></span><br><span class="line"><span class="meta">@ContentChild</span>(<span class="title class_">TemplateRef</span>, &#123;<span class="attr">read</span>: <span class="title class_">TemplateRef</span>&#125;) <span class="attr">template</span>: <span class="title class_">TemplateRef</span>&lt;&#123; <span class="attr">$implicit</span>: <span class="built_in">number</span>; <span class="attr">timer</span>: <span class="built_in">number</span> &#125;&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">order-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">let-person</span>=<span class="string">&quot;localSk&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Ahoy0 &#123;&#123;person&#125;&#125;!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">order-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ContentChildren-与-ngTemplateOutlet"><a href="#ContentChildren-与-ngTemplateOutlet" class="headerlink" title="ContentChildren 与 ngTemplateOutlet"></a>ContentChildren 与 ngTemplateOutlet</h3><p>目前ContentChild只能接受一个<code>ng-template</code>组件，那么想写多个怎么办<br>于是，ContentChildren出现了</p><h4 id="子组件中"><a href="#子组件中" class="headerlink" title="子组件中"></a>子组件中</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ng-template-outlet-example&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div *ngFor=&quot;let template of templates&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;ng-container *ngTemplateOutlet=&quot;template; context: myContext&quot;&gt;&lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- for 循环，哈哈 --&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgTemplateOutletExample</span> &#123;</span><br><span class="line">    myContext = &#123;<span class="attr">$implicit</span>: <span class="string">&#x27;World&#x27;</span>, <span class="attr">localSk</span>: <span class="string">&#x27;Svet&#x27;</span>&#125;;</span><br><span class="line">    <span class="meta">@ContentChildren</span>(<span class="title class_">TemplateRef</span>, &#123;<span class="attr">read</span>: <span class="title class_">TemplateRef</span>&#125;) templates !: <span class="title class_">QueryList</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">    <span class="comment">// ContentChildren可以将ng-template解析为一个数组，类型是QueryList，是一个塞满TemplateRef的集合，可以使用for of 来遍历</span></span><br><span class="line">    <span class="comment">// 也可以使用使用 templates.forEach templates.map 来遍历，支持常用的数组方法，如：map filte find reduce forEach some</span></span><br><span class="line">    <span class="comment">// 也可以使用  templates.toArray() templates.toString() 来转化成数组或者字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;order-list&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;order-list&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-template let-person=&quot;localSk&quot;&gt;&lt;span&gt;Ahoy0 &#123;&#123;person&#125;&#125;!&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-template let-person=&quot;localSk&quot;&gt;&lt;span&gt;Ahoy1 &#123;&#123;person&#125;&#125;!&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-template let-person=&quot;localSk&quot;&gt;&lt;span&gt;Ahoy2 &#123;&#123;person&#125;&#125;!&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-template let-person=&quot;localSk&quot;&gt;&lt;span&gt;Ahoy3 &#123;&#123;person&#125;&#125;!&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">                &lt;ng-template let-person=&quot;localSk&quot;&gt;&lt;span&gt;Ahoy4 &#123;&#123;person&#125;&#125;!&lt;/span&gt;&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">            &lt;/order-list&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderListComponent</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>核心代码为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContentChildren</span>(<span class="title class_">TemplateRef</span>, &#123;<span class="attr">read</span>: <span class="title class_">TemplateRef</span>&#125;) templates !: <span class="title class_">QueryList</span>&lt;<span class="built_in">any</span>&gt;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> ngTemplateOutlet </tag>
            
            <tag> ContenChildren </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-js获取伪元素(Pseudo-Element)属性</title>
      <link href="/posts/3901/"/>
      <url>/posts/3901/</url>
      
        <content type="html"><![CDATA[<p>用JavaScript获取伪元素(Pseudo-Element)属性的方法</p><span id="more"></span><p><a href="http://www.webhek.com/post/pseudo-element.html">http://www.webhek.com/post/pseudo-element.html</a></p><p>CSS伪元素(pseudo-elements)非常的有用——你可以用它制作出CSS三角形，用在提示框上面，还可以用它完成很多简单的任务，而不需要多余的HTML元素。以前，伪元素的CSS属性是无法用JavaScript获取的，但现在，有了一个新的JavaScript方法可以访问它们！ 假设你的CSS代码是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;NEW&#x27;</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了获取.element:before里的样式属性，你可以使用下面的JavaScript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.element&#x27;</span>), <span class="string">&#x27;:before&#x27;</span></span><br><span class="line">).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure><p>将伪元素作为window.getComputedStyle方法的第二个参数，你能获取到伪元素样式里的属性！将这个技巧放入你的知识库里，随着浏览器的发展，伪元素将会变得越来越有用！</p><blockquote><p>伪元素一个冒号两个冒号都是对的；两个冒号是css3的标准，用一个冒号是为了兼容低版本</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angular-表单验证</title>
      <link href="/posts/3477447017/"/>
      <url>/posts/3477447017/</url>
      
        <content type="html"><![CDATA[<p>表单验证<br><a href="https://www.angular.cn/guide/form-validation">https://www.angular.cn/guide/form-validation</a></p><span id="more"></span><h3 id="响应式表单验证"><a href="#响应式表单验证" class="headerlink" title="响应式表单验证"></a>响应式表单验证</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: [</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line">        [ <span class="comment">// 同步验证器</span></span><br><span class="line">            <span class="title class_">Validators</span>.<span class="property">required</span>,</span><br><span class="line">            <span class="title class_">Validators</span>.<span class="title function_">minLength</span>(<span class="number">4</span>),</span><br><span class="line">            (<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (control.<span class="property">value</span> === <span class="string">&#x27;wangchuang&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (control.<span class="property">value</span> === <span class="string">&#x27;大帅锅&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        [ <span class="comment">// 异步验证器，只有同步验证器执行完后才会执行异步</span></span><br><span class="line">            (<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈哈&#x27;</span>);</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (control.<span class="property">value</span> === <span class="string">&#x27;哈哈哈哈哈哈&#x27;</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">3000</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ] <span class="comment">// 第一项值是初始化值 第二项和第三项提供同步和异步验证器</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">profileForm = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line">        [ <span class="comment">// 同步验证器</span></span><br><span class="line">            <span class="title class_">Validators</span>.<span class="property">required</span>,</span><br><span class="line">            <span class="title class_">Validators</span>.<span class="title function_">minLength</span>(<span class="number">4</span>),</span><br><span class="line">            (<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (control.<span class="property">value</span> === <span class="string">&#x27;wangchuang&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (control.<span class="property">value</span> === <span class="string">&#x27;大帅锅&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        [ <span class="comment">// 异步验证器，只有同步验证器执行完后才会执行异步</span></span><br><span class="line">            (<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈哈&#x27;</span>);</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (control.<span class="property">value</span> === <span class="string">&#x27;哈哈哈哈哈哈&#x27;</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">3000</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ) <span class="comment">// 第一个值为初始值 第二个值为同步验证器，第三个值为异步验证器</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="添加到模板驱动表单-的-验证器"><a href="#添加到模板驱动表单-的-验证器" class="headerlink" title="添加到模板驱动表单 的 验证器"></a>添加到模板驱动表单 的 验证器</h3><p>在模板驱动表单中，你不用直接访问 FormControl 实例。所以不能像响应式表单中那样把验证器传进去，而应该在模板中添加一个指令。<br>Angular 在验证过程中能识别出指令的作用，是因为指令把自己注册成了 NG_VALIDATORS 提供商，该提供商拥有一组可扩展的验证器。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">providers</span>: [&#123;<span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>, <span class="attr">useExisting</span>: <span class="title class_">ForbiddenValidatorDirective</span>, <span class="attr">multi</span>: <span class="literal">true</span>&#125;]</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appForbiddenName]&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [&#123;<span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>, <span class="attr">useExisting</span>: <span class="title class_">ForbiddenValidatorDirective</span>, <span class="attr">multi</span>: <span class="literal">true</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ForbiddenValidatorDirective</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">&#x27;appForbiddenName&#x27;</span>) <span class="attr">forbiddenName</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">validate</span>(<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): &#123;[<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125; | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">forbiddenName</span> ? <span class="title function_">forbiddenNameValidator</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="variable language_">this</span>.<span class="property">forbiddenName</span>, <span class="string">&#x27;i&#x27;</span>))(control)</span><br><span class="line">                              : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">&quot;4&quot;</span> <span class="attr">appForbiddenName</span>=<span class="string">&quot;bob&quot;</span></span></span><br><span class="line"><span class="tag">      [(<span class="attr">ngModel</span>)]=<span class="string">&quot;hero.name&quot;</span> #<span class="attr">name</span>=<span class="string">&quot;ngModel&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>你可能注意到了自定义验证器指令是用 useExisting 而不是 useClass 来实例化的。注册的验证器必须是这个 ForbiddenValidatorDirective 实例本身，也就是表单中 forbiddenName 属性被绑定到了”bob”的那个。如果用 useClass 来代替 useExisting，就会注册一个新的类实例，而它是没有 forbiddenName 的。</p><h3 id="跨字段交叉验证。。。"><a href="#跨字段交叉验证。。。" class="headerlink" title="跨字段交叉验证。。。"></a>跨字段交叉验证。。。</h3><p><a href="https://www.angular.cn/guide/form-validation#cross-field-validation">https://www.angular.cn/guide/form-validation#cross-field-validation</a></p><h3 id="表示控件状态的-CSS-类"><a href="#表示控件状态的-CSS-类" class="headerlink" title="表示控件状态的 CSS 类"></a>表示控件状态的 CSS 类</h3><p>像 AngularJS 中一样，Angular 会自动把很多控件属性作为 CSS 类映射到控件所在的元素上。你可以使用这些类来根据表单状态给表单控件元素添加样式。目前支持下列类：</p><ul><li>.ng-valid 校验成功</li><li>.ng-invalid 校验失败</li><li>.ng-pending 校验中</li><li>.ng-pristine 原始的样子</li><li>.ng-dirty 被修改过</li><li>.ng-untouched 没有被碰触过</li><li>.ng-touched 被碰触过</li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular-响应式表单</title>
      <link href="/posts/1375351521/"/>
      <url>/posts/1375351521/</url>
      
        <content type="html"><![CDATA[<p>响应式表单</p><span id="more"></span><p>总结：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">FormGroup</span>, <span class="title class_">FormControl</span>, <span class="title class_">FormBuilder</span>, <span class="title class_">FormArray</span>, <span class="title class_">Validators</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProfileEditorComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> fb: FormBuilder</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// profileForm = new FormGroup(&#123;</span></span><br><span class="line">    <span class="comment">//     firstName: new FormControl(&#x27;&#x27;),</span></span><br><span class="line">    <span class="comment">//     lastName: new FormControl(&#x27;&#x27;),</span></span><br><span class="line">    <span class="comment">//     address: new FormGroup(&#123;</span></span><br><span class="line">    <span class="comment">//         street: new FormControl(&#x27;&#x27;),</span></span><br><span class="line">    <span class="comment">//         city: new FormControl(&#x27;&#x27;),</span></span><br><span class="line">    <span class="comment">//         state: new FormControl(&#x27;&#x27;),</span></span><br><span class="line">    <span class="comment">//         zip: new FormControl(&#x27;&#x27;)</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">        <span class="attr">firstName</span>: [<span class="string">&#x27;&#x27;</span>, <span class="title class_">Validators</span>.<span class="property">required</span>], <span class="comment">// 第一项值是初始化值 第二项和第三项提供同步和异步验证器</span></span><br><span class="line">        <span class="attr">lastName</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">address</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">            <span class="attr">street</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">            <span class="attr">city</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">            <span class="attr">state</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">            <span class="attr">zip</span>: [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">aliases</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">array</span>([</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">control</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">updateProfile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 当点击按钮时，profileForm 模型中只有 firstName 和 street 被修改了。注意，street 是在 address 属性的对象中被修改的。</span></span><br><span class="line">        <span class="comment">// 这种结构是必须的，因为 patchValue() 方法要针对模型的结构进行更新。patchValue() 只会更新表单模型中所定义的那些属性。</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">            <span class="attr">firstName</span>: <span class="string">&#x27;Nancy&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>: &#123;</span><br><span class="line">                <span class="attr">street</span>: <span class="string">&#x27;123 Drew Street&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">aliases</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">get</span>(<span class="string">&#x27;aliases&#x27;</span>) <span class="keyword">as</span> <span class="title class_">FormArray</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addAlias</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">aliases</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">control</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">aliases</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;profileForm&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span> First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">required</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">formGroupName</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span> Street: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;street&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span> City: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;city&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span> State: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;state&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span> Zip Code: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;zip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!profileForm.valid&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="管理控件的值"><a href="#管理控件的值" class="headerlink" title="管理控件的值"></a>管理控件的值</h3><h3 id="1-注册-ReactiveFormsModule"><a href="#1-注册-ReactiveFormsModule" class="headerlink" title="1 注册 ReactiveFormsModule"></a>1 注册 ReactiveFormsModule</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactiveFormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="comment">// other imports ...</span></span><br><span class="line">    <span class="title class_">ReactiveFormsModule</span></span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="2-生成并导入一个新的表单控件"><a href="#2-生成并导入一个新的表单控件" class="headerlink" title="2 - 生成并导入一个新的表单控件"></a>2 - 生成并导入一个新的表单控件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component NameEditor</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormControl</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-name-editor&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./name-editor.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./name-editor.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NameEditorComponent</span> &#123;</span><br><span class="line">  name = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在模板中注册该控件"><a href="#3-在模板中注册该控件" class="headerlink" title="3 - 在模板中注册该控件"></a>3 - 在模板中注册该控件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  Name:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [<span class="attr">formControl</span>]=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示表单控件的值"><a href="#显示表单控件的值" class="headerlink" title="显示表单控件的值"></a>显示表单控件的值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Value: &#123;&#123; name.value &#125;&#125;</span><br><span class="line">  可以使用模板语法，也可以使用subscribe() 方法进行监听</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NameEditorComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    name = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="替换表单控件的值"><a href="#替换表单控件的值" class="headerlink" title="替换表单控件的值"></a>替换表单控件的值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">updateName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">setValue</span>(<span class="string">&#x27;Nancy&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把表单控件分组"><a href="#把表单控件分组" class="headerlink" title="把表单控件分组"></a>把表单控件分组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component ProfileEditor</span><br></pre></td></tr></table></figure><h4 id="1-创建-FormGroup-实例"><a href="#1-创建-FormGroup-实例" class="headerlink" title="1 - 创建 FormGroup 实例"></a>1 - 创建 FormGroup 实例</h4><p>在组件类中创建一个名叫 profileForm 的属性，并设置为 FormGroup 的一个新实例。要初始化这个 FormGroup，请为构造函数提供一个由控件组成的对象，对象中的每个名字都要和表单控件的名字一一对应。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormGroup</span>, <span class="title class_">FormControl</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;app-profile-editor&#x27;</span>,</span><br><span class="line">    <span class="attr">templateUrl</span>: <span class="string">&#x27;./profile-editor.component.html&#x27;</span>,</span><br><span class="line">    <span class="attr">styleUrls</span>: [<span class="string">&#x27;./profile-editor.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProfileEditorComponent</span> &#123;</span><br><span class="line">    profileForm = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">      <span class="comment">// 对此个人档案表单，要添加两个 FormControl 实例，名字分别为 firstName 和 lastName。</span></span><br><span class="line">        <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-保存表单数据"><a href="#2-保存表单数据" class="headerlink" title="2 保存表单数据"></a>2 保存表单数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;profileForm&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!profileForm.valid&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Use EventEmitter with form value</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-表单嵌套"><a href="#3-表单嵌套" class="headerlink" title="3 表单嵌套"></a>3 表单嵌套</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;profileForm&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        First Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        Last Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">formGroupName</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            Street:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;street&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            City:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            State:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;state&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            Zip Code:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;zip&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!profileForm.valid&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">profileForm = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">address</span>: <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">        <span class="attr">street</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">city</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">state</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">zip</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更新部分值"><a href="#更新部分值" class="headerlink" title="更新部分值"></a>更新部分值</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">updateProfile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Nancy&#x27;</span>,</span><br><span class="line">        <span class="attr">address</span>: &#123;</span><br><span class="line">            <span class="attr">street</span>: <span class="string">&#x27;123 Drew Street&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FormBuilder-来生成表单控件"><a href="#FormBuilder-来生成表单控件" class="headerlink" title="FormBuilder 来生成表单控件"></a>FormBuilder 来生成表单控件</h3><ul><li>1 导入FormBuilder控件<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormBuilder</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>2 注入服务<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> fb: FormBuilder</span>) &#123; &#125;</span><br></pre></td></tr></table></figure></li><li>3 生成表单控件<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里，每个控件名对应的值都是一个数组，这个数组中的第一项是其初始值。</span></span><br><span class="line"><span class="comment">// 你可以只使用初始值来定义控件，但是如果你的控件还需要同步或异步验证器，那就在这个数组中的第二项和第三项提供同步和异步验证器。</span></span><br><span class="line">profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: [<span class="string">&#x27;&#x27;</span>], <span class="comment">// 第一项值是初始化值 第二项和第三项提供同步和异步验证器</span></span><br><span class="line">    <span class="attr">lastName</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">    <span class="attr">address</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">        <span class="attr">street</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">state</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">zip</span>: [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与其对应的是完全手动创建</span></span><br><span class="line">profileForm = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">address</span>: <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">        <span class="attr">street</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">city</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">state</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="attr">zip</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="简单表单验证"><a href="#简单表单验证" class="headerlink" title="简单表单验证"></a>简单表单验证</h3><ul><li>1 导入验证器函数<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Validators</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>2 - 把字段设为必填（required）<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: [<span class="string">&#x27;&#x27;</span>, <span class="title class_">Validators</span>.<span class="property">required</span>], <span class="comment">// 第一项值是初始化值 第二项和第三项提供同步和异步验证器</span></span><br><span class="line">    <span class="attr">lastName</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">    <span class="attr">address</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">        <span class="attr">street</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">state</span>: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">        <span class="attr">zip</span>: [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="显示表单状态"><a href="#显示表单状态" class="headerlink" title="显示表单状态"></a>显示表单状态</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Form Status: &#123;&#123; profileForm.status &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用表单数组管理动态控件"><a href="#使用表单数组管理动态控件" class="headerlink" title="使用表单数组管理动态控件"></a>使用表单数组管理动态控件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormArray</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br></pre></td></tr></table></figure><p>你可以通过把一组（从零项到多项）控件定义在一个数组中来初始化一个 FormArray。为 profileForm 添加一个 aliases 属性，把它定义为 FormArray 类型。</p><p>使用 FormBuilder.array() 方法来定义该数组，并用 FormBuilder.control() 方法来往该数组中添加一个初始控件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">profileForm = <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">aliases</span>: <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">array</span>([</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">control</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到 aliases</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">aliases</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">get</span>(<span class="string">&#x27;aliases&#x27;</span>) <span class="keyword">as</span> <span class="title class_">FormArray</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 FormArray 中添加值</span></span><br><span class="line"><span class="title function_">addAlias</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">aliases</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">fb</span>.<span class="title function_">control</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在模板中使用和显示这些值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;profileForm&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">formArrayName</span>=<span class="string">&quot;aliases&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Aliases<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;addAlias()&quot;</span>&gt;</span>Add Alias<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let address of aliases.controls; let i=index&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- The repeated alias template --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                Alias:</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [<span class="attr">formControlName</span>]=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- *ngFor 指令对 aliases FormArray 提供的每个 FormControl 进行迭代。</span></span><br><span class="line"><span class="comment">                因为 FormArray 中的元素是匿名的，所以你要把索引号赋值给 i 变量，并且把它传给每个控件的 formControlName 输入属性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!profileForm.valid&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-调整滚动条样式</title>
      <link href="/posts/51600/"/>
      <url>/posts/51600/</url>
      
        <content type="html"><![CDATA[<p>一直感觉angular中文文档的滚动条样式非常棒<br><a href="https://www.angular.cn/">https://www.angular.cn/</a></p><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="comment">/* 定义了滚动条整体的样式 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="comment">/* 轨道部分 */</span></span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="comment">/* 滑块部分 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">#333</span> solid <span class="number">1px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-重复使用scoped-slot</title>
      <link href="/posts/2669713268/"/>
      <url>/posts/2669713268/</url>
      
        <content type="html"><![CDATA[<p>vue-重复使用scoped-slot</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">render</span>: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> &#123; <span class="comment">// dom渲染函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, ctx.<span class="property">injections</span>.<span class="property">Root</span>.<span class="property">$scopedSlots</span>[<span class="string">&#x27;icon&#x27;</span>](&#123; <span class="comment">// 得到名为icon的作用域插槽</span></span><br><span class="line">        <span class="attr">data</span>: ctx.<span class="property">props</span>.<span class="property">data</span>, <span class="comment">// 给slot的组件传递props</span></span><br><span class="line">        <span class="attr">options</span>: ctx.<span class="property">props</span>.<span class="property">options</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="话不投机半句多，直接上代码"><a href="#话不投机半句多，直接上代码" class="headerlink" title="话不投机半句多，直接上代码"></a>话不投机半句多，直接上代码</h2><p>有3步</p><ul><li>第一步：创建渲染slot的组件 <strong>重要</strong></li><li>第二步：为slot添加父组件数据（props） <strong>重要</strong></li><li>第三步：使用</li></ul><h3 id="第一步：创建渲染slot的组件"><a href="#第一步：创建渲染slot的组件" class="headerlink" title="第一步：创建渲染slot的组件"></a>第一步：创建渲染slot的组件</h3><p>首选创建一个单文件组价，由于我们是使用的slot（父组件传进来的），所以，我们只需要创建js文件即可，而不用创建.vue文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slot.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Slot&#x27;</span>, <span class="comment">// slot的名字，调试使用</span></span><br><span class="line">    <span class="attr">functional</span>: <span class="literal">true</span>, <span class="comment">// 使组件无状态 (没有 data ) 和无实例 (没有 this 上下文)。他们用一个简单的 render 函数返回虚拟节点使他们更容易渲染。</span></span><br><span class="line">    <span class="attr">inject</span>: [<span class="string">&#x27;Root&#x27;</span>], <span class="comment">// 父组件的映射 </span></span><br><span class="line">    <span class="attr">props</span>: &#123; <span class="comment">// 此组件接受的props</span></span><br><span class="line">        <span class="attr">data</span>: <span class="title class_">Object</span>,</span><br><span class="line">        <span class="attr">options</span>: <span class="title class_">Object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> &#123; <span class="comment">// dom渲染函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, ctx.<span class="property">injections</span>.<span class="property">Root</span>.<span class="property">$scopedSlots</span>[<span class="string">&#x27;icon&#x27;</span>](&#123; <span class="comment">// 得到名为icon的作用域插槽</span></span><br><span class="line">            <span class="attr">data</span>: ctx.<span class="property">props</span>.<span class="property">data</span>, <span class="comment">// 给slot的组件传递props</span></span><br><span class="line">            <span class="attr">options</span>: ctx.<span class="property">props</span>.<span class="property">options</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第二步：为slot添加父组件数据（props）"><a href="#第二步：为slot添加父组件数据（props）" class="headerlink" title="第二步：为slot添加父组件数据（props）"></a>第二步：为slot添加父组件数据（props）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IconSlot</span> <span class="keyword">from</span> <span class="string">&#x27;slot.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;IconTable&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;<span class="title class_">IconSlot</span>&#125;,</span><br><span class="line">     provide () &#123; <span class="comment">// 该对象包含可注入其子孙的属性 在这里把父组件自身传递给子组件</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title class_">Root</span>: <span class="variable language_">this</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">list</span>: [],</span><br><span class="line">            <span class="attr">options</span>: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">icon-slot</span> <span class="attr">:data</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon-slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：使用"><a href="#第三步：使用" class="headerlink" title="第三步：使用"></a>第三步：使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">icon-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; list, options &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;list.length &gt; 1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">&quot;del&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">icon-table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="大功告成-总结"><a href="#大功告成-总结" class="headerlink" title="大功告成 总结"></a>大功告成 总结</h2><p>如果在父组件直接取<code>this.$slot</code>或<code>this.$scopedSlots</code>的话，<br>其实只能用一次<br>如果在模板中使用 slot 标签来接收的话，其实也只能只用一次</p><p>所以核心思路是；每次使用都必须重新创建VNode节点，那只能每次都使用createElement生成node,<br>那只有一个办法使用render渲染了，然后第一个参数创建dom后，dom附带的数据，都可以是一个对象，只要保证节点是唯一的即可，数据其实无所谓，怎么传都可以</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今天开始刷leetcode</title>
      <link href="/posts/31431/"/>
      <url>/posts/31431/</url>
      
        <content type="html"><![CDATA[<p>今天开始刷leetcode</p><span id="more"></span><h1 id="今天开始刷leetcode-中文版的"><a href="#今天开始刷leetcode-中文版的" class="headerlink" title="今天开始刷leetcode,中文版的"></a>今天开始刷leetcode,中文版的</h1><p><a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>angular-mixins-混入</title>
      <link href="/posts/37654/"/>
      <url>/posts/37654/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angular-键盘事件绑定与过滤</title>
      <link href="/posts/2869749302/"/>
      <url>/posts/2869749302/</url>
      
        <content type="html"><![CDATA[<p>方便的angular按钮绑定<br>如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;keyUpSearch($event)&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按下回车键触发&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> (<span class="attr">keyup.</span>;)=<span class="string">&quot;keyUpSearch($event)&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按下;号键触发&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>官方文档：<a href="https://www.angular.cn/guide/user-input#key-event-filtering-with-keyenter">https://www.angular.cn/guide/user-input#key-event-filtering-with-keyenter</a></p><p>(keyup) 事件处理器监听每一次按键。 有时只在意回车键，因为它标志着用户结束输入。 解决这个问题的一种方法是检查每个 $event.keyCode，只有键值是回车键时才采取行动。</p><p>更简单的方法是：绑定到 Angular 的 keyup.enter 模拟事件。 然后，只有当用户敲回车键时，Angular 才会调用事件处理器。<br>示例：<br>template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">box</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;update(box.value, $event)&quot;</span> (<span class="attr">blur</span>)=<span class="string">&quot;update(box.value)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>component:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-key-up4&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">KeyUpComponent_v4</span> &#123;</span><br><span class="line">  value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">value: <span class="built_in">string</span>, event: <span class="built_in">any</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">value</span> = value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的过滤有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(keyup.<span class="property">enter</span>)    <span class="comment">// 按键并回车</span></span><br><span class="line">(keyup.<span class="property">space</span>)    <span class="comment">// 按键并空格</span></span><br><span class="line">(keyup.<span class="property">control</span>)  <span class="comment">// 按键并ctrl</span></span><br><span class="line">(keyup.<span class="property">shift</span>)    <span class="comment">// 按键并shift</span></span><br><span class="line">(keyup.<span class="property">alt</span>)      <span class="comment">// 按键并alt</span></span><br><span class="line">(keyup<span class="number">.1</span>)        <span class="comment">// 按键1触发</span></span><br><span class="line">(keyup.，)       <span class="comment">// 按键,触发</span></span><br><span class="line">(keyup<span class="number">.3</span>)        <span class="comment">// 按键并alt</span></span><br></pre></td></tr></table></figure><p>不支持一些具有正则含义的符号，<br>如 <font color="red">&#x2F; ? *</font> 等</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>height与min-height高度继承问题</title>
      <link href="/posts/51845/"/>
      <url>/posts/51845/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>在父元素设置<copy>min-height:100%</copy>时，子元素设置<copy>height:100%</copy>发现高度无法被撑起，<br>原来，height继承于父元素的height，当height不设置时，height高度为auto,所以子元素继承的高度为auto,所以无法撑起<br>只要设置height为一个固定的值，那么height就不在是auto，那么子元素继承的就当前值，<br>由于父元素设置了min-height:100%,那么min-height便会覆盖height，这样子元素的height就可以正常继承min-height产生的值了</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 大坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fluter-与web布局差异</title>
      <link href="/posts/14102/"/>
      <url>/posts/14102/</url>
      
        <content type="html"><![CDATA[<p><a href="https://flutterchina.club/web-analogs/">https://flutterchina.club/web-analogs/</a><br>HTML &#x2F; CSS代码片段映射到的Flutter &#x2F; Dart代码片段。<br>flutter 盒子模型都为border-box<br>HTML文档以HTML DOCTYPE开始, 并且所有HTML的box-sizing为 border-box, 以便与Flutter模型一致</p><span id="more"></span><p>官方文档<br><a href="https://flutterchina.club/web-analogs/">https://flutterchina.club/web-analogs/</a></p><h2 id="基本常量"><a href="#基本常量" class="headerlink" title="基本常量"></a>基本常量</h2><ul><li><font style="color: green">FontWeight</font> FontWeight.w900 字体宽度集</li><li><font style="color: green">Colors</font> Colors.grey[300] 颜色集</li><li><font style="color: green">Alignment</font> Alignment.center 旋转原点 transform-origin</li><li><font style="color: green">TextAlign</font> TextAlign.center 文本对齐</li><li><font style="color: green">BoxShape</font> BoxShape.circle 圆和椭圆和矩形</li></ul><h2 id="基本class类，用于实现布局"><a href="#基本class类，用于实现布局" class="headerlink" title="基本class类，用于实现布局"></a>基本class类，用于实现布局</h2><ul><li>new Container 容器，div,section</li><li>new BoxDecoration 容器的约束条件,常用于背景 一般挂载到decoration属性上</li><li>new Center 创建一个弹性盒子，display: flex</li><li>new Text 创建一个文字块，span</li><li>new EdgeInsets 设置内边距，挂载到padding属性下</li><li>new Stack 创建一个盒子，内容为绝对定位盒子列表，children</li><li>new Positioned 创建一个绝对定位盒子</li><li>new Matrix4 3D变幻属性</li></ul><h2 id="进行基本的布局"><a href="#进行基本的布局" class="headerlink" title="进行基本的布局"></a>进行基本的布局</h2><h3 id="给文本添加样式-背景色"><a href="#给文本添加样式-背景色" class="headerlink" title="给文本添加样式 背景色"></a>给文本添加样式 背景色</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// 一个盒子相当于div</span></span><br><span class="line">  child: <span class="keyword">new</span> Text(</span><br><span class="line">    <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">    style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">      fontSize: <span class="number">24.0</span></span><br><span class="line">      fontWeight: FontWeight.w900, <span class="comment">// 文本粗细</span></span><br><span class="line">      fontFamily: <span class="string">&quot;Georgia&quot;</span>, <span class="comment">// 字体</span></span><br><span class="line">      textAlign: TextAlign.center, <span class="comment">// 文本对齐</span></span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  <span class="comment">// color: Colors.grey[300], // 背景色 与下方的数据任选其一</span></span><br><span class="line">  decoration: <span class="keyword">new</span> BoxDecoration( <span class="comment">// 背景色</span></span><br><span class="line">    color: Colors.red[<span class="number">400</span>], <span class="comment">// 背景色</span></span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="文字居中，flex布局"><a href="#文字居中，flex布局" class="headerlink" title="文字居中，flex布局"></a>文字居中，flex布局</h3><p>Center widget 可以使其子widget在水平和垂直方向居中.<br>为了在CSS中实现类似效果，父元素使用flex或table-cell。此页面上的示例使用了flex布局。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> <span class="title class_">Container</span>( <span class="comment">// grey box</span></span><br><span class="line">  <span class="attr">child</span>:  <span class="keyword">new</span> <span class="title class_">Center</span>(</span><br><span class="line">    <span class="attr">child</span>:  <span class="keyword">new</span> <span class="title class_">Text</span>(</span><br><span class="line">      <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">      <span class="attr">style</span>: bold24Roboto,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  <span class="attr">width</span>: <span class="number">320.0</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">240.0</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">grey</span>[<span class="number">300</span>],</span><br><span class="line">);</span><br><span class="line"><span class="comment">// new Center 相当于</span></span><br><span class="line"><span class="comment">// display: flex;</span></span><br><span class="line"><span class="comment">// align-items: center;</span></span><br><span class="line"><span class="comment">// justify-content: center; </span></span><br></pre></td></tr></table></figure><h3 id="设置容器宽度"><a href="#设置容器宽度" class="headerlink" title="设置容器宽度"></a>设置容器宽度</h3><p>要指定Container的宽度，请设置其width属性。 这是一个固定的宽度，不像CSS中max-width属性，它可以设置容器宽度最大值。要在Flutter中模拟这种效果，请使用容器的constraints属性。 创建一个新的BoxConstraints来设置minWidth或maxWidth。</p><p>对于嵌套容器，如果父级的宽度小于子级宽度，则子级容器将自行调整大小以匹配父级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> <span class="title class_">Container</span>( <span class="comment">// grey box</span></span><br><span class="line">  <span class="attr">child</span>: <span class="keyword">new</span> <span class="title class_">Center</span>(</span><br><span class="line">    <span class="attr">child</span>: <span class="keyword">new</span> <span class="title class_">Container</span>( <span class="comment">// red box</span></span><br><span class="line">      <span class="attr">child</span>: <span class="keyword">new</span> <span class="title class_">Text</span>(</span><br><span class="line">        <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">        <span class="attr">style</span>: bold24Roboto,</span><br><span class="line">      ),</span><br><span class="line">      <span class="attr">decoration</span>: <span class="keyword">new</span> <span class="title class_">BoxDecoration</span>( <span class="comment">// 约束</span></span><br><span class="line">        <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">red</span>[<span class="number">400</span>],</span><br><span class="line">      ),</span><br><span class="line">      <span class="attr">padding</span>: <span class="keyword">new</span> <span class="title class_">EdgeInsets</span>.<span class="title function_">all</span>(<span class="number">16.0</span>),</span><br><span class="line">      <span class="attr">width</span>: <span class="number">240.0</span>, <span class="comment">//max-width is 240.0</span></span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  <span class="attr">width</span>: <span class="number">320.0</span>, <span class="comment">// 如果想要撑满屏幕，那么宽度可以设置为超越屏幕的宽度，宽度会自动缩小到屏幕大小</span></span><br><span class="line">  <span class="attr">height</span>: <span class="number">240.0</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="title class_">Colors</span>.<span class="property">grey</span>[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="控制位置和大小"><a href="#控制位置和大小" class="headerlink" title="控制位置和大小"></a>控制位置和大小</h2><h3 id="设置绝对位置"><a href="#设置绝对位置" class="headerlink" title="设置绝对位置"></a>设置绝对位置</h3><p>要将widget的绝对位置指定为x-y坐标，请将其嵌套在Positionedwidget中， 该widget又嵌套在Stack widget中。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// 容器盒子 列表</span></span><br><span class="line">  child: <span class="keyword">new</span> Stack(</span><br><span class="line">    children: [</span><br><span class="line">      <span class="keyword">new</span> Positioned( <span class="comment">// 设置一个定位盒子</span></span><br><span class="line">        child:  <span class="keyword">new</span> Container(</span><br><span class="line">          child: <span class="keyword">new</span> Text(</span><br><span class="line">            <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">            style: bold24Roboto,</span><br><span class="line">          ),</span><br><span class="line">          decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">            color: Colors.red[<span class="number">400</span>],</span><br><span class="line">          ),</span><br><span class="line">          padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        ),</span><br><span class="line">        left: <span class="number">24.0</span>,</span><br><span class="line">        top: <span class="number">24.0</span>,</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ), </span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="旋转组件-缩放组件"><a href="#旋转组件-缩放组件" class="headerlink" title="旋转组件 缩放组件"></a>旋转组件 缩放组件</h3><p>要旋转一个widget，将它嵌套在一个Transform中。 使设置其alignment和origin属性分别以相对和绝对值指定变换原点。<br>对于简单的2D旋转，widget在Z轴上旋转。（度数×π&#x2F; 180）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// div</span></span><br><span class="line">  child: <span class="keyword">new</span> Center( <span class="comment">// 居中盒子</span></span><br><span class="line">    child:  <span class="keyword">new</span> Transform( <span class="comment">// 旋转组件</span></span><br><span class="line">      child:  <span class="keyword">new</span> Container( <span class="comment">// div</span></span><br><span class="line">        child: <span class="keyword">new</span> Text(</span><br><span class="line">          <span class="string">&quot;Lorem ipsum&quot;</span>, <span class="comment">// 文字</span></span><br><span class="line">          style: bold24Roboto, <span class="comment">// 样式集</span></span><br><span class="line">          textAlign: TextAlign.center, <span class="comment">// 文本对齐</span></span><br><span class="line">        ),</span><br><span class="line">        decoration: <span class="keyword">new</span> BoxDecoration( <span class="comment">// 背景色</span></span><br><span class="line">          color: Colors.red[<span class="number">400</span>],</span><br><span class="line">        ),</span><br><span class="line">        padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>), <span class="comment">// padding</span></span><br><span class="line">      ),</span><br><span class="line">      alignment: Alignment.center, <span class="comment">// 旋转原点 transform-origin</span></span><br><span class="line">      transform: <span class="keyword">new</span> Matrix4.identity() <span class="comment">// 旋转参数</span></span><br><span class="line">        ..rotateZ(<span class="number">15</span> * <span class="number">3.1415927</span> / <span class="number">180</span>) <span class="comment">// z轴旋转角度 .. 是dart的特殊语法，相当于js的链式调用 后面不能跟逗号</span></span><br><span class="line">        ..scale(<span class="number">1.5</span>), <span class="comment">// 旋转</span></span><br><span class="line">    ), </span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>], <span class="comment">// 背景色</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>要将线性渐变应用于widget的背景，请将其嵌套到Containerwidget中。 然后使用Container的decoration属性来创建BoxDecoration对象， 并使用BoxDecoration的gradient属性来转换背景填充。<br>渐变“角度”基于Alignment（x，y）值:<br>    如果开始和结束的x值相等，则渐变是垂直的（0° 180°）。<br>    如果开始和结束的y值相等，则渐变为水平（90° 270°）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// grey box</span></span><br><span class="line">  child: <span class="keyword">new</span> Center(</span><br><span class="line">    child: <span class="keyword">new</span> Container( <span class="comment">// red box</span></span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">        style: bold24Roboto,</span><br><span class="line">      ),</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        gradient: <span class="keyword">new</span> LinearGradient( <span class="comment">// 渐变属性</span></span><br><span class="line">          <span class="comment">// 垂直渐变</span></span><br><span class="line">          begin: <span class="keyword">const</span> Alignment(<span class="number">0.0</span>, <span class="number">-1.0</span>), <span class="comment">// 渐变“角度” 垂直渐变</span></span><br><span class="line">          end: <span class="keyword">const</span> Alignment(<span class="number">0.0</span>, <span class="number">0.6</span>),</span><br><span class="line">          <span class="comment">// 水平渐变</span></span><br><span class="line">          <span class="comment">// begin: const Alignment(-1.0, 0.0),</span></span><br><span class="line">          <span class="comment">// end: const Alignment(0.6, 0.0),</span></span><br><span class="line">          colors: &lt;Color&gt;[</span><br><span class="line">            <span class="keyword">const</span> Color(<span class="number">0xffef5350</span>),</span><br><span class="line">            <span class="keyword">const</span> Color(<span class="number">0x00ef5350</span>)</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ), </span><br><span class="line">      padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="处理形状"><a href="#处理形状" class="headerlink" title="处理形状"></a>处理形状</h2><h3 id="圆角-阴影"><a href="#圆角-阴影" class="headerlink" title="圆角 阴影"></a>圆角 阴影</h3><p>要给矩形添加圆角请使用BoxDecoration对象的borderRadius属性 。 创建一个新的BorderRadius对象，给该对象指定一个的半径（会四舍五入）。<br>在CSS中，您可以使用box-shadow属性来快速指定阴影偏移和模糊。<br>在Flutter中，每个属性和值都单独指定。使用BoxDecoration的boxShadow属性创建BoxShadow列表。 您可以定义一个或多个BoxShadow，它们可以叠加出自定义阴影深度、颜色等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// grey box</span></span><br><span class="line">  child: <span class="keyword">new</span> Center(</span><br><span class="line">    child: <span class="keyword">new</span> Container( <span class="comment">// red circle</span></span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">        style: bold24Roboto,</span><br><span class="line">      ),</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        color: Colors.red[<span class="number">400</span>], <span class="comment">// 背景色</span></span><br><span class="line">        borderRadius: <span class="keyword">new</span> BorderRadius.all( <span class="comment">// 圆角</span></span><br><span class="line">          <span class="keyword">const</span> Radius.circular(<span class="number">8.0</span>), <span class="comment">// 圆角</span></span><br><span class="line">          <span class="comment">// const Radius.elliptical(10, 30), 椭圆</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// 分别设置左右圆角</span></span><br><span class="line">        <span class="comment">// borderRadius: new BorderRadius.horizontal(</span></span><br><span class="line">        <span class="comment">//    left: Radius.circular(15.0),</span></span><br><span class="line">        <span class="comment">//    right: Radius.circular(10.0),</span></span><br><span class="line">        <span class="comment">// )</span></span><br><span class="line">        <span class="comment">// 分别设置上下圆角</span></span><br><span class="line">        <span class="comment">// borderRadius: new BorderRadius.vertical(</span></span><br><span class="line">        <span class="comment">//    top: Radius.circular(20.0),</span></span><br><span class="line">        <span class="comment">//    bottom: Radius.circular(10.0)</span></span><br><span class="line">        <span class="comment">// ),</span></span><br><span class="line">        <span class="comment">// 阴影</span></span><br><span class="line">        boxShadow: &lt;BoxShadow&gt;[</span><br><span class="line">            <span class="keyword">new</span> BoxShadow (</span><br><span class="line">            color: <span class="keyword">const</span> Color(<span class="number">0xcc000000</span>),</span><br><span class="line">            offset: <span class="keyword">new</span> Offset(<span class="number">0.0</span>, <span class="number">2.0</span>),</span><br><span class="line">            blurRadius: <span class="number">4.0</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> BoxShadow (</span><br><span class="line">            color: <span class="keyword">const</span> Color(<span class="number">0x80000000</span>),</span><br><span class="line">            offset: <span class="keyword">new</span> Offset(<span class="number">0.0</span>, <span class="number">6.0</span>),</span><br><span class="line">            blurRadius: <span class="number">20.0</span>,</span><br><span class="line">            ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="圆和椭圆"><a href="#圆和椭圆" class="headerlink" title="圆和椭圆"></a>圆和椭圆</h3><p>在CSS中制作一个圆需要将矩形的四条边的border-radius设置为50%。</p><p>虽然BoxDecoration的borderRadius属性支持此方法,但Flutter为此提供了一个shape属性,值为BoxShape枚举.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// grey box</span></span><br><span class="line">  child: <span class="keyword">new</span> Center(</span><br><span class="line">    child: <span class="keyword">new</span> Container( <span class="comment">// red circle</span></span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">&quot;Lorem ipsum&quot;</span>,</span><br><span class="line">        style: bold24Roboto,</span><br><span class="line">        textAlign: TextAlign.center, </span><br><span class="line">      ),</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        color: Colors.red[<span class="number">400</span>],</span><br><span class="line">        shape: BoxShape.circle, <span class="comment">// shape 专门设置圆和椭圆属性</span></span><br><span class="line">      ),</span><br><span class="line">      padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">      width: <span class="number">160.0</span>,</span><br><span class="line">      height: <span class="number">160.0</span>, </span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="操作文本"><a href="#操作文本" class="headerlink" title="操作文本"></a>操作文本</h2><h3 id="调整文本间距-转换文本-省略号"><a href="#调整文本间距-转换文本-省略号" class="headerlink" title="调整文本间距 转换文本 省略号"></a>调整文本间距 转换文本 省略号</h3><p>在CSS中，通过分别给出letter-spacing和word-spacing属性的长度值，指定每个字母或单词之间的空白间距。长度单位可以是px，pt，cm，em等。</p><p>在Flutter中，您将空白区域指定为Text的TextStyle的letterSpacing和wordSpacing属性， 值为逻辑像素（允许为负值）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// grey box</span></span><br><span class="line">  child: <span class="keyword">new</span> Center(</span><br><span class="line">    child: <span class="keyword">new</span> Container( <span class="comment">// red box</span></span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">&quot;Lorem ipsum&quot;</span>.toUpperCase(), <span class="comment">// 转换为大写</span></span><br><span class="line">        style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">          color: Colors.white,</span><br><span class="line">          fontSize: <span class="number">24.0</span>,</span><br><span class="line">          fontWeight: FontWeight.w900,</span><br><span class="line">          letterSpacing: <span class="number">4.0</span>, <span class="comment">// 字符间距</span></span><br><span class="line">          wordSpacing: <span class="number">4.0</span> <span class="comment">// 单词间距</span></span><br><span class="line">        ),</span><br><span class="line">        overflow: TextOverflow.ellipsis, <span class="comment">// 文本超出显示省略号</span></span><br><span class="line">        maxLines: <span class="number">1</span>, <span class="comment">// 最大多少行视为超出</span></span><br><span class="line">      ),</span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        color: Colors.red[<span class="number">400</span>],</span><br><span class="line">      ),</span><br><span class="line">      padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="内联格式更改"><a href="#内联格式更改" class="headerlink" title="内联格式更改"></a>内联格式更改</h3><p>Text widget控件，可以用相同的格式显示文本。 要显示使用多个样式的文本（在本例中为带有重点的单个单词），请改用RichText。 它的text属性可以指定一个或多个可单独设置样式的TextSpanwidget。</p><p>在以下示例中，“Lorem”位于具有默认（继承）文本样式的TextSpan小部件中，“ipsum”位于具有自定义样式的单独TextSpan中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;greybox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;redbox&quot;</span>&gt;</span></span><br><span class="line">    Lorem <span class="tag">&lt;<span class="name">em</span>&gt;</span>ipsum<span class="tag">&lt;/<span class="name">em</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> container = <span class="keyword">new</span> Container( <span class="comment">// grey box</span></span><br><span class="line">  child: <span class="keyword">new</span> Center(</span><br><span class="line">    child: <span class="keyword">new</span> Container( <span class="comment">// red box</span></span><br><span class="line">      child:  <span class="keyword">new</span> RichText(</span><br><span class="line">        text: <span class="keyword">new</span> TextSpan(</span><br><span class="line">          style: bold24Roboto,</span><br><span class="line">          children: &lt;TextSpan&gt;[</span><br><span class="line">            <span class="keyword">new</span> TextSpan(text: <span class="string">&quot;Lorem &quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> TextSpan(</span><br><span class="line">              text: <span class="string">&quot;ipsum&quot;</span>,</span><br><span class="line">              style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                fontWeight: FontWeight.w300,</span><br><span class="line">                fontStyle: FontStyle.italic,</span><br><span class="line">                fontSize: <span class="number">48.0</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ), </span><br><span class="line">      decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">        backgroundColor: Colors.red[<span class="number">400</span>],</span><br><span class="line">      ),</span><br><span class="line">      padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  width: <span class="number">320.0</span>,</span><br><span class="line">  height: <span class="number">240.0</span>,</span><br><span class="line">  color: Colors.grey[<span class="number">300</span>],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter-PopupMenu-下拉菜单</title>
      <link href="/posts/38154/"/>
      <url>/posts/38154/</url>
      
        <content type="html"><![CDATA[<p>PopupMenuButton 下拉菜单按钮<br>PopupMenuItem 下拉元素</p><span id="more"></span><h3 id="重点方法"><a href="#重点方法" class="headerlink" title="重点方法"></a>重点方法</h3><p><strong>PopupMenuButton</strong> 下拉菜单按钮<br><strong>PopupMenuItem</strong> 下拉元素<br><a href="https://flutterchina.club/catalog/samples/basic-app-bar/">https://flutterchina.club/catalog/samples/basic-app-bar/</a>·</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> PopupMenuButton&lt;Choice&gt;( <span class="comment">// overflow menu</span></span><br><span class="line">  onSelected: _select,</span><br><span class="line">  icon: <span class="keyword">new</span> Icon(Icons.add), <span class="comment">// 默认图标是竖着的三个点，但是可以重新设置</span></span><br><span class="line">  itemBuilder: (BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// skip(2) 方法是跳过前2个</span></span><br><span class="line">    <span class="keyword">return</span> choices.skip(<span class="number">2</span>).map((Choice choice) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> PopupMenuItem&lt;Choice&gt;(</span><br><span class="line">        value: choice,</span><br><span class="line">        child: <span class="keyword">new</span> Text(choice.title),</span><br><span class="line">      );</span><br><span class="line">    &#125;).toList();</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>main.dart </p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2017 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This app is a stateful, it tracks the user&#x27;s current choice.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicAppBarSample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BasicAppBarSampleState createState() =&gt; <span class="keyword">new</span> _BasicAppBarSampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BasicAppBarSampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BasicAppBarSample</span>&gt; </span>&#123;</span><br><span class="line">  Choice _selectedChoice = choices[<span class="number">0</span>]; <span class="comment">// The app&#x27;s &quot;state&quot;.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _select(Choice choice) &#123;</span><br><span class="line">    setState(() &#123; <span class="comment">// Causes the app to rebuild with the new _selectedChoice.</span></span><br><span class="line">      _selectedChoice = choice;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;Basic AppBar&#x27;</span>),</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> IconButton( <span class="comment">// action button</span></span><br><span class="line">              icon: <span class="keyword">new</span> Icon(choices[<span class="number">0</span>].icon),</span><br><span class="line">              onPressed: () &#123; _select(choices[<span class="number">0</span>]); &#125;,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> IconButton( <span class="comment">// action button</span></span><br><span class="line">              icon: <span class="keyword">new</span> Icon(choices[<span class="number">1</span>].icon),</span><br><span class="line">              onPressed: () &#123; _select(choices[<span class="number">1</span>]); &#125;,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> PopupMenuButton&lt;Choice&gt;( <span class="comment">// overflow menu</span></span><br><span class="line">              onSelected: _select,</span><br><span class="line">              icon: <span class="keyword">new</span> Icon(Icons.add), <span class="comment">// 默认图标是竖着的三个点，但是可以重新设置</span></span><br><span class="line">              itemBuilder: (BuildContext context) &#123;</span><br><span class="line">                <span class="comment">// skip(2) 方法是跳过前2个</span></span><br><span class="line">                <span class="keyword">return</span> choices.skip(<span class="number">2</span>).map((Choice choice) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> PopupMenuItem&lt;Choice&gt;(</span><br><span class="line">                    value: choice,</span><br><span class="line">                    child: <span class="keyword">new</span> Text(choice.title),</span><br><span class="line">                  );</span><br><span class="line">                &#125;).toList();</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Padding(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">          child: <span class="keyword">new</span> ChoiceCard(choice: _selectedChoice),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Choice(&#123; <span class="keyword">this</span>.title, <span class="keyword">this</span>.icon &#125;);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> IconData icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">List</span>&lt;Choice&gt; choices = <span class="keyword">const</span> &lt;Choice&gt;[</span><br><span class="line">  <span class="keyword">const</span> Choice(title: <span class="string">&#x27;Car&#x27;</span>, icon: Icons.directions_car),</span><br><span class="line">  <span class="keyword">const</span> Choice(title: <span class="string">&#x27;Bicycle&#x27;</span>, icon: Icons.directions_bike),</span><br><span class="line">  <span class="keyword">const</span> Choice(title: <span class="string">&#x27;Boat&#x27;</span>, icon: Icons.directions_boat),</span><br><span class="line">  <span class="keyword">const</span> Choice(title: <span class="string">&#x27;Bus&#x27;</span>, icon: Icons.directions_bus),</span><br><span class="line">  <span class="keyword">const</span> Choice(title: <span class="string">&#x27;Train&#x27;</span>, icon: Icons.directions_railway),</span><br><span class="line">  <span class="keyword">const</span> Choice(title: <span class="string">&#x27;Walk&#x27;</span>, icon: Icons.directions_walk),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceCard</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ChoiceCard(&#123; Key key, <span class="keyword">this</span>.choice &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Choice choice;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> TextStyle textStyle = Theme.of(context).textTheme.display1;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Card(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      child: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> Column(</span><br><span class="line">          mainAxisSize: MainAxisSize.min,</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> Icon(choice.icon, size: <span class="number">128.0</span>, color: textStyle.color),</span><br><span class="line">            <span class="keyword">new</span> Text(choice.title, style: textStyle),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> BasicAppBarSample());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-app实例属性</title>
      <link href="/posts/29837/"/>
      <url>/posts/29837/</url>
      
        <content type="html"><![CDATA[<p>尴尬，文档上就写了一个！！<br><a href="https://electronjs.org/docs/api/app#appispackaged">https://electronjs.org/docs/api/app#appispackaged</a></p><span id="more"></span><h3 id="app-isPackaged"><a href="#app-isPackaged" class="headerlink" title="app.isPackaged"></a>app.isPackaged</h3><p>返回一个Boolean值，如果应用已经打包，返回true ，否则返回false 。 对于大多数应用程序，此属性可用于区分开发和生产环境。</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-app实例方法</title>
      <link href="/posts/53542/"/>
      <url>/posts/53542/</url>
      
        <content type="html"><![CDATA[<p>app 对象具有以下方法:<br>文档：<a href="https://electronjs.org/docs/api/app#appquit">https://electronjs.org/docs/api/app#appquit</a></p><span id="more"></span><h3 id="app-quit"><a href="#app-quit" class="headerlink" title="app.quit()"></a>app.quit()</h3><p>尝试关闭所有窗口 将首先发出 before-quit 事件。 如果所有窗口都已成功关闭, 则将发出 will-quit 事件, 并且默认情况下应用程序将终止。</p><p>此方法会确保执行所有beforeunload 和 unload事件处理程序。 可以在退出窗口之前的beforeunload事件处理程序中返回false取消退出。</p><h3 id="app-exit-exitCode"><a href="#app-exit-exitCode" class="headerlink" title="app.exit([exitCode])"></a>app.exit([exitCode])</h3><p>立即退出程序并返回 exitCode。exitCode 的默认值是 0。</p><p>所有窗口都将立即被关闭（不会弹出询问提示），而且 before-quit 和 will-quit 事件也不会被触发</p><h3 id="app-relaunch-options"><a href="#app-relaunch-options" class="headerlink" title="app.relaunch([options])"></a>app.relaunch([options])</h3><p>options Object (可选)</p><p>args String<br>execPath String (可选)<br>从当前实例退出，重启应用。</p><p>默认情况下，新的实例会和当前实例使用相同的工作目录以及命令行参数。 当设置了 args 参数时， args 将作为命令行参数传递。 当设置了 execPath ，execPath 将被执行以重新启动，而不是当前的应用程序。</p><p>请注意, 此方法在执行时不会退出当前的应用程序, 你需要在调用 app.relaunch 方法后再执行 app. quit 或者 app.exit 来让应用重启。</p><p>当 app.relaunch 被多次调用时,多个实例将在当前实例退出后启动。</p><p>立即重启当前实例并向新的实例添加新的命令行参数的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">relaunch</span>(&#123; <span class="attr">args</span>: process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">concat</span>([<span class="string">&#x27;--relaunch&#x27;</span>]) &#125;)</span><br><span class="line">app.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="app-focus"><a href="#app-focus" class="headerlink" title="app.focus()"></a>app.focus()</h3><p>在 Linux 系统中, 使第一个可见窗口获取焦点。在 macOS 上, 让该应用成为活动应用程序。在 Windows 上, 使应用的第一个窗口获取焦点。</p><h3 id="app-hide-macos"><a href="#app-hide-macos" class="headerlink" title="app.hide() macos"></a>app.hide() macos</h3><p>隐藏所有的应用窗口，不是最小化.</p><h3 id="app-show-macOS"><a href="#app-show-macOS" class="headerlink" title="app.show() macOS"></a>app.show() macOS</h3><p>显示所有被隐藏的应用窗口。需要注意的是，这些窗口不会自动获取焦点。</p><h3 id="app-getAppPath"><a href="#app-getAppPath" class="headerlink" title="app.getAppPath()"></a>app.getAppPath()</h3><p>返回 String 类型 - 当前应用程序所在目录</p><h3 id="app-getVersion"><a href="#app-getVersion" class="headerlink" title="app.getVersion()"></a>app.getVersion()</h3><p>返回 String-加载的应用程序的版本。 如果应用程序的 package. json 文件中找不到版本号, 则返回当前包或者可执行文件的版本。</p><h3 id="app-getName"><a href="#app-getName" class="headerlink" title="app.getName()"></a>app.getName()</h3><p>返回 String-当前应用程序的名称, 它是应用程序的 package. json 文件中的名称。</p><p>根据 npm 的命名规则, 通常 package.json 中的 name 字段是一个短的小写字符串。 通常还应该指定一个 productName 字段, 是首字母大写的完整名称，用于表示应用程序的名称。Electron 会优先使用这个字段作为应用名。</p><h3 id="app-setName-name"><a href="#app-setName-name" class="headerlink" title="app.setName(name)"></a>app.setName(name)</h3><p>name String<br>设置当前应用程序的名字</p><h3 id="app-getLocale"><a href="#app-getLocale" class="headerlink" title="app.getLocale()"></a>app.getLocale()</h3><p>返回 string——当前应用程序的语言环境。可能的返回值被记录在这里。</p><p>要设置区域，则需要在应用启动时使用命令行时打开开关，你可以在这里找到。</p><p>注意: 分发打包的应用程序时, 你必须指定 locales 文件夹。</p><p>注意： 在 Windows 上，你必须得等 ready 事件触发之后，才能调用该方法</p><h3 id="app-addRecentDocument-path-macOS-Windows"><a href="#app-addRecentDocument-path-macOS-Windows" class="headerlink" title="app.addRecentDocument(path) macOS Windows"></a>app.addRecentDocument(path) macOS Windows</h3><p>path String<br>将此 path 添加到最近打开的文件列表中</p><p>这个列表由操作系统进行管理。在 Windows 中从任务栏访问列表, 在 macOS 中通过 dock 菜单进行访问。</p><h3 id="app-clearRecentDocuments-macOS-Windows"><a href="#app-clearRecentDocuments-macOS-Windows" class="headerlink" title="app.clearRecentDocuments() macOS Windows"></a>app.clearRecentDocuments() macOS Windows</h3><p>清空最近打开的文档列表</p><h2 id="app-setAsDefaultProtocolClient-protocol-path-args"><a href="#app-setAsDefaultProtocolClient-protocol-path-args" class="headerlink" title="app.setAsDefaultProtocolClient(protocol[, path, args])"></a>app.setAsDefaultProtocolClient(protocol[, path, args])</h2><p><strong>设置别人可以唤醒此软件的协议</strong><br>protocol String - 协议的名称, 不包含 :&#x2F;&#x2F;。 如果您希望应用程序处理 electron:&#x2F;&#x2F; 的链接, 请将 electron 作为该方法的参数.<br>pathString (可选) Windows -默认为 process.execPath<br>args String Windows - 默认为空数组<br>返回 Boolean-是否成功调用。</p><p>此方法将当前可执行文件设置为协议(也称为URI方案) 的默认处理程序。 它允许您将应用程序更深入地集成到操作系统中。 一旦注册成功, 所有 your-protocol:&#x2F;&#x2F; 格式的链接都会使用你的程序打开。 整个链接 (包括协议) 将作为参数传递给您的应用程序。</p><p>在 Windows 系统中，你可以提供可选参数 path，可执行文件的路径和 args (在启动时传递给可执行文件的参数数组)</p><p>注意: 在 macOS 上, 您只能注册已添加到应用程序的 info. plist 中的协议, 在运行时不能对其进行修改。 但是，您可以在构建时使用简单的文本编辑器或脚本更改文件。 有关详细信息，请参阅 Apple’s documentation</p><p>API 在内部使用 Windows 注册表和 LSSetDefaultHandlerForURLScheme。</p><h3 id="app-enableSandbox-Experimental-macOS-Windows"><a href="#app-enableSandbox-Experimental-macOS-Windows" class="headerlink" title="app.enableSandbox() Experimental macOS Windows"></a>app.enableSandbox() Experimental macOS Windows</h3><p>在应用程序上启用完全沙盒模式。</p><p>这个方法只能在应用程序准备就绪（ready）之前调用。</p><h3 id="app-enableMixedSandbox-Experimental-macOS-Windows"><a href="#app-enableMixedSandbox-Experimental-macOS-Windows" class="headerlink" title="app.enableMixedSandbox() Experimental macOS Windows"></a>app.enableMixedSandbox() Experimental macOS Windows</h3><p>在应用程序上启用混合沙盒模式。</p><p>这个方法只能在应用程序准备就绪（ready）之前调用。</p><h3 id="app-isInApplicationsFolder-macOS"><a href="#app-isInApplicationsFolder-macOS" class="headerlink" title="app.isInApplicationsFolder() macOS"></a>app.isInApplicationsFolder() macOS</h3><p>返回 Boolean- 应用程序当前是否在系统应用程序文件夹运行。 可以搭配 app. moveToApplicationsFolder ()使用</p><h3 id="app-dock-bounce-type-macOS"><a href="#app-dock-bounce-type-macOS" class="headerlink" title="app.dock.bounce([type]) macOS"></a>app.dock.bounce([type]) macOS</h3><p>type String (可选) - 可以为critical 或 informational. 默认值为 informational<br>当传入的是 critical 时, dock 中的应用将会开始弹跳, 直到这个应用被激活或者这个请求被取消。</p><p>当传入的是 informational 时, dock 中的图标只会弹跳一秒钟。但是, 这个请求仍然会激活, 直到应用被激活或者请求被取消。</p><p>返回 Integer 这个请求的 ID</p><h3 id="app-dock-cancelBounce-id-macOS"><a href="#app-dock-cancelBounce-id-macOS" class="headerlink" title="app.dock.cancelBounce(id) macOS"></a>app.dock.cancelBounce(id) macOS</h3><p>id Integer<br>取消这个 id 对应的请求。</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-生命周期</title>
      <link href="/posts/23055/"/>
      <url>/posts/23055/</url>
      
        <content type="html"><![CDATA[<blockquote><p>控制你的应用程序的事件生命周期<br>文档地址：<a href="https://electronjs.org/docs/api/app">https://electronjs.org/docs/api/app</a></p></blockquote><span id="more"></span><h2 id="electron-的生命周期"><a href="#electron-的生命周期" class="headerlink" title="electron 的生命周期"></a>electron 的生命周期</h2><p>app 对象会发出以下事件<br>文档地址：<a href="https://electronjs.org/docs/api/app">https://electronjs.org/docs/api/app</a></p><h3 id="window-all-closed-最后一个窗口被关闭"><a href="#window-all-closed-最后一个窗口被关闭" class="headerlink" title="window-all-closed 最后一个窗口被关闭"></a>window-all-closed 最后一个窗口被关闭</h3><p>最后一个窗口被关闭时退出应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="read-当-Electron-完成初始化时被触发"><a href="#read-当-Electron-完成初始化时被触发" class="headerlink" title="read 当 Electron 完成初始化时被触发"></a>read 当 Electron 完成初始化时被触发</h3><p>当 Electron 完成初始化时被触发。 在 macOS 中, 如果从通知中心中启动，那么 launchInfo 中的 userInfo 包含用来打开应用程序的 NSUserNotification 信息。 你可以通过调用 app.isReady() 方法来检查此事件是否已触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;read&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="will-finish-launching"><a href="#will-finish-launching" class="headerlink" title="will-finish-launching"></a>will-finish-launching</h3><p>当应用程序完成基础的启动的时候被触发<br>在 Windows 和 Linux 中, will-finish-launching 事件与 ready 事件是相同的; 在 macOS 中，这个事件相当于 NSApplication 中的 applicationWillFinishLaunching 提示。 通常会在这里为 open-file 和 open-url 设置监听器，并启动崩溃报告和自动更新。</p><p>绝大部分情况下，你必须在ready事件句柄中处理所有事务。</p><h3 id="quit-在应用程序退出时发出"><a href="#quit-在应用程序退出时发出" class="headerlink" title="quit 在应用程序退出时发出"></a>quit 在应用程序退出时发出</h3><p>在应用程序退出时发出<br>注:在 Windows 系统中，如果应用程序因系统关机&#x2F;重启或用户注销而关闭，那么这个事件不会被触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="will-quit"><a href="#will-quit" class="headerlink" title="will-quit"></a>will-quit</h3><p>当所有窗口都已关闭并且应用程序将退出时发出。调用 event. preventDefault () 将阻止终止应用程序的默认行为。<br>关于 window-all-closed 和 will-quit 事件之间的差异, 请参见 window-all-closed 事件的说明。<br>注:在 Windows 系统中，如果应用程序因系统关机&#x2F;重启或用户注销而关闭，那么这个事件不会被触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;will-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="before-quit"><a href="#before-quit" class="headerlink" title="before-quit"></a>before-quit</h3><p>在应用程序开始关闭窗口之前触发。 调用 event.preventDefault() 会阻止默认的行为。默认的行为是终结应用程序。<br>注意: 如果应用程序退出是因调用了autoUpdater. quitAndInstall (), 所有窗口都会发出close Event 然后 before-quit Event 并关闭所有窗口。</p><p>注:在 Windows 系统中，如果应用程序因系统关机&#x2F;重启或用户注销而关闭，那么这个事件不会被触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;before-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="window-all-closed-当所有的窗口都被关闭时触发"><a href="#window-all-closed-当所有的窗口都被关闭时触发" class="headerlink" title="window-all-closed 当所有的窗口都被关闭时触发"></a>window-all-closed 当所有的窗口都被关闭时触发</h3><p>如果你没有监听此事件并且所有窗口都关闭了，默认的行为是控制退出程序；但如果你监听了此事件，你可以控制是否退出程序。 如果用户按下了 Cmd + Q，或者开发者调用了 app.quit()，Electron 会首先关闭所有的窗口然后触发 will-quit 事件，在这种情况下 window-all-closed 事件不会被触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="主动打开类"><a href="#主动打开类" class="headerlink" title="主动打开类"></a>主动打开类</h2><h3 id="open-file-macos"><a href="#open-file-macos" class="headerlink" title="open-file macos"></a>open-file macos</h3><p>当用户想要在应用中打开一个文件时发出。 open-file 事件通常在应用已经打开，并且系统要再次使用该应用打开文件时发出。 open-file也会在一个文件被拖到 dock 并且还没有运行的时候发出。 请确认在应用启动的时候(甚至在 ready 事件发出前) 就对 open-file 事件进行监听。</p><p>如果你想处理这个事件，你应该调用 event.preventDefault() 。</p><p>在 Windows 系统中，你需要解析 process.argv (在主进程中) 来获取文件路径</p><h3 id="open-url-macos"><a href="#open-url-macos" class="headerlink" title="open-url macos"></a>open-url macos</h3><p>当用户想要在应用中打开一个 URL 时发出。 应用程序的 Info. plist 文件必须在 CFBundleURLTypes 项中定义 url 方案, 并将 NSPrincipalClass 设置为 AtomApplication。</p><p>如果你想处理这个事件，你应该调用 event.preventDefault() 。</p><h3 id="activate-macos"><a href="#activate-macos" class="headerlink" title="activate macos"></a>activate macos</h3><p>当应用被激活时发出。 各种操作都可以触发此事件, 例如首次启动应用程序、尝试在应用程序已运行时或单击应用程序的坞站或任务栏图标时重新激活它。</p><h3 id="new-window-for-tab-macos"><a href="#new-window-for-tab-macos" class="headerlink" title="new-window-for-tab macos"></a>new-window-for-tab macos</h3><p>当用户单击 macOS 新选项卡按钮时发出。仅当当前 BrowserWindow 具有 tabbingIdentifier 时, 才会显示新的选项卡按钮</p><h3 id="browser-window-blur"><a href="#browser-window-blur" class="headerlink" title="browser-window-blur"></a>browser-window-blur</h3><p>在窗口失去焦点时触发</p><h3 id="browser-window-created"><a href="#browser-window-created" class="headerlink" title="browser-window-created"></a>browser-window-created</h3><p>在创建新的 browserWindow 时发出</p><h3 id="web-contents-created"><a href="#web-contents-created" class="headerlink" title="web-contents-created"></a>web-contents-created</h3><p>在创建新的 webContents 时发出。</p><h3 id="gpu-process-crashed"><a href="#gpu-process-crashed" class="headerlink" title="gpu-process-crashed"></a>gpu-process-crashed</h3><p>当 gpu 进程崩溃或被杀时触发</p><h3 id="session-created"><a href="#session-created" class="headerlink" title="session-created"></a>session-created</h3><p>当 Electron创建了一个新的 session后被触发.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;session-created&#x27;</span>, <span class="function">(<span class="params">event, session</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(session)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm-小巧而又功能别致的包</title>
      <link href="/posts/32327/"/>
      <url>/posts/32327/</url>
      
        <content type="html"><![CDATA[<p>记录一些偶尔看到的不知名的，但是又非常方便的 npm 包</p><span id="more"></span><h3 id="serve-静态服务器"><a href="#serve-静态服务器" class="headerlink" title="serve 静态服务器"></a>serve 静态服务器</h3><p>作用：一个简单的，零配置的命令行http服务器<br>官网：<a href="https://github.com/zeit/serve">https://github.com/zeit/serve</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install serve -g</span><br><span class="line">serve -l <span class="number">5000</span> ./</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以是一个服务器的中间件</span></span><br><span class="line"><span class="comment">// serve 的核心是 serve-handler</span></span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">&#x27;serve-handler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">handler</span>(request, response);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running at http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="http-serve-静态服务器"><a href="#http-serve-静态服务器" class="headerlink" title="http-serve 静态服务器"></a>http-serve 静态服务器</h3><p>作用：一个简单的，零配置的命令行http服务器<br>官网：<a href="https://github.com/indexzero/http-server">https://github.com/indexzero/http-server</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br><span class="line"><span class="comment">// http-server [path] [options]</span></span><br><span class="line">http-server ./ -p <span class="number">5000</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">http-server -p <span class="number">5000</span> ./</span><br></pre></td></tr></table></figure><h3 id="rimraf-删除文件"><a href="#rimraf-删除文件" class="headerlink" title="rimraf 删除文件"></a>rimraf 删除文件</h3><p>作用：以包的形式包装rm -rf命令，删除的极快<br>官网：<a href="https://github.com/isaacs/rimraf">https://github.com/isaacs/rimraf</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install rimraf -g</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm install rimraf --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rimraf node_modules</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> rimraf = <span class="built_in">require</span>(<span class="string">&#x27;rimraf&#x27;</span>);</span><br><span class="line"><span class="title function_">rimraf</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123; <span class="comment">// 删除当前目录下的 test.txt</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="david-过期的依赖包"><a href="#david-过期的依赖包" class="headerlink" title="david 过期的依赖包"></a>david 过期的依赖包</h3><p>作用：帮你找到已经过期的依赖包<br>官网：<a href="https://github.com/alanshaw/david">https://github.com/alanshaw/david</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> david = <span class="built_in">require</span>(<span class="string">&#x27;david&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./package.json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> manifest = data.<span class="title function_">toString</span>();<span class="comment">//将二进制的数据转换为字符串</span></span><br><span class="line">    manifest = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(manifest);<span class="comment">//将字符串转换为json对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输出json&#x27;</span>, manifest);</span><br><span class="line">    david.<span class="title function_">getDependencies</span>(manifest, <span class="keyword">function</span> (<span class="params">er, deps</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;latest dependencies information for&#x27;</span>, manifest.<span class="property">name</span>);</span><br><span class="line">        <span class="title function_">listDependencies</span>(deps);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listDependencies</span> (deps) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(deps).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">depName</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> required = deps[depName].<span class="property">required</span> || <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> stable = deps[depName].<span class="property">stable</span> || <span class="string">&#x27;None&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> latest = deps[depName].<span class="property">latest</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s Required: %s Stable: %s Latest: %s&#x27;</span>, depName, required, stable, latest);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="localtunnel-内网穿透"><a href="#localtunnel-内网穿透" class="headerlink" title="localtunnel 内网穿透"></a>localtunnel 内网穿透</h3><p>localtunnel：把本机服务暴露到外网<br>官网：<a href="https://github.com/localtunnel/localtunnel">https://github.com/localtunnel/localtunnel</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g localtunnel</span><br><span class="line"></span><br><span class="line">lt --port <span class="number">8000</span></span><br><span class="line"><span class="comment">// 生成一个url</span></span><br><span class="line"><span class="comment">// your url is: https://gentle-walrus-65.localtunnel.me</span></span><br></pre></td></tr></table></figure><h3 id="fanyi-翻译工具"><a href="#fanyi-翻译工具" class="headerlink" title="fanyi 翻译工具"></a>fanyi 翻译工具</h3><p>作用：翻译工具，可以翻译汉语，也可以翻译英语，带耳机的话，还可以听到声音<br>特别有意思</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install fanyi -g</span><br><span class="line"></span><br><span class="line">fanyi 你好</span><br></pre></td></tr></table></figure><p><img src="/Snipaste_2019-01-13_12-05-10.png" alt="&#39;&#39;"></p>]]></content>
      
      
      <categories>
          
          <category> Npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-初识</title>
      <link href="/posts/49898/"/>
      <url>/posts/49898/</url>
      
        <content type="html"><![CDATA[<p>第一次接触这么高大上的跨平台技术，<br>听说 vscode 也是它写出来的呢</p><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。<br>Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><p>看过官方文档，并自己尝试了一些demo，发觉使用electron 编写任何应用程序真的只是用HTML，CSS和JavaScript来构建单页面应用程序<br>不要奢望可以从官网上学习到更多前端的技术，其实本质上还是前端开发，只是多了一个核心库，为：<strong>electron</strong><br>一切跟操作系统相关的东西，都是由nodejs实现，node可以做到什么，electron就可以做到什么，只是electron提供了更方便的图像界面接口</p><h2 id="2-一些可以简单实现的界面功能"><a href="#2-一些可以简单实现的界面功能" class="headerlink" title="2 一些可以简单实现的界面功能"></a>2 一些可以简单实现的界面功能</h2><h3 id="1-渲染启动"><a href="#1-渲染启动" class="headerlink" title="1 渲染启动"></a>1 渲染启动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贼简单</span></span><br><span class="line"><span class="comment">// 首先引入electron</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此监听一些生命周期钩子</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Electron 会在初始化后并准备</span></span><br><span class="line">  <span class="comment">// 创建浏览器窗口时，调用这个函数。</span></span><br><span class="line">  <span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">  <span class="comment">// 在这里进行窗口创建</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当全部窗口关闭时退出。</span></span><br><span class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span></span><br><span class="line">  <span class="comment">// 通常在应用程序中重新创建一个窗口。</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对app 监听是进行主进程的监听</span></span><br><span class="line"><span class="comment">// 还可以单独对创建的窗口进行监听 每创建一个窗口都可以被称为一个渲染进程</span></span><br></pre></td></tr></table></figure><h3 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 接下来创建一个窗口</span></span><br><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;)</span><br><span class="line"><span class="comment">// 然后加载应用的 index.html。或者一个远程地址 win.loadURL(&#x27;http://localhost:7001&#x27;)</span></span><br><span class="line">win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开开发者工具</span></span><br><span class="line">win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>() <span class="comment">// 也可以动态打开，随时执行随时打开</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="窗口的生命周期监听"><a href="#窗口的生命周期监听" class="headerlink" title="窗口的生命周期监听"></a>窗口的生命周期监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当窗口关闭时触发</span></span><br><span class="line">win.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  win = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多播</title>
      <link href="/posts/7684/"/>
      <url>/posts/7684/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/9GAbSb_hlXPu66HWInJOww==/109951162846052486.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" />灵活选取Subject对象进行多播：multicast只多播数据流中最后一个数据：publishLast对数据流中给定数量的数据进行多播：publishReplay拥有默认数据的多播：publishBehavior<span id="more"></span>### 多播就是让一个数据流的内容被多个Observable订阅<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>灵活选取Subject对象进行多播：multicast</li><li>只多播数据流中最后一个数据：publishLast</li><li>对数据流中给定数量的数据进行多播：publishReplay</li><li>拥有默认数据的多播：publishBehavior</li></ul><p>在RxJs中，Observbale和Observer的关系就是前者在播放内容，后者在收听内容<br>播放的内容大致可以分为3种</p><ul><li>单播</li><li>广播</li><li>多播</li></ul><p>所谓单播，就是一个播放这对应一个收听者，一对一的关系<br>广播：一个收听者对于多个播放者，RxJs不支持广播，因为已经有很多现成的解决方案，例如：EventEmitter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">EventEmitter</span> <span class="keyword">from</span> <span class="string">&#x27;event&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> eventHub = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line">eventHub.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">info</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(info)&#125;);</span><br><span class="line">eventHub.<span class="title function_">emit</span>(<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;some data&#x27;</span>)</span><br><span class="line">eventHub.<span class="title function_">emit</span>(<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;some other data&#x27;</span>)</span><br></pre></td></tr></table></figure><p>广播的问题是，发布消息的根本不着调听众是什么样的人，于是筛选消息的责任就完全落在了接收方的身上，而且广播中容易造成频道冲突<br>就像无线电的共用频段<br>多播：一个播放者对应一个收听者<br>注意，clod 的Observable无法实现多播</p><p><strong>Hot Cold 数据流差异</strong><br>所谓Clod的数据流就是每次被subscribe都产生一个全新的数据序列的数据流<br>所谓Hot数据流就是无论有多少Observer来subscribe，推给Observable的都是一样的数据源，满足这一种条件的，就是Hot Observable</p><p>Hot 和 Cold 都具有懒的特质，不过Cold更懒一些，两者的数据管道内逻辑都是只有存在订阅者才会执行，<br>Cold 更懒体现在，如果没有订阅者，连数据都不会真正产生，对于Hot Observable 没有订阅者的情况，数据依旧产生，只不过不传入数据管道</p><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 多播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rxjs-异常错误处理</title>
      <link href="/posts/459839095/"/>
      <url>/posts/459839095/</url>
      
        <content type="html"><![CDATA[<p>rxjs 异常错误处理<br>catch<br>retry retryWhen 重试<br>finally</p><span id="more"></span><h3 id="catch-捕获上游产生的异常错误"><a href="#catch-捕获上游产生的异常错误" class="headerlink" title="catch 捕获上游产生的异常错误"></a>catch 捕获上游产生的异常错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throwOnUnluckyNumber</span> = value =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;unlucky number 4&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> error$ = source$.<span class="title function_">map</span>(throwOnUnluckyNumber)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">catch</span>$ = error$.<span class="title function_">catch</span>(<span class="function">(<span class="params">err, caught$</span>) =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">8</span>))</span><br><span class="line"><span class="comment">// catch 接受两个参数，</span></span><br><span class="line"><span class="comment">// 第一个参数是error,也就是被捕获的错误</span></span><br><span class="line"><span class="comment">// 第二个参数是一个Observabled对象，代表上游紧邻的那个Observable对象，返回的数据会被当恢复现场用的数据传递给下游</span></span><br></pre></td></tr></table></figure><h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>catch 主要用于恢复，但是这种恢复只是往数据流管道里塞另外的数据<br>让数据流得以继续，很多时候，这样还是不够的，毕竟塞进去的数据并不是真正预期的数据，<br>这时候，如果重来一次有肯呢个获得正确结果，就应该用上‘重试’试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throwOnUnluckyNumber</span> = value =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;unlucky number 4&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> error$ = source$.<span class="title function_">map</span>(throwOnUnluckyNumber)</span><br><span class="line"><span class="keyword">const</span> retry$ = error$.<span class="title function_">retry</span>(<span class="number">2</span>); <span class="comment">// 重试2次</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">catch</span>$ = retry$.<span class="title function_">catch</span>(<span class="function">(<span class="params">err, caught$</span>) =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">8</span>))</span><br><span class="line"><span class="comment">// retry 接受一个参数数值参数number,用于指定重试的次数，</span></span><br><span class="line"><span class="comment">// 如果number 负数或没有number参数，那么就是无限次retry</span></span><br></pre></td></tr></table></figure><h3 id="retryWhen-延迟重试-有节奏的控制retry"><a href="#retryWhen-延迟重试-有节奏的控制retry" class="headerlink" title="retryWhen 延迟重试,有节奏的控制retry"></a>retryWhen 延迟重试,有节奏的控制retry</h3><p>retryWhen 接受一个函数参数，这个参数称为 notifer ,用于控制重试的节奏和次数<br>notifer有一个参数名为error$(由错误组成的Observable对象)<br>notifer每吐出一个数据，那么retry就会重试一次</p><h4 id="延时重试"><a href="#延时重试" class="headerlink" title="延时重试"></a>延时重试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> error$ = source$.<span class="title function_">map</span>(throwOnUnluckyNumber)</span><br><span class="line"><span class="keyword">const</span> retry$ = error$.<span class="title function_">retryWhten</span>(err$ =&gt; err$.<span class="title function_">delay</span>(<span class="number">1000</span>)); <span class="comment">// 1000毫秒后延迟开始重试</span></span><br></pre></td></tr></table></figure><h4 id="用retryWhen-实现-retry-功能"><a href="#用retryWhen-实现-retry-功能" class="headerlink" title="用retryWhen 实现 retry 功能"></a>用retryWhen 实现 retry 功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">retryWhen</span> = <span class="keyword">function</span> (<span class="params">maxCount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">retryWhen</span>( err$ =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> err$.<span class="title function_">scan</span>(<span class="function">(<span class="params">errorCount, err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (errorCount &gt;= maxCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> errprCount + <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="延迟并有上限的重试"><a href="#延迟并有上限的重试" class="headerlink" title="延迟并有上限的重试"></a>延迟并有上限的重试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">retryWhen</span> = <span class="keyword">function</span> (<span class="params">maxCount, delayMilliseconds</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">retryWhen</span>( err$ =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> err$.<span class="title function_">scan</span>(<span class="function">(<span class="params">errorCount, err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (errorCount &gt;= maxCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> errprCount + <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">0</span>).<span class="title function_">delay</span>(delayMilliseconds)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递增延时重置"><a href="#递增延时重置" class="headerlink" title="递增延时重置"></a>递增延时重置</h4><p>重试策略每次重试之间的延时间隔不是固定的，这样更加科学</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">retryWhen</span> = <span class="keyword">function</span> (<span class="params">maxCount, delayMilliseconds</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">retryWhen</span>( err$ =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> err$.<span class="title function_">scan</span>(<span class="function">(<span class="params">errorCount, err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (errorCount &gt;= maxCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> errprCount + <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">0</span>).<span class="title function_">delayWhen</span>( <span class="function"><span class="params">errorCount</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> delayTime = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, errorCount - <span class="number">1</span>) * initialDelay</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">timer</span>(delayTime)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="finally-用于执行无论出错还是不出错都要做的事情"><a href="#finally-用于执行无论出错还是不出错都要做的事情" class="headerlink" title="finally 用于执行无论出错还是不出错都要做的事情"></a>finally 用于执行无论出错还是不出错都要做的事情</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> error$ = source$.<span class="title function_">map</span>(throwOnUnluckyNumber)</span><br><span class="line"><span class="keyword">const</span> final$ = error$.<span class="title function_">retry</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err, caught$</span>) =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">8</span>))</span><br><span class="line">  .<span class="title function_">finally</span>( <span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="重试的本质"><a href="#重试的本质" class="headerlink" title="重试的本质"></a>重试的本质</h2><h4 id="无论是retryWhen-还是retry-，所谓的重试，其实就是重新订阅一遍上游Observable对象的过程，"><a href="#无论是retryWhen-还是retry-，所谓的重试，其实就是重新订阅一遍上游Observable对象的过程，" class="headerlink" title="无论是retryWhen 还是retry ，所谓的重试，其实就是重新订阅一遍上游Observable对象的过程，"></a>无论是retryWhen 还是retry ，所谓的重试，其实就是重新订阅一遍上游Observable对象的过程，</h4><h4 id="在订阅上游的同时，会退订上一次的订阅，所以，如果上游数据吐出数据较快，错误较多，那么也不要紧，只有最后一次的错误才会被订阅！"><a href="#在订阅上游的同时，会退订上一次的订阅，所以，如果上游数据吐出数据较快，错误较多，那么也不要紧，只有最后一次的错误才会被订阅！" class="headerlink" title="在订阅上游的同时，会退订上一次的订阅，所以，如果上游数据吐出数据较快，错误较多，那么也不要紧，只有最后一次的错误才会被订阅！"></a>在订阅上游的同时，会退订上一次的订阅，所以，如果上游数据吐出数据较快，错误较多，那么也不要紧，只有最后一次的错误才会被订阅！</h4><h3 id="即：重试就是-退订-订阅"><a href="#即：重试就是-退订-订阅" class="headerlink" title="即：重试就是 退订+订阅"></a>即：重试就是 退订+订阅</h3>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转化操作符</title>
      <link href="/posts/1630954835/"/>
      <url>/posts/1630954835/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/4gzU-pTgbwBLHwx4-CJcgw==/903798558032135.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" />map, mapTo, pluckscan mergeScan<span id="more"></span><h3 id="map-数据转化"><a href="#map-数据转化" class="headerlink" title="map 数据转化"></a>map 数据转化</h3><p>接受一个函数作为参数，这个函数通常称为project，指定了数据映射的逻辑<br>第二个参数指定this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>, <span class="variable language_">this</span>)</span><br><span class="line"><span class="comment">// 输出 0 2 4 8 。。。</span></span><br></pre></td></tr></table></figure><h3 id="mapTo-数据转化"><a href="#mapTo-数据转化" class="headerlink" title="mapTo 数据转化"></a>mapTo 数据转化</h3><p>将输出映射为另一个固定的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">mapTo</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用map实现</span></span><br><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mapTo</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pluck"><a href="#pluck" class="headerlink" title="pluck"></a>pluck</h3><p>pluck 的含义时拔，pluck 就是把上游数据中特定字段的值拔出来<br>所以pluck的参数就是字段的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Rxjs&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Angular&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">pluck</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// 输出 Rxjs Angular React Vue</span></span><br></pre></td></tr></table></figure><h3 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h3><p>scan 都是规约函数<br>sacn reduce 的区别在于sacn对上游每一个数据都会产生一个规约结果，<br>而reduce是对上游所有数据进行规约，<br>reduce最多只给下游传递一个数据吗如果上游数据永不完结，那reduce也永远不会产生数据，而scan完全可以处理一个永不完结的上游Observable对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">scan</span>(accumulation, value) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> accumulation + value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 每次source$触发scan规约函数都会被调用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤操作符</title>
      <link href="/posts/3458632642/"/>
      <url>/posts/3458632642/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/9GAbSb_hlXPu66HWInJOww==/109951162846052486.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" />filter，first，last，take，takeLasttakeWhile,takeUntil,skip,skipWhile,skipWhilethrottleTime,....<span id="more"></span><h3 id="filter-过滤操作符"><a href="#filter-过滤操作符" class="headerlink" title="filter 过滤操作符"></a>filter 过滤操作符</h3><blockquote><p>过滤掉不满足判定条件的数据</p></blockquote><h3 id="first-第一个数据"><a href="#first-第一个数据" class="headerlink" title="first 第一个数据"></a>first 第一个数据</h3><blockquote><p>获得满足判定条件的第一个数据</p></blockquote><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><blockquote><p>获得满足条件的最后一个数据</p></blockquote><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><blockquote><p>从数据流中选取最先出现的若干数据</p></blockquote><h3 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h3><blockquote><p>从数据流中选取最后出现的若干数据</p></blockquote><h3 id="takeWhile-takeUntil"><a href="#takeWhile-takeUntil" class="headerlink" title="takeWhile takeUntil"></a>takeWhile takeUntil</h3><blockquote><p>从数据流中选取数据直到某种情况发生</p></blockquote><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><blockquote><p>从数据流中忽略最先出现的若干数据</p></blockquote><h3 id="skipWhile-skipUntil"><a href="#skipWhile-skipUntil" class="headerlink" title="skipWhile skipUntil"></a>skipWhile skipUntil</h3><blockquote><p>从数据流中选取数据直到某种情况发生</p></blockquote><h3 id="throttleTime"><a href="#throttleTime" class="headerlink" title="throttleTime"></a>throttleTime</h3><blockquote><p>throttleTime的作用是：限制在duration时间范围内，从上游传递给下游数据的个数。也就是说，多少毫秒发送一个值给下游</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">throttleTime</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">// 意味着2000毫秒之内只有一个数据会传给下游</span></span><br></pre></td></tr></table></figure><h3 id="debounceTime"><a href="#debounceTime" class="headerlink" title="debounceTime"></a>debounceTime</h3><blockquote><p>debounceTime的作用是：让传递给下游的数据间隔不能小于给定的时间dueTime。也就是说，经过了dueTime时间没有产生数据，那么触发下游数据！</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">debounceTime</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">// 意味着2000毫秒之内没有产生数据，才把当前数据传给下游</span></span><br></pre></td></tr></table></figure><h3 id="throttle-用数据控制流量-多长时间返回下一个数据"><a href="#throttle-用数据控制流量-多长时间返回下一个数据" class="headerlink" title="throttle 用数据控制流量 多长时间返回下一个数据"></a>throttle 用数据控制流量 多长时间返回下一个数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">durationSelector</span> = value =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line">source$.<span class="title function_">throttle</span>(durationSelector)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出0 2 4</span></span><br></pre></td></tr></table></figure><p>每隔2000毫秒输出一个结果，即使用durationSelector来控制数据流与不流的阀门，实际操作用，durationSelector可以换成ajax等异步操作</p><h3 id="debounce-用数据控制流量-在多长时间的间隔内不返回数据"><a href="#debounce-用数据控制流量-在多长时间的间隔内不返回数据" class="headerlink" title="debounce 用数据控制流量 在多长时间的间隔内不返回数据"></a>debounce 用数据控制流量 在多长时间的间隔内不返回数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">durationSelector</span> = value =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">timer</span>(value % <span class="number">3</span> === <span class="number">0</span> ? <span class="number">2000</span> : <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">source$.<span class="title function_">debounce</span>(durationSelector)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 1 2   4 5   6 7 </span></span><br></pre></td></tr></table></figure><p>3的倍数因为延时2000毫秒而被抛弃</p><h3 id="auitTime-取时间段的最后一个数据-与throttleTime相似"><a href="#auitTime-取时间段的最后一个数据-与throttleTime相似" class="headerlink" title="auitTime 取时间段的最后一个数据,与throttleTime相似"></a>auitTime 取时间段的最后一个数据,与throttleTime相似</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">auditTime</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">// 输出：1 3 5</span></span><br></pre></td></tr></table></figure><p>与throttleTime相似，throttleTime取时间段内第一个数据，auditTime取时间段的最后一个数据</p><h3 id="sampleTime-sample-采样数据"><a href="#sampleTime-sample-采样数据" class="headerlink" title="sampleTime sample 采样数据"></a>sampleTime sample 采样数据</h3><p>sampleTime 不管上游source$产生数据的节奏如何，完全根据自己参数指定的好描述间隔节奏来给下游传递数据。<br>节奏与和上游数据完全无关，而auditTime是根据上游数据触发的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">500</span>).<span class="title function_">take</span>(<span class="number">2</span>).<span class="title function_">mapTo</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">3</span>).<span class="title function_">mapTo</span>(<span class="string">&#x27;B&#x27;</span>))</span><br><span class="line">    .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">500</span>).<span class="title function_">take</span>(<span class="number">3</span>).<span class="title function_">mapTo</span>(<span class="string">&#x27;C&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">sampleTime</span>(<span class="number">800</span>)</span><br></pre></td></tr></table></figure><p>注意：如果sampleTime发现一个时间块内上游没有产生数据，那在时间块结尾也不会给下游传递数据。</p><h3 id="distinct-只返回从没有出现过的数据"><a href="#distinct-只返回从没有出现过的数据" class="headerlink" title="distinct 只返回从没有出现过的数据"></a>distinct 只返回从没有出现过的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">source$.<span class="title function_">distinct</span>()</span><br><span class="line"><span class="comment">// 输出：0 1 2 3 complete</span></span><br></pre></td></tr></table></figure><p>distinct 提供了一个函数参数keySelector，用于定制distinct应该对比什么样属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(&#123;&#125;, &#123;&#125;, &#123;&#125;)</span><br><span class="line">source$.<span class="title function_">distinct</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p>为了防止内存泄漏(产生大量不同数据),distinct提供第二个可选的参数flush,<br>第二个参数可以是一个Observable对象，每当Observable对象产生数据是，distinct就清空‘唯一数据集合’,一切重来，这样就避免了内存泄漏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(&#123;&#125;, &#123;&#125;, &#123;&#125;)</span><br><span class="line">source$.<span class="title function_">distinct</span>(<span class="literal">null</span>, <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">500</span>))</span><br><span class="line"><span class="comment">// 这个值是什么不重要，重要的是它会清空distinct以前积压的所有唯一的数据</span></span><br></pre></td></tr></table></figure><h3 id="distinctUntilChanged-也是淘汰掉重复数据，但是直接跟上一个数据比较"><a href="#distinctUntilChanged-也是淘汰掉重复数据，但是直接跟上一个数据比较" class="headerlink" title="distinctUntilChanged 也是淘汰掉重复数据，但是直接跟上一个数据比较"></a>distinctUntilChanged 也是淘汰掉重复数据，但是直接跟上一个数据比较</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">source$.<span class="title function_">distinctUntilChange</span>()</span><br><span class="line"><span class="comment">// 输出：0,1,2,0,1,3</span></span><br></pre></td></tr></table></figure><p>distinctUntilChange也接受第二个参数，但是第二个参数需要返回一个bool类型的结果，(设计失误)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(&#123;&#125;, &#123;&#125;, &#123;&#125;)</span><br><span class="line">source$.<span class="title function_">distinctUntilChange</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">name</span> === b.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h2 id="其他过滤方式"><a href="#其他过滤方式" class="headerlink" title="其他过滤方式"></a>其他过滤方式</h2><h3 id="ignoreElements-忽略所有的元素"><a href="#ignoreElements-忽略所有的元素" class="headerlink" title="ignoreElements 忽略所有的元素"></a>ignoreElements 忽略所有的元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">ignoreElements</span>()</span><br><span class="line"><span class="comment">// 不输出任何结果</span></span><br></pre></td></tr></table></figure><h3 id="elementAt-把上游数据当成数组，只获取下标的那一个数据"><a href="#elementAt-把上游数据当成数组，只获取下标的那一个数据" class="headerlink" title="elementAt 把上游数据当成数组，只获取下标的那一个数据"></a>elementAt 把上游数据当成数组，只获取下标的那一个数据</h3><p>elementAt还有第二个参数，可以指定没有对应下班数据时的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">elementAt</span>(<span class="number">3</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h3 id="sigle"><a href="#sigle" class="headerlink" title="sigle"></a>sigle</h3><p>检查上游是否只要一个满足对应条件的数据，如果答案为‘是’，就向下游传递这个数据<br>如果为‘否’，就向下雨传递一个异常</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">single</span>(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$.<span class="title function_">single</span>(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"><span class="comment">// source$ 会持续产生递增整数，当source$产生数据2时，single就发现source$中产生了两个偶数，这时候就会立刻向下游传递下面的错误</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辅助类操作符</title>
      <link href="/posts/4054695600/"/>
      <url>/posts/4054695600/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/4zluTz1ckuBWIbWHzc5xQA==/109951163736812658.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" /><p>辅助类操作符<br>count，max，min，Reduce<br>every，find，findIndex<br>isEmpty，defaultEmpty</p><span id="more"></span><h2 id="第三大类：辅助类操作符"><a href="#第三大类：辅助类操作符" class="headerlink" title="第三大类：辅助类操作符"></a>第三大类：辅助类操作符</h2><table><thead><tr><th>操作符</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数据流中产生的所有数据个数</td></tr><tr><td>max min</td><td>获得数据流中的最大和最小数据</td></tr><tr><td>Reduce</td><td>对数据流中所有数据进行规约操作</td></tr><tr><td>every</td><td>判断一个数据流是否不包含任何数据</td></tr><tr><td>find findIndex</td><td>找到第一个满足判定条件的数据</td></tr><tr><td>isEmpty</td><td>判断一个数据流是否不包含任何数据</td></tr><tr><td>defaultEmpty</td><td>如果一个数据流为空就默认产生一个指定的数据</td></tr></tbody></table><p>例子：</p><h4 id="数学类操作符"><a href="#数学类操作符" class="headerlink" title="数学类操作符"></a>数学类操作符</h4><h4 id="count-max-min-reduce"><a href="#count-max-min-reduce" class="headerlink" title="count max min reduce"></a>count max min reduce</h4><p>所有的这些操作符都是实例操作符，还有一个共同特点，就是就些操作符必定会遍历上游Observable对象中突出的所有数据才给下游传递数据，也就是时说，他们就有在上游完结的时候，才给下游传递唯一数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count 的作用就是统计上游<span class="title class_">Observable</span>对象吐出的所有数据个数。</span><br><span class="line">max,min的作用就是取得上游<span class="title class_">Observable</span>吐出所有数据的最大值或最小值，第二个参数接受一个比较函数</span><br><span class="line">reduce 规约统计，跟原生数组的reduce作用一样，用法一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="every-find-findIndex"><a href="#every-find-findIndex" class="headerlink" title="every find findIndex"></a>every find findIndex</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">every 要求一个判定函数作为参数，上游<span class="title class_">Observable</span>吐出的每一个数据都会被这个判定函数检验，如果所有数据的判定结果都是<span class="literal">true</span>,那么上游<span class="title class_">Observable</span>对象完结的时候，如果有一个为<span class="literal">false</span>，那么立刻完结吐出<span class="literal">false</span>,基本和原生数组every方法作用一致</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEmpty 用于检查一个上游<span class="title class_">Observable</span>对象是不是‘空的’，所谓‘空的’<span class="title class_">Observable</span>是指没有吐出任何数据就完结的<span class="title class_">Observable</span>对象。</span><br></pre></td></tr></table></figure><h4 id="defaultEmpty-接受一个默认值作为参数，如果发现上游是空的，那么返回这个默认值"><a href="#defaultEmpty-接受一个默认值作为参数，如果发现上游是空的，那么返回这个默认值" class="headerlink" title="defaultEmpty 接受一个默认值作为参数，如果发现上游是空的，那么返回这个默认值"></a>defaultEmpty 接受一个默认值作为参数，如果发现上游是空的，那么返回这个默认值</h4>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并数据操作符</title>
      <link href="/posts/42779/"/>
      <url>/posts/42779/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/5ykSTnsCz2O_2HB7MZWiMA==/109951162950148761.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" />合并数据操作符concat，concatAll，merge，mergeAll，zip，zipAllcombineLatest，combineAll，withLatestFromrace，startWith，forkJoin，switch，exhaust<span id="more"></span><h2 id="第二大类：合并数据操作符"><a href="#第二大类：合并数据操作符" class="headerlink" title="第二大类：合并数据操作符"></a>第二大类：合并数据操作符</h2><table><thead><tr><th>操作符</th><th>功能</th></tr></thead><tbody><tr><td>concat concatAll</td><td>把多个数据以首尾相连方式合并</td></tr><tr><td>merge mergeAll</td><td>把多个数据流中数据以先到先得方式合并</td></tr><tr><td>zip zipAll</td><td>把多个数据流中最新产生的数据以一一对应方式合并</td></tr><tr><td>combineLatest combineAll withLatestFrom</td><td>持续合并多个数据流中最新产生的数据</td></tr><tr><td>race</td><td>从多个数据流中选取第一个产生内容的数据流</td></tr><tr><td>startWith</td><td>在数据流前面添加一个指定数据</td></tr><tr><td>forkJoin</td><td>只获取多个数据流最后产生的那个数据</td></tr><tr><td>switch exhaust</td><td>从高阶数据流中切换数据源</td></tr></tbody></table><p>例子：</p><h4 id="concat-首尾相连"><a href="#concat-首尾相连" class="headerlink" title="concat 首尾相连"></a>concat 首尾相连</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concat既有实例操作符，也有静态操作符方式</span></span><br><span class="line"><span class="keyword">const</span> source1$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> source2$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">const</span> concated$ = source1$.<span class="title function_">concat</span>(source2$);</span><br><span class="line"><span class="comment">// 还可以</span></span><br><span class="line"><span class="keyword">const</span> concated$ = <span class="title class_">Observable</span>.<span class="title function_">concat</span>(source1$, source2$);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">concat 的工作方式</span></span><br><span class="line"><span class="comment">1 从第一个Observable 对象获取数据，把数据传给下游</span></span><br><span class="line"><span class="comment">2 当第一个Observable 对象 complete 后，concat就会去第二个Observable对象获取数据</span></span><br><span class="line"><span class="comment">3 依次类推 直到最后一个Observable完结之后，concat产生的Observable也就完结了</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">concat 会在第一个Observable对象完结后去订阅下一个Observable对象，所以参与到conct的Observable对象应该都能完结。如果其中有一个Observable对象不会完结，那么后面的Observable对象永远都没有上场的机会</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="merge-先到先得快速通过"><a href="#merge-先到先得快速通过" class="headerlink" title="merge 先到先得快速通过"></a>merge 先到先得快速通过</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">merge 与concat不同，merge会第一事件订阅所有的上游Observable,然后对上游的数据采取‘先到先得’的策略，任何一个Observale只要有数据推下来，就立刻转给下游Observable对象。</span></span><br><span class="line"><span class="comment">merge 在第一时间就订阅上游的所有Observable对象，所以某个上游数据永不完结，也不影响其他的Observable对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> source1$ = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> source2$ = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">500</span>, <span class="number">1000</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> merged$ = <span class="title class_">Observable</span>.<span class="title function_">merge</span>(source1$, source2$);</span><br><span class="line">merged$.<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;complete&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 以上代码会每隔500毫秒输出一行结果，永不停歇</span></span><br><span class="line"><span class="comment">// 0A 0B 1A 1B 2A 2B ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步限流</span></span><br><span class="line"><span class="comment">// merge 可以有一个可选参数concurent,用于指定可以同时合并的Observable对象的个数</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">2</span> = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">3</span> = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> merged$ = source$<span class="number">1.</span><span class="title function_">merge</span>(source$<span class="number">2</span>, source$<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="zip-拉链式组合"><a href="#zip-拉链式组合" class="headerlink" title="zip:拉链式组合"></a>zip:拉链式组合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zip 要像拉链一样做到一对一咬合</span></span><br><span class="line"><span class="comment">// 只要任何一个上游的Observable对象完结，zip只要给这个完结的Observable对象吐出所有数据找到配对的数据，那么zip就会给下游一个complete信号</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">2</span> = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ziped$ = <span class="title class_">Observable</span>.<span class="title function_">zip</span>(source$<span class="number">1</span>, source$<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment">// complete</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据积压问题</span></span><br><span class="line"><span class="comment">// 可以使用节流(throttle)，防抖(debounce) 相关系列的操作符来抛弃不需要的值</span></span><br></pre></td></tr></table></figure><h4 id="combineLatest-合并最后一个数据"><a href="#combineLatest-合并最后一个数据" class="headerlink" title="combineLatest 合并最后一个数据"></a>combineLatest 合并最后一个数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当任何一个上游Observable产生数时，从所有输入Observable对象中拿最后一次产生的数据（最新数据）,然后把这些数据组合起来传给下游。注意，这种方式和zip不一样，zip对上游数据只使用一次，用过一个数据之后就不会再用，但是combineLatest可能会反复使用上游产生的最新数据，只要上游不产生新的数据，那combineLatest就会反复使用这个上游最后一次产生的数据</span></span><br><span class="line"><span class="comment">// 只要当所有上游Observable都完结后，combineLatest才会给下游一个complete信号，表示不会有任何数据更新了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定制下游数据</span></span><br><span class="line"><span class="comment">// combinLatest的最后一个参数可以是一个函数，这里我们称为project,project的作用是让combineLatest把所有上游数据的最新数据扔给下游之前做一下组个处理，这样就可以不用传递一个数组下去，可以传递任何由最新数据产生的对象</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">2</span>= <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">project</span> = (<span class="params">a, b</span>) =&gt; <span class="string">`<span class="subst">$&#123;a&#125;</span> and <span class="subst">$&#123;b&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> result$ source1$.<span class="title function_">combineLatest</span>(source2$, project)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重依赖问题</span></span><br><span class="line"><span class="keyword">const</span> origin$ = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = origin$.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = origin$.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x+<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source1$.<span class="title function_">combineLatest</span>(source$<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 这里source$1和source$2会被origin$同时触发， 同一时间内应该只得到1个输出才对，但是现实是得到2个</span></span><br><span class="line"><span class="comment">// 1秒后</span></span><br><span class="line">[<span class="string">&#x27;1a&#x27;</span>, <span class="string">&#x27;0b&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;1a&#x27;</span>, <span class="string">&#x27;1b&#x27;</span>]</span><br><span class="line"><span class="comment">// 2秒后</span></span><br><span class="line">[<span class="string">&#x27;2a&#x27;</span>, <span class="string">&#x27;1b&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;2a&#x27;</span>, <span class="string">&#x27;2b&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="withLatestFrom-类似于-combineLatest-但是上游只能由一个Observable对象驱动"><a href="#withLatestFrom-类似于-combineLatest-但是上游只能由一个Observable对象驱动" class="headerlink" title="withLatestFrom 类似于 combineLatest,但是上游只能由一个Observable对象驱动"></a>withLatestFrom 类似于 combineLatest,但是上游只能由一个Observable对象驱动</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withLatestFrom只有实例操作符的形式(因为：使用此操作符时，Observable对象地位不对等了)</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">2</span>= <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$<span class="number">1.</span><span class="title function_">withLatestFrom</span>(source$<span class="number">2</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b);</span><br><span class="line"><span class="comment">// 作为参数的Observable对象只能贡献数据，不能控制产生数据的时机，节奏</span></span><br><span class="line"><span class="comment">// 每隔2秒输出一行</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// withLatestFrom combineLatest 的选择：</span></span><br><span class="line"><span class="comment">// 如果要合并完全独立的Observable对象，使用combineLatest</span></span><br><span class="line"><span class="comment">// 如果要把一个Observable对象‘映射’新的数据流，同时要从其他Observable对象获取最新数据，那么使用withLatestFrom</span></span><br></pre></td></tr></table></figure><h4 id="race-胜者通吃"><a href="#race-胜者通吃" class="headerlink" title="race 胜者通吃"></a>race 胜者通吃</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rece就是竞争，多个Observable对象在一起，看谁先产生数据，不过这种竞争是十分残酷的，胜者通吃，败者则市区所有机会</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">2</span> = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$<span class="number">1.</span><span class="title function_">race</span>(source$<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 如果race确定了胜利者，那么就会退订其他输入的Observable对象</span></span><br></pre></td></tr></table></figure><h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// startWith只要实例操作符的形式，其功能是让一个Observable对象在被订阅的时候总是先吐出指定的若干数据，</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$<span class="number">1.</span><span class="title function_">startWith</span>(<span class="string">&#x27;start&#x27;</span>); <span class="comment">// 支持多个参数，同步输出</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// start 立刻输出</span></span><br><span class="line"><span class="comment">// 0 1秒后</span></span><br><span class="line"><span class="comment">// 1 2秒后</span></span><br></pre></td></tr></table></figure><h4 id="forkJoin-x3D-x3D-Promise-all"><a href="#forkJoin-x3D-x3D-Promise-all" class="headerlink" title="forkJoin ~&#x3D;&#x3D; Promise.all"></a>forkJoin ~&#x3D;&#x3D; Promise.all</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forkJoin只要静态操作符，接受多个Observable对象作为参数，它只会产生一个数据，因为他会等待所有参数Observable对象对象的最后一个数据，</span></span><br><span class="line"><span class="comment">// 也就是说，只要当所有Observable都完结，forkJoin会把所有输入Observable对象产生的最后一个数据合并成下游唯一的数据</span></span><br><span class="line"><span class="comment">// 所以说forkJoin就是rxjs界的Promise.all</span></span><br><span class="line"><span class="keyword">const</span> source$<span class="number">1</span> = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">const</span> source$<span class="number">2</span> = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">const</span> result$ = source$<span class="number">1.</span><span class="title function_">forkJoin</span>(source$<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="高阶Observable-高阶数据流"><a href="#高阶Observable-高阶数据流" class="headerlink" title="高阶Observable 高阶数据流"></a>高阶Observable 高阶数据流</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数就是产生函数的函数：参数为函数，返回也是函数</span></span><br><span class="line"><span class="comment">// 简单的高阶Observable</span></span><br><span class="line"><span class="keyword">const</span> hot$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1500</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 注意：高阶Observable完结，不代表内部Observable完结，但是内部Observable却不会岁随主干Observable的完结而完结，因为作为独立Observable，他们有自己的生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶Observable的意义</span></span><br><span class="line"><span class="comment">// 高阶Observable的本质是用管理数据的方式来管理多个Observable对象，它的存在意义就在与此</span></span><br></pre></td></tr></table></figure><h4 id="操作高阶Observable的合并类操作符"><a href="#操作高阶Observable的合并类操作符" class="headerlink" title="操作高阶Observable的合并类操作符"></a>操作高阶Observable的合并类操作符</h4><ul><li>concatAll</li><li>merageAll</li><li>zipAll</li><li>combineAll(例外)</li></ul><p>all代表全部，这些操作符功能有差异，但都是把一个高阶Observable的所有的内部Observable组合起来，所有这类操作符全部都只有实力操作符的形式</p><h4 id="concatAll"><a href="#concatAll" class="headerlink" title="concatAll"></a>concatAll</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concatAll 只有一个上游Observable对象，这个observable对象预期是一个高阶Observable对象，concatAll会对内部的Observable对象做concat操作</span></span><br><span class="line"><span class="keyword">const</span> ho$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">            .<span class="title function_">take</span>(<span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1500</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> concated$ = ho$.<span class="title function_">concatAll</span>();</span><br><span class="line"><span class="comment">// 0:0 # 开始订阅第一个内部Observable</span></span><br><span class="line"><span class="comment">// 0:1 </span></span><br><span class="line"><span class="comment">// 1:0 # 开始订阅第二个内部Observable</span></span><br><span class="line"><span class="comment">// 1:1</span></span><br><span class="line"><span class="comment">// concatAll 首先会订阅上游产生的第一个内部Observable对象，抽取其中的数据，然后只有当第一个Observable对象完结的时候，才会去订阅第二个Observable对象。</span></span><br><span class="line"><span class="comment">// 也就是说，虽然高阶Observable对象已经产生了第二个Observable对象，不代表concatAll会立刻去订阅它，因为和这个Observable对象是懒执行，所以不去订阅自然也不会产生数据。</span></span><br></pre></td></tr></table></figure><h4 id="mergeAll"><a href="#mergeAll" class="headerlink" title="mergeAll"></a>mergeAll</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mergeAll 就是处理高阶Observable的merge,</span></span><br><span class="line"><span class="keyword">const</span> ho$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">            .<span class="title function_">take</span>(<span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1500</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> concated$ = ho$.<span class="title function_">margeAll</span>();</span><br><span class="line"><span class="comment">// mergeAll 对内部的Observable的订阅策略和concatAll不同，mergeAll只要发现上游产生一个内部Observable就会立刻订阅，并从中抽取数据</span></span><br></pre></td></tr></table></figure><h4 id="zipAll"><a href="#zipAll" class="headerlink" title="zipAll"></a>zipAll</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ho$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">            .<span class="title function_">take</span>(<span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1500</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> concated$ = ho$.<span class="title function_">zipAll</span>();</span><br><span class="line"><span class="comment">// [&quot;0:0&quot;, &quot;1:0&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;0:1&quot;, &quot;1:1&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ho$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">2</span>).<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">never</span>()) <span class="comment">// 形成了只有两个数据的永不完结的数据流</span></span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1500</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> concated$ = ho$.<span class="title function_">zipAll</span>();</span><br><span class="line"><span class="comment">// 现在zipAll的上游是一个永不完结的Observable，当它拿到2个内部Observable的时候，无法确定是不是还有新的内部Observable产生，而根据拉链的工作方式，来自不同数据源的数据要一对一配对，</span></span><br><span class="line"><span class="comment">// 这样一来，zipAll就只能等待，等待上游高阶Observable完结，这样才能确定内部Observable对象的数量，如果上游的高阶Observable不完结，那么zipAll 就不会开始工作</span></span><br></pre></td></tr></table></figure><h4 id="switch-切换输入Observable"><a href="#switch-切换输入Observable" class="headerlink" title="switch 切换输入Observable"></a>switch 切换输入Observable</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch 的含义就是 切换，总是切换到最新的内部Observable对象获取数据，每当switch的上游高阶Observable产生一个内部Observable对象，switch都会立刻订阅最新的内部Observable对象上</span></span><br><span class="line"><span class="comment">// 如果已经订阅了之前的内部Observable对象，就会退订那个多事的内部Observable对象，这个 用上新的，舍弃旧的 动作，就是切换</span></span><br><span class="line"><span class="keyword">const</span> ho$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">            .<span class="title function_">take</span>(<span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1500</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> result$ = ho$.<span class="title function_">switch</span>();</span><br><span class="line"><span class="comment">// 1:0</span></span><br><span class="line"><span class="comment">// 1:1</span></span><br><span class="line"><span class="comment">// switch 首先订阅了第一个内部Observable对象，但是这个内部对象还没来得及产生第一个数据0:0(1000ms + 1500ms 后)，第二个内部Observable对象就产生了(100ms + 1000ms 后)，</span></span><br><span class="line"><span class="comment">// 这样switch就会切换动作，切换到第二个内部Observable上，因为之后没有新的内部Observable对象产生了，switch就会一直从第二个内部Observable对象获取数据，于是最后得到的数据就是 1:0,1:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上游Observable产生新的内部Observable时进行切换。订阅的是内部的Observable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意和 race 不同，race 是别人没有机会，而switch可以翻来覆去一直抢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完结条件：1 上游高阶Observable已经完结; 2 当前内部Observable已经完结</span></span><br></pre></td></tr></table></figure><h4 id="exhaust-耗尽"><a href="#exhaust-耗尽" class="headerlink" title="exhaust 耗尽"></a>exhaust 耗尽</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在耗尽当前内部Observable的数据之前不会切换到下一个内部Observable对象</span></span><br><span class="line"><span class="keyword">const</span> ho$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">            .<span class="title function_">take</span>(<span class="number">3</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">700</span>).<span class="title function_">map</span>(<span class="function"><span class="params">y</span> =&gt;</span> x+<span class="string">&#x27;:&#x27;</span>+y).<span class="title function_">take</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> result$ = ho$.<span class="title function_">exhaust</span>();</span><br><span class="line"><span class="comment">// exhaust 首先从第一个内部Observable对象获取数据，然后再考虑后续的内部Observable对象</span></span><br><span class="line"><span class="comment">// 第二个内部Observable生不逢时，当它产生的时候第一个内部Observable对象还没有完结，这时候exhaust会直接忽略第二个Observable对象，甚至不会去订阅它，、</span></span><br><span class="line"><span class="comment">// 第三个内部Observable对象会被订阅病提取数据，是因为在它出现之前，第一个内部Observable都已经完结了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完结条件：1 上游Observable对象完结; 2 最新的内部Observable对象完结</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建操作符</title>
      <link href="/posts/2625071920/"/>
      <url>/posts/2625071920/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/Ngh65GwhHtufNRSs9KgEIA==/109951163681417636.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" />rxjs 操作符 - 创建操作符create，of，range，generate，repeat，emptythrow，never，interval，timerfrom，fromPromise，fromEvent，fromEventPatternajax，defer<span id="more"></span><h2 id="第一大类：创建操作符"><a href="#第一大类：创建操作符" class="headerlink" title="第一大类：创建操作符"></a>第一大类：创建操作符</h2><table><thead><tr><th>操作符</th><th>功能</th></tr></thead><tbody><tr><td>create</td><td>直接创建观察者对象</td></tr><tr><td>of</td><td>根据参数直接产生同步数据</td></tr><tr><td>range</td><td>产生一个数值范围内的数据</td></tr><tr><td>generate</td><td>以循环方式产生数据，相当于for循环，有判断条件</td></tr><tr><td>repeat repeatWhen</td><td>重复产生数据流中的数据</td></tr><tr><td>empty</td><td>产生空的数据流，并结束</td></tr><tr><td>throw</td><td>产生直接出错的数据流，并结束</td></tr><tr><td>never</td><td>产生永不完结的数据流</td></tr><tr><td>interval timer</td><td>间隔给定时间持续产生数据流</td></tr><tr><td>from</td><td>从数组等枚举类型数据产生数据流</td></tr><tr><td>fromPromise</td><td>从Promise中产生数据流</td></tr><tr><td>fromEvent fromEventPattern</td><td>从外部事件对象产生数据流</td></tr><tr><td>ajax</td><td>从ajax请求产生数据流</td></tr><tr><td>defer</td><td>延迟产生数据流</td></tr></tbody></table><p>例子：</p><h4 id="create-毫无特点"><a href="#create-毫无特点" class="headerlink" title="create 毫无特点"></a>create 毫无特点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params">subscribe</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observable</span>(subscribe)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="of-列举数据"><a href="#of-列举数据" class="headerlink" title="of 列举数据"></a>of 列举数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">source$.<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>, <span class="comment">// 收到数据时触发的回调</span></span><br><span class="line">    <span class="literal">null</span>, <span class="comment">// 相当于catch</span></span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;complete&#x27;</span>) <span class="comment">// 当整个数据流结束时触发</span></span><br><span class="line">) <span class="comment">// result: 1 2 3 同步产生</span></span><br></pre></td></tr></table></figure><h4 id="range-指定范围"><a href="#range-指定范围" class="headerlink" title="range 指定范围"></a>range 指定范围</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">range</span>(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 订阅后直接输出1 2 3 4 5 ... 99 100 同步产生</span></span><br></pre></td></tr></table></figure><h4 id="generate-循环创建"><a href="#generate-循环创建" class="headerlink" title="generate 循环创建"></a>generate 循环创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">generate</span>(</span><br><span class="line">    <span class="number">2</span>, <span class="comment">// 初始值</span></span><br><span class="line">    <span class="function"><span class="params">value</span> =&gt;</span> value &lt; <span class="number">10</span>, <span class="comment">// 继续的条件，相当于for中的条件判断</span></span><br><span class="line">    <span class="function"><span class="params">value</span> =&gt;</span> value + <span class="number">2</span>, <span class="comment">// 每次递增的值</span></span><br><span class="line">    <span class="function"><span class="params">value</span> =&gt;</span> value * value <span class="comment">// 产生的结果</span></span><br><span class="line"><span class="comment">// 使用generate四个参数分别对应了for循环中的不同表达式，其中除了第一个参数是一个值外，其余三个参数都是函数，应该保持着三个参数都是纯函数。</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="repeat-重复数据的数据流"><a href="#repeat-重复数据的数据流" class="headerlink" title="repeat 重复数据的数据流"></a>repeat 重复数据的数据流</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> repeated$ source$.<span class="title function_">repeat</span>(<span class="number">10</span>); <span class="comment">// 将source$的数据产生10遍，共产生30个数据，每次循环都会经历订阅，退订的过程</span></span><br></pre></td></tr></table></figure><h4 id="三个极简的操作符：empty-never-throw"><a href="#三个极简的操作符：empty-never-throw" class="headerlink" title="三个极简的操作符：empty never throw"></a>三个极简的操作符：empty never throw</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">empty</span>(); <span class="comment">// 直接产生完结对象，没有参数，不产生任何数据</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="keyword">throw</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;直接报错&#x27;</span>)); <span class="comment">// 直接抛出错误，立即完结</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">nerver</span>(); <span class="comment">// nerver 真的什么都不做，即不吐出数据，也不完结，也不产生错误，就这样待着，直到天荒地老</span></span><br></pre></td></tr></table></figure><h3 id="创建异步数据的Observable对象"><a href="#创建异步数据的Observable对象" class="headerlink" title="创建异步数据的Observable对象"></a>创建异步数据的Observable对象</h3><h4 id="interval-timer-定时产生数据"><a href="#interval-timer-定时产生数据" class="headerlink" title="interval timer 定时产生数据"></a>interval timer 定时产生数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>); <span class="comment">// 从0开始，每秒产生一个数据，第一数据产生在订阅1秒后</span></span><br><span class="line"><span class="comment">// 如果想从1开始</span></span><br><span class="line"><span class="keyword">const</span> result$ = source%.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>); <span class="comment">// 与map组合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// timer 指定产生第一数据的延迟时间</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">2000</span>); <span class="comment">// 2秒后产生第一个数据0，然后立刻完结</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">2000</span>, <span class="number">1000</span>); <span class="comment">// 2秒后产生第一个数据0，然后接下来每隔1秒依次产生一个数据</span></span><br></pre></td></tr></table></figure><h4 id="from-可以把一切转化为Observable"><a href="#from-可以把一切转化为Observable" class="headerlink" title="from 可以把一切转化为Observable"></a>from 可以把一切转化为Observable</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 依次输出1 2 3 甚至参数可以是argument</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">generateNumber</span>(<span class="params">max</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= max; ++i) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> source$ <span class="title class_">Observable</span>.<span class="title function_">from</span>(<span class="title function_">generateNumber</span>(<span class="number">3</span>)); <span class="comment">// 甚至可以消化yield</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">from</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">// 输出 a b c </span></span><br></pre></td></tr></table></figure><h4 id="fromPromise-异步处理交接"><a href="#fromPromise-异步处理交接" class="headerlink" title="fromPromise 异步处理交接"></a>fromPromise 异步处理交接</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;good&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">from</span>(promise);</span><br><span class="line">source$.<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>, error),</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;complete&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="fromEvent-把dom中的事件转化为Observable对象中的数据"><a href="#fromEvent-把dom中的事件转化为Observable对象中的数据" class="headerlink" title="fromEvent 把dom中的事件转化为Observable对象中的数据"></a>fromEvent 把dom中的事件转化为Observable对象中的数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是一个事件源，如dom元素，第二个参数是事件名称，对应dom事件就是click,mousemove这样的字符串</span></span><br><span class="line"><span class="keyword">const</span> event$ = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">fromEvent</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#clickMe&#x27;</span>), <span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">event$.<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 还可以使用node的events中获得数据</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EventEmitter</span> <span class="keyword">from</span> <span class="string">&#x27;events&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventMitter</span>();</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">from</span>(emitter, <span class="string">&#x27;msg&#x27;</span>);</span><br><span class="line">source$.<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">eemitter.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">mitter.<span class="title function_">emit</span>(<span class="string">&#x27;another-mag&#x27;</span>, <span class="number">3</span>); <span class="comment">// 别的事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 输出 1 2 4</span></span><br></pre></td></tr></table></figure><h4 id="fromEventPattern"><a href="#fromEventPattern" class="headerlink" title="fromEventPattern"></a>fromEventPattern</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fromEventPattern 接受2个函数参数，分别对应产生的Observable对象被订阅和退订时的动作,因为这两个参数是函数，具体动作可以任意定义，所以可以非常灵活</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventMitter</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addHandler</span> = handler =&gt; &#123;</span><br><span class="line">    emitter.<span class="title function_">addListener</span>(<span class="string">&#x27;msg&#x27;</span>, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeHandler</span> = handler =&gt; &#123;</span><br><span class="line">    emitter.<span class="title function_">removeListener</span>(<span class="string">&#x27;msg&#x27;</span>, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">fromEventPattern</span>(addHandler, removeHandler);</span><br><span class="line">conset subscription = source$.<span class="title function_">subscirbe</span>( <span class="comment">// 订阅</span></span><br><span class="line">    <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">)</span><br><span class="line">subscription.<span class="title function_">unsubscribe</span>() <span class="comment">// 退订</span></span><br><span class="line"><span class="comment">// 其中参数handler相当于Observable的next函数</span></span><br></pre></td></tr></table></figure><h4 id="defer-推迟占用资源的一种惯用模式"><a href="#defer-推迟占用资源的一种惯用模式" class="headerlink" title="defer 推迟占用资源的一种惯用模式"></a>defer 推迟占用资源的一种惯用模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defer 推迟占用资源的一种惯用模式</span></span><br><span class="line"><span class="comment">// defer 接受一个函数作为参数，当defer产生的Observable对象被订阅的时候，defer的函数参数就会被调用，预期这个函数会返回另一个Observable对象，也就是defer转嫁所有工作的对象，因为Promise和Observable的关系，defer也很贴心的支持返回Promise对象的函数参数。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observableFactory</span> = (<span class="params"></span>) =&gt; <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title class_">Observable</span>.<span class="title function_">defer</span>(observaleFactory);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rxjs 简介</title>
      <link href="/posts/34359/"/>
      <url>/posts/34359/</url>
      
        <content type="html"><![CDATA[<img src="//p2.music.126.net/KuEjitsnKt05FxnoKD0xcw==/109951163466304647.jpg?param=90y90" width = "100" height = "100" div align=right style="position: absolute; right: 0; margin-top: -10px;" />函数式编程，Observable 和 Observer 观察者模式，迭代器模式操作符<span id="more"></span><h1 id="RxJs简介"><a href="#RxJs简介" class="headerlink" title="RxJs简介"></a>RxJs简介</h1><h3 id="首先，函数式编程"><a href="#首先，函数式编程" class="headerlink" title="首先，函数式编程"></a>首先，函数式编程</h3><p>顾名思义,函数式编程就是非常强调使用函数来解决问题的一种编程方式。<br>要求以下几点：</p><ul><li>声明式</li><li>纯函数</li><li>数据不可变性</li></ul><h3 id="Observable-和-Observer"><a href="#Observable-和-Observer" class="headerlink" title="Observable 和 Observer"></a>Observable 和 Observer</h3><ul><li>observable: 可以被观察的对象，即可被观察者</li><li>observer: 观察者</li></ul><h3 id="RxJS中的数据流就是Observable对象，Observable实现了下面两种设计模式："><a href="#RxJS中的数据流就是Observable对象，Observable实现了下面两种设计模式：" class="headerlink" title="RxJS中的数据流就是Observable对象，Observable实现了下面两种设计模式："></a>RxJS中的数据流就是Observable对象，Observable实现了下面两种设计模式：</h3><ul><li>观察者模式</li><li>迭代器模式</li></ul><h3 id="Observable-的核心在于各种各样的操作符"><a href="#Observable-的核心在于各种各样的操作符" class="headerlink" title="Observable 的核心在于各种各样的操作符"></a>Observable 的核心在于各种各样的操作符</h3><p>操作符分为以下几大类：</p><ul><li>创建操作符</li><li>合并操作符</li><li>辅助类操作符</li><li>过滤操作符</li><li>转化操作符</li><li>异常错误处理操作符</li></ul><h3 id="还有"><a href="#还有" class="headerlink" title="还有"></a>还有</h3><ul><li>多播</li><li>调度器(Scheduler)</li><li>高阶Observable</li><li>rxjs的调试和测试</li></ul>]]></content>
      
      
      <categories>
          
          <category> RxJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
